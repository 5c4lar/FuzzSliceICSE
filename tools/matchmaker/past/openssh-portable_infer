#0
verify.c:48: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32.
  46.   F(30)
  47.   F(31)
  48.   return (1 & ((differentbits - 1) >> 8)) - 1;
        ^
  49. }

#1
sc25519.c:45: error: Uninitialized Value
  The value read from b was never initialized.
  43.     pb = b;
  44.   }
  45.   mask = b - 1;
        ^
  46.   for(i=0;i<32;i++) 
  47.     r->v[i] ^= mask & (r->v[i] ^ t[i]);

#2
sc25519.c:47: error: Uninitialized Value
  The value read from t[_] was never initialized.
  45.   mask = b - 1;
  46.   for(i=0;i<32;i++) 
  47.     r->v[i] ^= mask & (r->v[i] ^ t[i]);
          ^
  48. }
  49. 

#3
sshbuf-getput-basic.c:43: error: Null Dereference
  pointer `p` last assigned on line 37 could be null and is dereferenced by call to `memcpy()` at line 43, column 3.
  41. 		return r;
  42. 	if (v != NULL && len != 0)
  43. 		memcpy(v, p, len);
        ^
  44. 	return 0;
  45. }

#4
ssh-ed25519-sk.c:138: error: Buffer Overrun L3
  Offset: [32, +oo] (<= [32, +oo] + [0, 31]) Size: [0, +oo] by call to `crypto_sign_ed25519_open`.
  136. 		goto out;
  137. 	}
  138. 	if ((ret = crypto_sign_ed25519_open(m, &mlen, sm, smlen,
                   ^
  139. 	    key->ed25519_pk)) != 0) {
  140. 		debug2("%s: crypto_sign_ed25519_open failed: %d",

#5
ssh-ed25519-sk.c:138: error: Buffer Overrun L3
  Offset: [32, 63] Size: [0, +oo] by call to `crypto_sign_ed25519_open`.
  136. 		goto out;
  137. 	}
  138. 	if ((ret = crypto_sign_ed25519_open(m, &mlen, sm, smlen,
                   ^
  139. 	    key->ed25519_pk)) != 0) {
  140. 		debug2("%s: crypto_sign_ed25519_open failed: %d",

#6
ssh-ed25519-sk.c:138: error: Buffer Overrun L3
  Offset: [64, +oo] (<= [0, +oo] + [64, +oo]) Size: [0, +oo] by call to `crypto_sign_ed25519_open`.
  136. 		goto out;
  137. 	}
  138. 	if ((ret = crypto_sign_ed25519_open(m, &mlen, sm, smlen,
                   ^
  139. 	    key->ed25519_pk)) != 0) {
  140. 		debug2("%s: crypto_sign_ed25519_open failed: %d",

#7
ssh-ed25519-sk.c:54: error: Dead Store
  The value written to &r (type int) is never used.
  52. 	size_t len;
  53. 	unsigned long long smlen = 0, mlen = 0;
  54. 	int r = SSH_ERR_INTERNAL_ERROR;
       ^
  55. 	int ret;
  56. 	struct sshkey_sig_details *details = NULL;

#8
dispatch.c:50: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  48. 	    (r = sshpkt_send(ssh)) != 0 ||
  49. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  50. 		sshpkt_fatal(ssh, r, "%s", __func__);
        ^
  51. 	return 0;
  52. }

#9
dispatch.c:48: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  46. 	if ((r = sshpkt_start(ssh, SSH2_MSG_UNIMPLEMENTED)) != 0 ||
  47. 	    (r = sshpkt_put_u32(ssh, seq)) != 0 ||
  48. 	    (r = sshpkt_send(ssh)) != 0 ||
                ^
  49. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  50. 		sshpkt_fatal(ssh, r, "%s", __func__);

#10
dispatch.c:47: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  45. 	logit("dispatch_protocol_error: type %d seq %u", type, seq);
  46. 	if ((r = sshpkt_start(ssh, SSH2_MSG_UNIMPLEMENTED)) != 0 ||
  47. 	    (r = sshpkt_put_u32(ssh, seq)) != 0 ||
                ^
  48. 	    (r = sshpkt_send(ssh)) != 0 ||
  49. 	    (r = ssh_packet_write_wait(ssh)) != 0)

#11
dispatch.c:46: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  44. 
  45. 	logit("dispatch_protocol_error: type %d seq %u", type, seq);
  46. 	if ((r = sshpkt_start(ssh, SSH2_MSG_UNIMPLEMENTED)) != 0 ||
                ^
  47. 	    (r = sshpkt_put_u32(ssh, seq)) != 0 ||
  48. 	    (r = sshpkt_send(ssh)) != 0 ||

#12
compat.c:149: error: Buffer Overrun L3
  Offset: [0, 259] Size: [6, 261] by call to `match_pattern_list`.
  147. 	/* process table, return first match */
  148. 	for (i = 0; check[i].pat; i++) {
  149. 		if (match_pattern_list(version, check[i].pat, 0) == 1) {
             ^
  150. 			debug("match: %s pat %s compat 0x%08x",
  151. 			    version, check[i].pat, check[i].bugs);

#13
ssh-sk-client.c:82: error: Unreachable Code
  Unreachable code after statement.
  80. 		    (dup2(pair[1], STDOUT_FILENO) == -1)) {
  81. 			error("%s: dup2: %s", __func__, ssh_err(r));
  82. 			_exit(1);
         ^
  83. 		}
  84. 		close(pair[0]);

#14
ssh-sk-client.c:91: error: Unreachable Code
  Unreachable code after statement.
  89. 		execlp(helper, helper, verbosity, (char *)NULL);
  90. 		error("%s: execlp: %s", __func__, strerror(errno));
  91. 		_exit(1);
        ^
  92. 	}
  93. 	close(pair[1]);

#15
sshbuf-getput-basic.c:56: error: Null Dereference
  pointer `p` last assigned on line 50 could be null and is dereferenced at line 56, column 11.
  54. 		return r;
  55. 	if (valp != NULL)
  56. 		*valp = PEEK_U64(p);
                ^
  57. 	return 0;
  58. }

#16
sshsig.c:51: error: Dead Store
  The value written to &r (type int) is never used.
  49. {
  50. 	struct sshbuf *buf = NULL;
  51. 	int r = SSH_ERR_INTERNAL_ERROR;
       ^
  52. 
  53. 	*out = NULL;

#17
ssh-ecdsa.c:59: error: Dead Store
  The value written to &ret (type int) is never used.
  57. 	size_t len, dlen;
  58. 	struct sshbuf *b = NULL, *bb = NULL;
  59. 	int ret = SSH_ERR_INTERNAL_ERROR;
       ^
  60. 
  61. 	if (lenp != NULL)

#18
ssh-ecdsa.c:107: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  105. 	explicit_bzero(digest, sizeof(digest));
  106. 	sshbuf_free(b);
  107. 	sshbuf_free(bb);
        ^
  108. 	ECDSA_SIG_free(sig);
  109. 	return ret;

#19
smult_curve25519_ref.c:59: error: Uninitialized Value
  The value read from aorig[_] was never initialized.
  57.   add(a,a,minusp);
  58.   negative = -((a[31] >> 7) & 1);
  59.   for (j = 0;j < 32;++j) a[j] ^= negative & (aorig[j] ^ a[j]);
                               ^
  60. }
  61. 

#20
cipher-chachapoly.c:67: error: Buffer Overrun L1
  Offset: [35, +oo] (<= [32, +oo] + 3) Size: 32 by call to `chacha_encrypt_bytes`.
  65. 	POKE_U64(seqbuf, seqnr);
  66. 	chacha_ivsetup(&ctx->main_ctx, seqbuf, NULL);
  67. 	chacha_encrypt_bytes(&ctx->main_ctx,
       ^
  68. 	    poly_key, poly_key, sizeof(poly_key));
  69. 

#21
cipher-chachapoly.c:58: error: Dead Store
  The value written to &r (type int) is never used.
  56. 	const u_char one[8] = { 1, 0, 0, 0, 0, 0, 0, 0 }; /* NB little-endian */
  57. 	u_char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];
  58. 	int r = SSH_ERR_INTERNAL_ERROR;
       ^
  59. 
  60. 	/*

#22
sc25519.c:77: error: Buffer Overrun L2
  Offset: [0, 63] Size: 33.
  75.   for(i=0;i<32;i++)
  76.     for(j=0;j<33;j++)
  77.       if(i+j < 33) r2[i+j] += m[i]*q3[j];
                         ^
  78. 
  79.   for(i=0;i<32;i++)

#23
sc25519.c:68: error: Uninitialized Value
  The value read from q2[_] was never initialized.
  66.   for(i=0;i<33;i++)
  67.     for(j=0;j<33;j++)
  68.       if(i+j >= 31) q2[i+j] += mu[i]*x[j+31];
                          ^
  69.   carry = q2[31] >> 8;
  70.   q2[32] += carry;

#24
sc25519.c:69: error: Uninitialized Value
  The value read from q2[_] was never initialized.
  67.     for(j=0;j<33;j++)
  68.       if(i+j >= 31) q2[i+j] += mu[i]*x[j+31];
  69.   carry = q2[31] >> 8;
        ^
  70.   q2[32] += carry;
  71.   carry = q2[32] >> 8;

#25
sc25519.c:70: error: Uninitialized Value
  The value read from q2[_] was never initialized.
  68.       if(i+j >= 31) q2[i+j] += mu[i]*x[j+31];
  69.   carry = q2[31] >> 8;
  70.   q2[32] += carry;
        ^
  71.   carry = q2[32] >> 8;
  72.   q2[33] += carry;

#26
sc25519.c:89: error: Uninitialized Value
  The value read from r1[_] was never initialized.
  87.   {
  88.     pb += r2[i];
  89.     b = lt(r1[i],pb);
              ^
  90.     r->v[i] = r1[i]-pb+(b<<8);
  91.     pb = b;

#27
sc25519.c:90: error: Uninitialized Value
  The value read from r1[_] was never initialized.
  88.     pb += r2[i];
  89.     b = lt(r1[i],pb);
  90.     r->v[i] = r1[i]-pb+(b<<8);
          ^
  91.     pb = b;
  92.   }

#28
sc25519.c:77: error: Uninitialized Value
  The value read from r2[_] was never initialized.
  75.   for(i=0;i<32;i++)
  76.     for(j=0;j<33;j++)
  77.       if(i+j < 33) r2[i+j] += m[i]*q3[j];
                         ^
  78. 
  79.   for(i=0;i<32;i++)

#29
sc25519.c:81: error: Uninitialized Value
  The value read from r2[_] was never initialized.
  79.   for(i=0;i<32;i++)
  80.   {
  81.     carry = r2[i] >> 8;
          ^
  82.     r2[i+1] += carry;
  83.     r2[i] &= 0xff;

#30
sc25519.c:82: error: Uninitialized Value
  The value read from r2[_] was never initialized.
  80.   {
  81.     carry = r2[i] >> 8;
  82.     r2[i+1] += carry;
          ^
  83.     r2[i] &= 0xff;
  84.   }

#31
sc25519.c:88: error: Uninitialized Value
  The value read from r2[_] was never initialized.
  86.   for(i=0;i<32;i++) 
  87.   {
  88.     pb += r2[i];
          ^
  89.     b = lt(r1[i],pb);
  90.     r->v[i] = r1[i]-pb+(b<<8);

#32
ssh-dss.c:60: error: Dead Store
  The value written to &ret (type int) is never used.
  58. 	size_t rlen, slen, len, dlen = ssh_digest_bytes(SSH_DIGEST_SHA1);
  59. 	struct sshbuf *b = NULL;
  60. 	int ret = SSH_ERR_INVALID_ARGUMENT;
       ^
  61. 
  62. 	if (lenp != NULL)

#33
ssh-ecdsa-sk.c:63: error: Dead Store
  The value written to &ret (type int) is never used.
  61. 	u_char msghash[32], apphash[32], sighash[32];
  62. 	u_int sig_counter;
  63. 	int ret = SSH_ERR_INTERNAL_ERROR;
       ^
  64. 	struct sshbuf *b = NULL, *sigbuf = NULL, *original_signed = NULL;
  65. 	char *ktype = NULL;

#34
ssh-ecdsa-sk.c:197: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  195. 	sshkey_sig_details_free(details);
  196. 	sshbuf_free(original_signed);
  197. 	sshbuf_free(sigbuf);
        ^
  198. 	sshbuf_free(b);
  199. 	ECDSA_SIG_free(sig);

#35
openbsd-compat/readpassphrase.c:72: error: Dead Store
  The value written to &nr (type long) is never used.
  70. 	for (i = 0; i < _NSIG; i++)
  71. 		signo[i] = 0;
  72. 	nr = -1;
       ^
  73. 	save_errno = 0;
  74. 	need_restart = 0;

#36
kexgexc.c:78: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  76. 	    (r = sshpkt_put_u32(ssh, kex->nbits)) != 0 ||
  77. 	    (r = sshpkt_put_u32(ssh, kex->max)) != 0 ||
  78. 	    (r = sshpkt_send(ssh)) != 0)
                ^
  79. 		goto out;
  80. 	debug("SSH2_MSG_KEX_DH_GEX_REQUEST(%u<%u<%u) sent",

#37
kexgexc.c:75: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  73. 	/* New GEX request */
  74. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_DH_GEX_REQUEST)) != 0 ||
  75. 	    (r = sshpkt_put_u32(ssh, kex->min)) != 0 ||
                ^
  76. 	    (r = sshpkt_put_u32(ssh, kex->nbits)) != 0 ||
  77. 	    (r = sshpkt_put_u32(ssh, kex->max)) != 0 ||

#38
kexgexc.c:74: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  72. 		kex->nbits = MINIMUM(kex->nbits, 4096);
  73. 	/* New GEX request */
  74. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_DH_GEX_REQUEST)) != 0 ||
                ^
  75. 	    (r = sshpkt_put_u32(ssh, kex->min)) != 0 ||
  76. 	    (r = sshpkt_put_u32(ssh, kex->nbits)) != 0 ||

#39
auth2-hostbased.c:151: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `hostbased_key_allowed`.
  149. 	/* test for allowed key and correct signature */
  150. 	authenticated = 0;
  151. 	if (PRIVSEP(hostbased_key_allowed(ssh, authctxt->pw, cuser,
            ^
  152. 	    chost, key)) &&
  153. 	    PRIVSEP(sshkey_verify(key, sig, slen,

#40
auth2-hostbased.c:151: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `hostbased_key_allowed`.
  149. 	/* test for allowed key and correct signature */
  150. 	authenticated = 0;
  151. 	if (PRIVSEP(hostbased_key_allowed(ssh, authctxt->pw, cuser,
            ^
  152. 	    chost, key)) &&
  153. 	    PRIVSEP(sshkey_verify(key, sig, slen,

#41
auth2-hostbased.c:92: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_from_blob`.
  90. 		goto done;
  91. 	}
  92. 	if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                ^
  93. 		error("%s: key_from_blob: %s", __func__, ssh_err(r));
  94. 		goto done;

#42
auth2-hostbased.c:92: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: [0, +oo] by call to `sshkey_from_blob`.
  90. 		goto done;
  91. 	}
  92. 	if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                ^
  93. 		error("%s: key_from_blob: %s", __func__, ssh_err(r));
  94. 		goto done;

#43
auth2-hostbased.c:157: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `auth2_record_key`.
  155. 		authenticated = 1;
  156. 
  157. 	auth2_record_key(authctxt, authenticated, key);
        ^
  158. 	sshbuf_free(b);
  159. done:

#44
sshbuf-getput-basic.c:69: error: Null Dereference
  pointer `p` last assigned on line 63 could be null and is dereferenced at line 69, column 11.
  67. 		return r;
  68. 	if (valp != NULL)
  69. 		*valp = PEEK_U32(p);
                ^
  70. 	return 0;
  71. }

#45
smult_curve25519_ref.c:70: error: Integer Overflow L2
  ([0, 31] - [0, 31]):unsigned32.
  68.   for (i = 0;i < 32;++i) {
  69.     u = 0;
  70.     for (j = 0;j <= i;++j) u += a[j] * b[i - j];
                                             ^
  71.     for (j = i + 1;j < 32;++j) u += 38 * a[j] * b[i + 32 - j];
  72.     out[i] = u;

#46
krl.c:63: error: Null Dereference
  pointer `tmp` last assigned on line 63 could be null and is dereferenced at line 63, column 1.
  61. static int serial_cmp(struct revoked_serial *a, struct revoked_serial *b);
  62. RB_HEAD(revoked_serial_tree, revoked_serial);
  63. RB_GENERATE_STATIC(revoked_serial_tree, revoked_serial, tree_entry, serial_cmp);
      ^
  64. 
  65. /* Tree of key IDs */

#47
ssh-keysign.c:120: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_from_blob`.
  118. 	if (pktype == KEY_UNSPEC)
  119. 		fail++;
  120. 	else if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                      ^
  121. 		error("%s: bad key blob: %s", __func__, ssh_err(r));
  122. 		fail++;

#48
ssh-keysign.c:120: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: [0, +oo] by call to `sshkey_from_blob`.
  118. 	if (pktype == KEY_UNSPEC)
  119. 		fail++;
  120. 	else if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                      ^
  121. 		error("%s: bad key blob: %s", __func__, ssh_err(r));
  122. 		fail++;

#49
ssh-keysign.c:134: error: Buffer Overrun S2
  Offset: `host->strlen` Size: [0, +oo].
  132. 	if (strlen(host) != len - 1)
  133. 		fail++;
  134. 	else if (p[len - 1] != '.')
                 ^
  135. 		fail++;
  136. 	else if (strncasecmp(host, p, len - 1) != 0)

#50
ssh-keysign.c:156: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  154. 
  155. 	if (fail)
  156. 		sshkey_free(key);
         ^
  157. 	else if (ret != NULL)
  158. 		*ret = key;

#51
openbsd-compat/bcrypt_pbkdf.c:98: error: Uninitialized Value
  The value read from cdata[_] was never initialized.
   96. 	/* copy out */
   97. 	for (i = 0; i < BCRYPT_WORDS; i++) {
   98. 		out[4 * i + 3] = (cdata[i] >> 24) & 0xff;
         ^
   99. 		out[4 * i + 2] = (cdata[i] >> 16) & 0xff;
  100. 		out[4 * i + 1] = (cdata[i] >> 8) & 0xff;

#52
openbsd-compat/bcrypt_pbkdf.c:99: error: Uninitialized Value
  The value read from cdata[_] was never initialized.
   97. 	for (i = 0; i < BCRYPT_WORDS; i++) {
   98. 		out[4 * i + 3] = (cdata[i] >> 24) & 0xff;
   99. 		out[4 * i + 2] = (cdata[i] >> 16) & 0xff;
         ^
  100. 		out[4 * i + 1] = (cdata[i] >> 8) & 0xff;
  101. 		out[4 * i + 0] = cdata[i] & 0xff;

#53
openbsd-compat/bcrypt_pbkdf.c:100: error: Uninitialized Value
  The value read from cdata[_] was never initialized.
   98. 		out[4 * i + 3] = (cdata[i] >> 24) & 0xff;
   99. 		out[4 * i + 2] = (cdata[i] >> 16) & 0xff;
  100. 		out[4 * i + 1] = (cdata[i] >> 8) & 0xff;
         ^
  101. 		out[4 * i + 0] = cdata[i] & 0xff;
  102. 	}

#54
openbsd-compat/bcrypt_pbkdf.c:101: error: Uninitialized Value
  The value read from cdata[_] was never initialized.
   99. 		out[4 * i + 2] = (cdata[i] >> 16) & 0xff;
  100. 		out[4 * i + 1] = (cdata[i] >> 8) & 0xff;
  101. 		out[4 * i + 0] = cdata[i] & 0xff;
         ^
  102. 	}
  103. 

#55
kexsntrup4591761x25519.c:153: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  151. 	explicit_bzero(server_key, sizeof(server_key));
  152. 	sshbuf_free(server_blob);
  153. 	sshbuf_free(buf);
        ^
  154. 	return r;
  155. }

#56
kexgexs.c:102: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_disconnect`.
  100. 	kex->dh = PRIVSEP(choose_dh(min, nbits, max));
  101. 	if (kex->dh == NULL) {
  102. 		sshpkt_disconnect(ssh, "no matching DH grp found");
         ^
  103. 		r = SSH_ERR_ALLOC_FAIL;
  104. 		goto out;

#57
kexgexs.c:102: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_disconnect`.
  100. 	kex->dh = PRIVSEP(choose_dh(min, nbits, max));
  101. 	if (kex->dh == NULL) {
  102. 		sshpkt_disconnect(ssh, "no matching DH grp found");
         ^
  103. 		r = SSH_ERR_ALLOC_FAIL;
  104. 		goto out;

#58
ssh-pkcs11-client.c:97: error: Integer Overflow L2
  ([1, 262144] - [1, 1024]):unsigned32.
  95. 		if ((r = sshbuf_put(m, buf, l)) != 0)
  96. 			fatal("%s: buffer error: %s", __func__, ssh_err(r));
  97. 		len -= l;
        ^
  98. 	}
  99. 	if ((r = sshbuf_get_u8(m, &c)) != 0)

#59
auth-options.c:87: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  85. 
  86. 	while (sshbuf_len(c) > 0) {
  87. 		sshbuf_free(data);
        ^
  88. 		data = NULL;
  89. 		if ((r = sshbuf_get_cstring(c, &name, NULL)) != 0 ||

#60
krl.c:72: error: Null Dereference
  pointer `tmp` last assigned on line 72 could be null and is dereferenced at line 72, column 1.
  70. static int key_id_cmp(struct revoked_key_id *a, struct revoked_key_id *b);
  71. RB_HEAD(revoked_key_id_tree, revoked_key_id);
  72. RB_GENERATE_STATIC(revoked_key_id_tree, revoked_key_id, tree_entry, key_id_cmp);
      ^
  73. 
  74. /* Tree of blobs (used for keys and fingerprints) */

#61
sshbuf-misc.c:82: error: Inferbo Alloc May Be Big
  Length: [-oo, 18446744073709551613].
  80. 	if (len == 0)
  81. 		return strdup("");
  82. 	if (SIZE_MAX / 2 <= len || (ret = malloc(len * 2 + 1)) == NULL)
                                         ^
  83. 		return NULL;
  84. 	for (i = j = 0; i < len; i++) {

#62
sshbuf-misc.c:85: error: Null Dereference
  pointer `p` last assigned on line 76 could be null and is dereferenced at line 85, column 19.
  83. 		return NULL;
  84. 	for (i = j = 0; i < len; i++) {
  85. 		ret[j++] = hex[(p[i] >> 4) & 0xf];
                        ^
  86. 		ret[j++] = hex[p[i] & 0xf];
  87. 	}

#63
sshbuf-misc.c:85: error: Uninitialized Value
  The value read from hex[_] was never initialized.
  83. 		return NULL;
  84. 	for (i = j = 0; i < len; i++) {
  85. 		ret[j++] = hex[(p[i] >> 4) & 0xf];
        ^
  86. 		ret[j++] = hex[p[i] & 0xf];
  87. 	}

#64
sshbuf-misc.c:86: error: Uninitialized Value
  The value read from hex[_] was never initialized.
  84. 	for (i = j = 0; i < len; i++) {
  85. 		ret[j++] = hex[(p[i] >> 4) & 0xf];
  86. 		ret[j++] = hex[p[i] & 0xf];
        ^
  87. 	}
  88. 	ret[j] = '\0';

#65
openbsd-compat/blowfish.c:85: error: Buffer Overrun L1
  Offset: [768, 1023] Size: 4.
  83. 
  84. 	Xl ^= p[0];
  85. 	BLFRND(s, p, Xr, Xl, 1); BLFRND(s, p, Xl, Xr, 2);
       ^
  86. 	BLFRND(s, p, Xr, Xl, 3); BLFRND(s, p, Xl, Xr, 4);
  87. 	BLFRND(s, p, Xr, Xl, 5); BLFRND(s, p, Xl, Xr, 6);

#66
openbsd-compat/blowfish.c:85: error: Buffer Overrun L2
  Offset: [0, 255] Size: 4.
  83. 
  84. 	Xl ^= p[0];
  85. 	BLFRND(s, p, Xr, Xl, 1); BLFRND(s, p, Xl, Xr, 2);
       ^
  86. 	BLFRND(s, p, Xr, Xl, 3); BLFRND(s, p, Xl, Xr, 4);
  87. 	BLFRND(s, p, Xr, Xl, 5); BLFRND(s, p, Xl, Xr, 6);

#67
sshbuf-getput-basic.c:82: error: Null Dereference
  pointer `p` last assigned on line 76 could be null and is dereferenced at line 82, column 11.
  80. 		return r;
  81. 	if (valp != NULL)
  82. 		*valp = PEEK_U16(p);
                ^
  83. 	return 0;
  84. }

#68
authfile.c:91: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  89. 	r = 0;
  90.  out:
  91. 	sshbuf_free(keyblob);
       ^
  92. 	return r;
  93. }

#69
openbsd-compat/fmt_scaled.c:81: error: Dead Store
  The value written to &scale_fact (type long long) is never used.
  79. 	int sign = 0;
  80. 	unsigned int i, ndigits = 0, fract_digits = 0;
  81. 	long long scale_fact = 1, whole = 0, fpart = 0;
       ^
  82. 
  83. 	/* Skip leading whitespace */

#70
ssh-pkcs11-helper.c:86: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  84. 			TAILQ_REMOVE(&pkcs11_keylist, ki, next);
  85. 			free(ki->providername);
  86. 			sshkey_free(ki->key);
         ^
  87. 			free(ki);
  88. 		}

#71
ssh-sk-helper.c:83: error: Dead Store
  The value written to &r (type int) is never used.
  81. process_sign(struct sshbuf *req)
  82. {
  83. 	int r = SSH_ERR_INTERNAL_ERROR;
       ^
  84. 	struct sshbuf *resp, *kbuf;
  85. 	struct sshkey *key;

#72
ssh-sk-helper.c:129: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshbuf_free`.
  127. 		fatal("%s: buffer error: %s", __progname, ssh_err(r));
  128.  out:
  129. 	sshbuf_free(kbuf);
        ^
  130. 	free(provider);
  131. 	if (pin != NULL)

#73
krl.c:82: error: Null Dereference
  pointer `tmp` last assigned on line 82 could be null and is dereferenced at line 82, column 1.
  80. static int blob_cmp(struct revoked_blob *a, struct revoked_blob *b);
  81. RB_HEAD(revoked_blob_tree, revoked_blob);
  82. RB_GENERATE_STATIC(revoked_blob_tree, revoked_blob, tree_entry, blob_cmp);
      ^
  83. 
  84. /* Tracks revoked certs for a single CA */

#74
monitor_wrap.c:104: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo].
  102. 	if ((len = sshbuf_len(log_msg)) < 4 || len > 0xffffffff)
  103. 		fatal("%s: bad length %zu", __func__, len);
  104. 	POKE_U32(sshbuf_mutable_ptr(log_msg), len - 4);
        ^
  105. 	if (atomicio(vwrite, mon->m_log_sendfd,
  106. 	    sshbuf_mutable_ptr(log_msg), len) != len)

#75
ssh_api.c:107: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `ssh_free`.
  105. 	proposal = kex_params ? kex_params->proposal : myproposal;
  106. 	if ((r = kex_ready(ssh, proposal)) != 0) {
  107. 		ssh_free(ssh);
         ^
  108. 		return r;
  109. 	}

#76
ssh_api.c:107: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `ssh_free`.
  105. 	proposal = kex_params ? kex_params->proposal : myproposal;
  106. 	if ((r = kex_ready(ssh, proposal)) != 0) {
  107. 		ssh_free(ssh);
         ^
  108. 		return r;
  109. 	}

#77
sshbuf-getput-basic.c:95: error: Null Dereference
  pointer `p` last assigned on line 89 could be null and is dereferenced at line 95, column 21.
  93. 		return r;
  94. 	if (valp != NULL)
  95. 		*valp = (u_int8_t)*p;
                          ^
  96. 	return 0;
  97. }

#78
dispatch.c:117: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `sshpkt_disconnect`.
  115. 				return r;
  116. 		} else {
  117. 			r = sshpkt_disconnect(ssh,
              ^
  118. 			    "protocol error: rcvd type %d", type);
  119. 			if (r != 0)

#79
dispatch.c:117: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_disconnect`.
  115. 				return r;
  116. 		} else {
  117. 			r = sshpkt_disconnect(ssh,
              ^
  118. 			    "protocol error: rcvd type %d", type);
  119. 			if (r != 0)

#80
dispatch.c:100: error: Integer Overflow L2
  ([0, +oo] - 1024):unsigned64 by call to `ssh_packet_read_poll_seqnr`.
   98. 				return r;
   99. 		} else {
  100. 			r = ssh_packet_read_poll_seqnr(ssh, &type, &seqnr);
              ^
  101. 			if (r != 0)
  102. 				return r;

#81
dispatch.c:96: error: Integer Overflow L2
  ([0, +oo] - 1024):unsigned64 by call to `ssh_packet_read_seqnr`.
  94. 	for (;;) {
  95. 		if (mode == DISPATCH_BLOCK) {
  96. 			r = ssh_packet_read_seqnr(ssh, &type, &seqnr);
             ^
  97. 			if (r != 0)
  98. 				return r;

#82
openbsd-compat/chacha_private.h:210: error: Buffer Overrun L1
  Offset: [64, +oo] (<= [64, +oo] + [0, -1+min(63, `bytes`)]) Size: 64.
  208.     if (bytes <= 64) {
  209.       if (bytes < 64) {
  210.         for (i = 0;i < bytes;++i) ctarget[i] = c[i];
                                         ^
  211.       }
  212.       x->input[12] = j12;

#83
openbsd-compat/chacha_private.h:185: error: Integer Overflow L2
  ([0, max(4294967295, `x->input[*]`)] + 1):unsigned32.
  183. #endif
  184. 
  185.     j12 = PLUSONE(j12);
           ^
  186.     if (!j12) {
  187.       j13 = PLUSONE(j13);

#84
openbsd-compat/chacha_private.h:139: error: Integer Overflow L2
  ([1, 20] - 2):unsigned32.
  137.     x14 = j14;
  138.     x15 = j15;
  139.     for (i = 20;i > 0;i -= 2) {
                             ^
  140.       QUARTERROUND( x0, x4, x8,x12)
  141.       QUARTERROUND( x1, x5, x9,x13)

#85
sshsig.c:136: error: Buffer Overrun L3
  Offset: [0, 18446744073709551614] Size: [1, 18446744073709551615] by call to `sshbuf_b64tod`.
  134. 	}
  135. 
  136. 	if ((r = sshbuf_b64tod(buf, b64)) != 0) {
                 ^
  137. 		error("Couldn't decode signature: %s", ssh_err(r));
  138. 		goto done;

#86
sshsig.c:136: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, 18446744073709551616] by call to `sshbuf_b64tod`.
  134. 	}
  135. 
  136. 	if ((r = sshbuf_b64tod(buf, b64)) != 0) {
                 ^
  137. 		error("Couldn't decode signature: %s", ssh_err(r));
  138. 		goto done;

#87
sshsig.c:136: error: Buffer Overrun L3
  Offset: [2, +oo] Size: [0, 18446744073709551616] by call to `sshbuf_b64tod`.
  134. 	}
  135. 
  136. 	if ((r = sshbuf_b64tod(buf, b64)) != 0) {
                 ^
  137. 		error("Couldn't decode signature: %s", ssh_err(r));
  138. 		goto done;

#88
sshsig.c:136: error: Inferbo Alloc May Be Big
  Length: [1, 18446744073709551615] by call to `sshbuf_b64tod`.
  134. 	}
  135. 
  136. 	if ((r = sshbuf_b64tod(buf, b64)) != 0) {
                 ^
  137. 		error("Couldn't decode signature: %s", ssh_err(r));
  138. 		goto done;

#89
sshsig.c:136: error: Integer Overflow L2
  ([0, 18446744073709551613] + 1):unsigned32 by call to `sshbuf_b64tod`.
  134. 	}
  135. 
  136. 	if ((r = sshbuf_b64tod(buf, b64)) != 0) {
                 ^
  137. 		error("Couldn't decode signature: %s", ssh_err(r));
  138. 		goto done;

#90
sshsig.c:147: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  145. done:
  146. 	sshbuf_free(buf);
  147. 	sshbuf_free(sbuf);
        ^
  148. 	free(b64);
  149. 	return r;

#91
auth2-pubkey.c:214: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `user_key_allowed`.
  212. 		/* test for correct signature */
  213. 		authenticated = 0;
  214. 		if (PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&
             ^
  215. 		    PRIVSEP(sshkey_verify(key, sig, slen,
  216. 		    sshbuf_ptr(b), sshbuf_len(b),

#92
auth2-pubkey.c:214: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `user_key_allowed`.
  212. 		/* test for correct signature */
  213. 		authenticated = 0;
  214. 		if (PRIVSEP(user_key_allowed(ssh, pw, key, 1, &authopts)) &&
             ^
  215. 		    PRIVSEP(sshkey_verify(key, sig, slen,
  216. 		    sshbuf_ptr(b), sshbuf_len(b),

#93
auth2-pubkey.c:115: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, +oo] by call to `sshbuf_dtob64_string`.
  113. 		if ((pkbuf = sshbuf_from(pkblob, blen)) == NULL)
  114. 			fatal("%s: sshbuf_from failed", __func__);
  115. 		if ((keystring = sshbuf_dtob64_string(pkbuf, 0)) == NULL)
                          ^
  116. 			fatal("%s: sshbuf_dtob64 failed", __func__);
  117. 		debug2("%s: %s user %s %s public key %s %s", __func__,

#94
auth2-pubkey.c:131: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_from_blob`.
  129. 		goto done;
  130. 	}
  131. 	if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                 ^
  132. 		error("%s: could not parse key: %s", __func__, ssh_err(r));
  133. 		goto done;

#95
auth2-pubkey.c:131: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: [0, +oo] by call to `sshkey_from_blob`.
  129. 		goto done;
  130. 	}
  131. 	if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                 ^
  132. 		error("%s: could not parse key: %s", __func__, ssh_err(r));
  133. 		goto done;

#96
auth2-pubkey.c:268: error: Integer Overflow L2
  ([-2, 134217734] - [0, 6]):unsigned64 by call to `sshpkt_put_cstring`.
  266. 			if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_PK_OK))
  267. 			    != 0 ||
  268. 			    (r = sshpkt_put_cstring(ssh, pkalg)) != 0 ||
                   ^
  269. 			    (r = sshpkt_put_string(ssh, pkblob, blen)) != 0 ||
  270. 			    (r = sshpkt_send(ssh)) != 0 ||

#97
auth2-pubkey.c:268: error: Integer Overflow L2
  ([-6, 6] - [0, 6]):unsigned64 by call to `sshpkt_put_cstring`.
  266. 			if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_PK_OK))
  267. 			    != 0 ||
  268. 			    (r = sshpkt_put_cstring(ssh, pkalg)) != 0 ||
                   ^
  269. 			    (r = sshpkt_put_string(ssh, pkblob, blen)) != 0 ||
  270. 			    (r = sshpkt_send(ssh)) != 0 ||

#98
auth2-pubkey.c:242: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `auth2_record_key`.
  240. 			}
  241. 		}
  242. 		auth2_record_key(authctxt, authenticated, key);
         ^
  243. 	} else {
  244. 		debug("%s: test pkalg %s pkblob %s%s%s",

#99
auth2-pubkey.c:270: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  268. 			    (r = sshpkt_put_cstring(ssh, pkalg)) != 0 ||
  269. 			    (r = sshpkt_put_string(ssh, pkblob, blen)) != 0 ||
  270. 			    (r = sshpkt_send(ssh)) != 0 ||
                   ^
  271. 			    (r = ssh_packet_write_wait(ssh)) != 0)
  272. 				fatal("%s: %s", __func__, ssh_err(r));

#100
auth2-pubkey.c:269: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_string`.
  267. 			    != 0 ||
  268. 			    (r = sshpkt_put_cstring(ssh, pkalg)) != 0 ||
  269. 			    (r = sshpkt_put_string(ssh, pkblob, blen)) != 0 ||
                   ^
  270. 			    (r = sshpkt_send(ssh)) != 0 ||
  271. 			    (r = ssh_packet_write_wait(ssh)) != 0)

#101
chacha.c:119: error: Buffer Overrun L1
  Offset: [64, +oo] (<= [64, +oo] + [0, -1+min(63, `bytes`)]) Size: 64.
  117.   for (;;) {
  118.     if (bytes < 64) {
  119.       for (i = 0;i < bytes;++i) tmp[i] = m[i];
                                                ^
  120.       m = tmp;
  121.       ctarget = c;

#102
chacha.c:184: error: Integer Overflow L2
  ([0, max(4294967295, `x->input[*]`)] + 1):unsigned32.
  182.     x15 = XOR(x15,U8TO32_LITTLE(m + 60));
  183. 
  184.     j12 = PLUSONE(j12);
           ^
  185.     if (!j12) {
  186.       j13 = PLUSONE(j13);

#103
chacha.c:140: error: Integer Overflow L2
  ([1, 20] - 2):unsigned32.
  138.     x14 = j14;
  139.     x15 = j15;
  140.     for (i = 20;i > 0;i -= 2) {
                             ^
  141.       QUARTERROUND( x0, x4, x8,x12)
  142.       QUARTERROUND( x1, x5, x9,x13)

#104
smult_curve25519_ref.c:98: error: Integer Overflow L2
  ([0, 31] - [0, 31]):unsigned32.
   96.   for (i = 0;i < 32;++i) {
   97.     u = 0;
   98.     for (j = 0;j < i - j;++j) u += a[j] * a[i - j];
                      ^
   99.     for (j = i + 1;j < i + 32 - j;++j) u += 38 * a[j] * a[i + 32 - j];
  100.     u *= 2;

#105
smult_curve25519_ref.c:99: error: Integer Overflow L2
  ([32, 63] - [1, 61]):unsigned32.
   97.     u = 0;
   98.     for (j = 0;j < i - j;++j) u += a[j] * a[i - j];
   99.     for (j = i + 1;j < i + 32 - j;++j) u += 38 * a[j] * a[i + 32 - j];
                                                               ^
  100.     u *= 2;
  101.     if ((i & 1) == 0) {

#106
kexecdh.c:133: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  131.  out:
  132. 	EC_KEY_free(server_key);
  133. 	sshbuf_free(server_blob);
        ^
  134. 	return r;
  135. }

#107
sshbuf-misc.c:106: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, +oo] by call to `__b64_ntop`.
  104. 	if ((s = malloc(slen)) == NULL)
  105. 		return SSH_ERR_ALLOC_FAIL;
  106. 	if (b64_ntop(sshbuf_ptr(d), sshbuf_len(d), s, slen) == -1) {
            ^
  107. 		r = SSH_ERR_INTERNAL_ERROR;
  108. 		goto fail;

#108
sshbuf-misc.c:117: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64.
  115. 				goto fail;
  116. 		}
  117. 		if ((i - 1) % 70 != 69 && (r = sshbuf_put_u8(b64, '\n')) != 0)
             ^
  118. 			goto fail;
  119. 	} else {

#109
kexgexc.c:124: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  122. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_DH_GEX_INIT)) != 0 ||
  123. 	    (r = sshpkt_put_bignum2(ssh, pub_key)) != 0 ||
  124. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  125. 		goto out;
  126. 	debug("SSH2_MSG_KEX_DH_GEX_INIT sent");

#110
kexgexc.c:123: error: Integer Overflow L2
  ([0, +oo] - [4, 2052]):unsigned64 by call to `sshpkt_put_bignum2`.
  121. 	DH_get0_key(kex->dh, &pub_key, NULL);
  122. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_DH_GEX_INIT)) != 0 ||
  123. 	    (r = sshpkt_put_bignum2(ssh, pub_key)) != 0 ||
                 ^
  124. 	    (r = sshpkt_send(ssh)) != 0)
  125. 		goto out;

#111
ssh-ed25519.c:143: error: Buffer Overrun L3
  Offset: [32, 63] (<= 32 + [0, 31]) Size: [0, +oo] by call to `crypto_sign_ed25519_open`.
  141. 	memcpy(sm, sigblob, len);
  142. 	memcpy(sm+len, data, datalen);
  143. 	if ((ret = crypto_sign_ed25519_open(m, &mlen, sm, smlen,
                   ^
  144. 	    key->ed25519_pk)) != 0) {
  145. 		debug2("%s: crypto_sign_ed25519_open failed: %d",

#112
ssh-ed25519.c:143: error: Buffer Overrun L3
  Offset: [64, +oo] Size: [0, +oo] by call to `crypto_sign_ed25519_open`.
  141. 	memcpy(sm, sigblob, len);
  142. 	memcpy(sm+len, data, datalen);
  143. 	if ((ret = crypto_sign_ed25519_open(m, &mlen, sm, smlen,
                   ^
  144. 	    key->ed25519_pk)) != 0) {
  145. 		debug2("%s: crypto_sign_ed25519_open failed: %d",

#113
kexgen.c:131: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  129. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_ECDH_INIT)) != 0 ||
  130. 	    (r = sshpkt_put_stringb(ssh, kex->client_pub)) != 0 ||
  131. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  132. 		return r;
  133. 	debug("expecting SSH2_MSG_KEX_ECDH_REPLY");

#114
kexgen.c:130: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_stringb`.
  128. 		return r;
  129. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_ECDH_INIT)) != 0 ||
  130. 	    (r = sshpkt_put_stringb(ssh, kex->client_pub)) != 0 ||
                 ^
  131. 	    (r = sshpkt_send(ssh)) != 0)
  132. 		return r;

#115
openbsd-compat/blowfish.c:110: error: Buffer Overrun L1
  Offset: [768, 1023] Size: 4.
  108. 
  109. 	Xl ^= p[17];
  110. 	BLFRND(s, p, Xr, Xl, 16); BLFRND(s, p, Xl, Xr, 15);
        ^
  111. 	BLFRND(s, p, Xr, Xl, 14); BLFRND(s, p, Xl, Xr, 13);
  112. 	BLFRND(s, p, Xr, Xl, 12); BLFRND(s, p, Xl, Xr, 11);

#116
openbsd-compat/blowfish.c:110: error: Buffer Overrun L2
  Offset: [0, 255] Size: 4.
  108. 
  109. 	Xl ^= p[17];
  110. 	BLFRND(s, p, Xr, Xl, 16); BLFRND(s, p, Xl, Xr, 15);
        ^
  111. 	BLFRND(s, p, Xr, Xl, 14); BLFRND(s, p, Xl, Xr, 13);
  112. 	BLFRND(s, p, Xr, Xl, 12); BLFRND(s, p, Xl, Xr, 11);

#117
sftp-common.c:138: error: Integer Overflow L2
  ([0, `b->size`] - [0, `b->off` + 32]):unsigned64 by call to `sshbuf_get_u32`.
  136. 		u_int i, count;
  137. 
  138. 		if ((r = sshbuf_get_u32(b, &count)) != 0)
                  ^
  139. 			fatal("%s: buffer error: %s", __func__, ssh_err(r));
  140. 		for (i = 0; i < count; i++) {

#118
cipher-chachapoly.c:116: error: Buffer Overrun L1
  Offset: [7, +oo] (<= [4, +oo] + 3) Size: 4 by call to `chacha_encrypt_bytes`.
  114. 	POKE_U64(seqbuf, seqnr);
  115. 	chacha_ivsetup(&ctx->header_ctx, seqbuf, NULL);
  116. 	chacha_encrypt_bytes(&ctx->header_ctx, cp, buf, 4);
        ^
  117. 	*plenp = PEEK_U32(buf);
  118. 	return 0;

#119
ssh-pkcs11-helper.c:111: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_stringb`.
  109. 	int r;
  110. 
  111. 	if ((r = sshbuf_put_stringb(oqueue, m)) != 0)
                 ^
  112. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  113. }

#120
kexc25519.c:161: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  159. 	explicit_bzero(server_key, sizeof(server_key));
  160. 	sshbuf_free(server_blob);
  161. 	sshbuf_free(buf);
        ^
  162. 	return r;
  163. }

#121
ssh-ecdsa.c:123: error: Dead Store
  The value written to &ret (type int) is never used.
  121. 	u_char digest[SSH_DIGEST_MAX_LENGTH];
  122. 	size_t dlen;
  123. 	int ret = SSH_ERR_INTERNAL_ERROR;
        ^
  124. 	struct sshbuf *b = NULL, *sigbuf = NULL;
  125. 	char *ktype = NULL;

#122
ssh-ecdsa.c:191: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  189.  out:
  190. 	explicit_bzero(digest, sizeof(digest));
  191. 	sshbuf_free(sigbuf);
        ^
  192. 	sshbuf_free(b);
  193. 	ECDSA_SIG_free(sig);

#123
ssh-add.c:164: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  162. 
  163.  out:
  164. 	sshkey_free(cert);
        ^
  165. 	sshkey_free(public);
  166. 	free(certpath);

#124
ssh-pkcs11-client.c:161: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  159.  fail:
  160. 	free(blob);
  161. 	sshkey_free(key);
        ^
  162. 	sshbuf_free(msg);
  163. 	return (ret);

#125
hostfile.c:140: error: Buffer Overrun L3
  Offset added: [0, 64] Size: [0, +oo] by call to `ssh_hmac_init`.
  138. 
  139. 	if ((ctx = ssh_hmac_start(SSH_DIGEST_SHA1)) == NULL ||
  140. 	    ssh_hmac_init(ctx, salt, len) < 0 ||
            ^
  141. 	    ssh_hmac_update(ctx, host, strlen(host)) < 0 ||
  142. 	    ssh_hmac_final(ctx, result, sizeof(result)))

#126
ssh-dss.c:128: error: Dead Store
  The value written to &ret (type int) is never used.
  126. 	u_char digest[SSH_DIGEST_MAX_LENGTH], *sigblob = NULL;
  127. 	size_t len, dlen = ssh_digest_bytes(SSH_DIGEST_SHA1);
  128. 	int ret = SSH_ERR_INTERNAL_ERROR;
        ^
  129. 	struct sshbuf *b = NULL;
  130. 	char *ktype = NULL;

#127
ssh-dss.c:204: error: Uninitialized Value
  The value read from len was never initialized.
  202. 	free(ktype);
  203. 	if (sigblob != NULL) {
  204. 		explicit_bzero(sigblob, len);
         ^
  205. 		free(sigblob);
  206. 	}

#128
openbsd-compat/setproctitle.c:153: error: Buffer Overrun L2
  Offset: [0, 1026] Size: 1024 by call to `strnvis`.
  151. 	if (r == -1 || (size_t)r >= sizeof(buf) - len)
  152. 		return;
  153. 	strnvis(ptitle, buf, sizeof(ptitle),
        ^
  154. 	    VIS_CSTYLE|VIS_NL|VIS_TAB|VIS_OCTAL);
  155. 

#129
smult_curve25519_ref.c:171: error: Buffer Overrun L2
  Offset: [1, 62] Size: 32 by call to `mult`.
  169.     add(u,t,b0);
  170.     mult(xznb,b0,b0 + 32);
  171.     mult(xznb + 32,s,u);
           ^
  172.     square(xzn1b,c1);
  173.     mult(xzn1b + 32,r,work);

#130
smult_curve25519_ref.c:161: error: Buffer Overrun L2
  Offset: [3, 94] (<= 32 + [-29, 62]) Size: 64 by call to `square`.
  159.     sub(a1 + 32,xzm1b,xzm1b + 32);
  160.     square(b0,a0);
  161.     square(b0 + 32,a0 + 32);
           ^
  162.     mult(b1,a1,a0 + 32);
  163.     mult(b1 + 32,a1 + 32,a0);

#131
smult_curve25519_ref.c:160: error: Buffer Overrun L3
  Offset: [-29, 62] Size: 64 by call to `square`.
  158.     add(a1,xzm1b,xzm1b + 32);
  159.     sub(a1 + 32,xzm1b,xzm1b + 32);
  160.     square(b0,a0);
           ^
  161.     square(b0 + 32,a0 + 32);
  162.     mult(b1,a1,a0 + 32);

#132
smult_curve25519_ref.c:171: error: Buffer Overrun L3
  Offset: [-31, 31] Size: 32 by call to `mult`.
  169.     add(u,t,b0);
  170.     mult(xznb,b0,b0 + 32);
  171.     mult(xznb + 32,s,u);
           ^
  172.     square(xzn1b,c1);
  173.     mult(xzn1b + 32,r,work);

#133
smult_curve25519_ref.c:155: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `select`.
  153.     b = e[pos / 8] >> (pos & 7);
  154.     b &= 1;
  155.     select(xzmb,xzm1b,xzm,xzm1,b);
           ^
  156.     add(a0,xzmb,xzmb + 32);
  157.     sub(a0 + 32,xzmb,xzmb + 32);

#134
kexgexs.c:157: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `sshkey_putb`.
  155. 		goto out;
  156. 	}
  157. 	if ((r = sshkey_putb(server_host_public, server_host_key_blob)) != 0)
                 ^
  158. 		goto out;
  159. 

#135
kexgexs.c:189: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  187. 	    (r = sshpkt_put_bignum2(ssh, pub_key)) != 0 ||     /* f */
  188. 	    (r = sshpkt_put_string(ssh, signature, slen)) != 0 ||
  189. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  190. 		goto out;
  191. 

#136
kexgexs.c:186: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_stringb`.
  184. 	/* send server hostkey, DH pubkey 'f' and signed H */
  185. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_DH_GEX_REPLY)) != 0 ||
  186. 	    (r = sshpkt_put_stringb(ssh, server_host_key_blob)) != 0 ||
                 ^
  187. 	    (r = sshpkt_put_bignum2(ssh, pub_key)) != 0 ||     /* f */
  188. 	    (r = sshpkt_put_string(ssh, signature, slen)) != 0 ||

#137
kexgexs.c:200: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  198. 	BN_clear_free(dh_client_pub);
  199. 	sshbuf_free(shared_secret);
  200. 	sshbuf_free(server_host_key_blob);
        ^
  201. 	free(signature);
  202. 	return r;

#138
dispatch.c:134: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  132. 
  133. 	if ((r = ssh_dispatch_run(ssh, mode, done)) != 0)
  134. 		sshpkt_fatal(ssh, r, "%s", __func__);
         ^
  135. }

#139
sshbuf-getput-crypto.c:142: error: Uninitialized Value
  The value read from d[_] was never initialized.
  140. 		return SSH_ERR_INTERNAL_ERROR; /* Shouldn't happen */
  141. 	/* If MSB is set, prepend a \0 */
  142. 	if (len > 0 && (d[1] & 0x80) != 0)
                       ^
  143. 		prepend = 1;
  144. 	if ((r = sshbuf_put_string(buf, d + 1 - prepend, len + prepend)) < 0) {

#140
sshbuf-misc.c:142: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [0, +oo] + [1, 18446744073709551615]) Size: [0, +oo] by call to `sshbuf_dup_string`.
  140. 		return NULL;
  141. 	}
  142. 	ret = sshbuf_dup_string(tmp);
              ^
  143. 	sshbuf_free(tmp);
  144. 	return ret;

#141
ssh-sk-client.c:168: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  166. 		goto out;
  167. 	}
  168. 	if ((r = sshbuf_get_u32(resp, &rmsg)) != 0) {
                 ^
  169. 		error("%s: parse message type: %s", __func__, ssh_err(r));
  170. 		goto out;

#142
ssh-sk-client.c:134: error: Dead Store
  The value written to &r (type int) is never used.
  132. client_converse(struct sshbuf *req, struct sshbuf **respp, u_int msg)
  133. {
  134. 	int oerrno, fd, r2, r = SSH_ERR_INTERNAL_ERROR;
        ^
  135. 	u_int rmsg, rerr;
  136. 	pid_t pid;

#143
sftp-client.c:161: error: Integer Overflow L2
  ([-`m->off` - 4, `m->size` + 4] - [0, `m->off` + 4]):unsigned64 by call to `sshbuf_reserve`.
  159. 	}
  160. 
  161. 	if ((r = sshbuf_reserve(m, msg_len, &p)) != 0)
                 ^
  162. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  163. 	if (atomicio6(read, conn->fd_in, p, msg_len, sftpio,

#144
sftp-client.c:161: error: Integer Overflow L2
  ([0, `m->size` + 4] - [0, `m->off` + 4]):unsigned64 by call to `sshbuf_reserve`.
  159. 	}
  160. 
  161. 	if ((r = sshbuf_reserve(m, msg_len, &p)) != 0)
                 ^
  162. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  163. 	if (atomicio6(read, conn->fd_in, p, msg_len, sftpio,

#145
sftp-client.c:161: error: Integer Overflow L2
  ([0, `m->size` + 4] - [1, `m->off` + 4]):unsigned64 by call to `sshbuf_reserve`.
  159. 	}
  160. 
  161. 	if ((r = sshbuf_reserve(m, msg_len, &p)) != 0)
                 ^
  162. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  163. 	if (atomicio6(read, conn->fd_in, p, msg_len, sftpio,

#146
ssh-sk-helper.c:179: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sshkey_private_serialize`.
  177. 	if ((resp = sshbuf_new()) == NULL)
  178. 		fatal("%s: sshbuf_new failed", __progname);
  179. 	if ((r = sshkey_private_serialize(key, kbuf)) != 0)
                 ^
  180. 		fatal("%s: serialize private key: %s", __progname, ssh_err(r));
  181. 	if ((r = sshbuf_put_u32(resp, SSH_SK_HELPER_ENROLL)) != 0 ||

#147
ssh-sk-helper.c:187: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  185. 
  186.  out:
  187. 	sshkey_free(key);
        ^
  188. 	sshbuf_free(kbuf);
  189. 	sshbuf_free(attest);

#148
ssh-sk-helper.c:182: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_stringb`.
  180. 		fatal("%s: serialize private key: %s", __progname, ssh_err(r));
  181. 	if ((r = sshbuf_put_u32(resp, SSH_SK_HELPER_ENROLL)) != 0 ||
  182. 	    (r = sshbuf_put_stringb(resp, kbuf)) != 0 ||
                 ^
  183. 	    (r = sshbuf_put_stringb(resp, attest)) != 0)
  184. 		fatal("%s: buffer error: %s", __progname, ssh_err(r));

#149
ssh-sk-helper.c:151: error: Integer Overflow L2
  ([0, `req->size`] - [0, `req->off` + 4]):unsigned64 by call to `sshbuf_get_cstring`.
  149. 
  150. 	if ((r = sshbuf_get_u32(req, &type)) != 0 ||
  151. 	    (r = sshbuf_get_cstring(req, &provider, NULL)) != 0 ||
                 ^
  152. 	    (r = sshbuf_get_cstring(req, &application, NULL)) != 0 ||
  153. 	    (r = sshbuf_get_u8(req, &flags)) != 0 ||

#150
authfd.c:175: error: Integer Overflow L2
  ([1, 262144] - [1, 1024]):unsigned64.
  173. 		if ((r = sshbuf_put(reply, buf, l)) != 0)
  174. 			return r;
  175. 		len -= l;
         ^
  176. 	}
  177. 	return 0;

#151
kexecdh.c:160: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_ec`.
  158. 		goto out;
  159. 	}
  160. 	if ((r = sshbuf_get_ec(buf, dh_pub, group)) != 0) {
                 ^
  161. 		goto out;
  162. 	}

#152
kexecdh.c:160: error: Buffer Overrun L3
  Offset: [4, +oo] Size: [0, +oo] by call to `sshbuf_get_ec`.
  158. 		goto out;
  159. 	}
  160. 	if ((r = sshbuf_get_ec(buf, dh_pub, group)) != 0) {
                 ^
  161. 		goto out;
  162. 	}

#153
kexgen.c:214: error: Buffer Overrun L3
  Offset: [0, 31] Size: [0, +oo] by call to `sshkey_verify`.
  212. 		goto out;
  213. 
  214. 	if ((r = sshkey_verify(server_host_key, signature, slen, hash, hashlen,
                 ^
  215. 	    kex->hostkey_alg, ssh->compat, NULL)) != 0)
  216. 		goto out;

#154
kexgen.c:214: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_verify`.
  212. 		goto out;
  213. 
  214. 	if ((r = sshkey_verify(server_host_key, signature, slen, hash, hashlen,
                 ^
  215. 	    kex->hostkey_alg, ssh->compat, NULL)) != 0)
  216. 		goto out;

#155
kexgen.c:189: error: Integer Overflow L2
  ([-6285329, +oo] - 2295):unsigned32 by call to `kex_kem_sntrup4591761x25519_dec`.
  187. 		break;
  188. 	case KEX_KEM_SNTRUP4591761X25519_SHA512:
  189. 		r = kex_kem_sntrup4591761x25519_dec(kex, server_blob,
             ^
  190. 		    &shared_secret);
  191. 		break;

#156
kexgen.c:228: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  226. 	free(signature);
  227. 	sshbuf_free(tmp);
  228. 	sshkey_free(server_host_key);
        ^
  229. 	sshbuf_free(server_blob);
  230. 	sshbuf_free(shared_secret);

#157
auth2.c:147: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  145. 	    (r = sshpkt_put_cstring(ssh, msg)) != 0 ||
  146. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||	/* language, unused */
  147. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  148. 		fatal("%s: %s", __func__, ssh_err(r));
  149. 	debug("%s: sent", __func__);

#158
auth2.c:146: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_cstring`.
  144. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_BANNER)) != 0 ||
  145. 	    (r = sshpkt_put_cstring(ssh, msg)) != 0 ||
  146. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||	/* language, unused */
                 ^
  147. 	    (r = sshpkt_send(ssh)) != 0)
  148. 		fatal("%s: %s", __func__, ssh_err(r));

#159
auth2.c:144: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  142. 	int r;
  143. 
  144. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_BANNER)) != 0 ||
                 ^
  145. 	    (r = sshpkt_put_cstring(ssh, msg)) != 0 ||
  146. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||	/* language, unused */

#160
auth2.c:145: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `msg->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  143. 
  144. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_BANNER)) != 0 ||
  145. 	    (r = sshpkt_put_cstring(ssh, msg)) != 0 ||
                 ^
  146. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||	/* language, unused */
  147. 	    (r = sshpkt_send(ssh)) != 0)

#161
kexdh.c:169: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  167. 	DH_free(kex->dh);
  168. 	kex->dh = NULL;
  169. 	sshbuf_free(server_blob);
        ^
  170. 	return r;
  171. }

#162
openbsd-compat/port-net.c:145: error: Dead Store
  The value written to &fd (type int) is never used.
  143. {
  144. 	struct ifreq ifr;
  145. 	int fd = -1;
        ^
  146. 	const char *name = NULL;
  147. 

#163
kexgexc.c:201: error: Buffer Overrun L3
  Offset: [0, 31] Size: [0, +oo] by call to `sshkey_verify`.
  199. 		goto out;
  200. 
  201. 	if ((r = sshkey_verify(server_host_key, signature, slen, hash,
                 ^
  202. 	    hashlen, kex->hostkey_alg, ssh->compat, NULL)) != 0)
  203. 		goto out;

#164
kexgexc.c:201: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_verify`.
  199. 		goto out;
  200. 
  201. 	if ((r = sshkey_verify(server_host_key, signature, slen, hash,
                 ^
  202. 	    hashlen, kex->hostkey_alg, ssh->compat, NULL)) != 0)
  203. 		goto out;

#165
kexgexc.c:213: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  211. 	BN_clear_free(dh_server_pub);
  212. 	sshbuf_free(shared_secret);
  213. 	sshkey_free(server_host_key);
        ^
  214. 	sshbuf_free(tmp);
  215. 	sshbuf_free(server_host_key_blob);

#166
ssh_api.c:155: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_close`.
  153. 	struct key_entry *k;
  154. 
  155. 	ssh_packet_close(ssh);
        ^
  156. 	/*
  157. 	 * we've only created the public keys variants in case we

#167
ssh_api.c:163: error: Integer Overflow L2
  ([0, `ssh->public_keys.tqh_first->key->cert->certblob->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  161. 		TAILQ_REMOVE(&ssh->public_keys, k, next);
  162. 		if (ssh->kex && ssh->kex->server)
  163. 			sshkey_free(k->key);
          ^
  164. 		free(k);
  165. 	}

#168
ssh_api.c:163: error: Integer Overflow L2
  ([0, `ssh->public_keys.tqh_first->key->cert->critical->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  161. 		TAILQ_REMOVE(&ssh->public_keys, k, next);
  162. 		if (ssh->kex && ssh->kex->server)
  163. 			sshkey_free(k->key);
          ^
  164. 		free(k);
  165. 	}

#169
ssh_api.c:163: error: Integer Overflow L2
  ([0, `ssh->public_keys.tqh_first->key->cert->extensions->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  161. 		TAILQ_REMOVE(&ssh->public_keys, k, next);
  162. 		if (ssh->kex && ssh->kex->server)
  163. 			sshkey_free(k->key);
          ^
  164. 		free(k);
  165. 	}

#170
ssh_api.c:163: error: Integer Overflow L2
  ([0, `ssh->public_keys.tqh_first->key->sk_key_handle->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  161. 		TAILQ_REMOVE(&ssh->public_keys, k, next);
  162. 		if (ssh->kex && ssh->kex->server)
  163. 			sshkey_free(k->key);
          ^
  164. 		free(k);
  165. 	}

#171
ssh_api.c:163: error: Integer Overflow L2
  ([0, `ssh->public_keys.tqh_first->key->sk_reserved->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  161. 		TAILQ_REMOVE(&ssh->public_keys, k, next);
  162. 		if (ssh->kex && ssh->kex->server)
  163. 			sshkey_free(k->key);
          ^
  164. 		free(k);
  165. 	}

#172
sshsig.c:193: error: Inferbo Alloc May Be Big
  Length: [64, 1048640] by call to `sshkey_sign`.
  191. 		}
  192. 	} else {
  193. 		if ((r = sshkey_sign(key, &sig, &slen,
                  ^
  194. 		    sshbuf_ptr(tosign), sshbuf_len(tosign),
  195. 		    sign_alg, sk_provider, 0)) != 0) {

#173
sshsig.c:217: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  215. done:
  216. 	free(sig);
  217. 	sshbuf_free(blob);
        ^
  218. 	sshbuf_free(tosign);
  219. 	return r;

#174
sshsig.c:203: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshkey_puts`.
  201. 	if ((r = sshbuf_put(blob, MAGIC_PREAMBLE, MAGIC_PREAMBLE_LEN)) != 0 ||
  202. 	    (r = sshbuf_put_u32(blob, SIG_VERSION)) != 0 ||
  203. 	    (r = sshkey_puts(key, blob)) != 0 ||
                 ^
  204. 	    (r = sshbuf_put_cstring(blob, sig_namespace)) != 0 ||
  205. 	    (r = sshbuf_put_string(blob, NULL, 0)) != 0 || /* reserved */

#175
sshsig.c:204: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `sig_namespace->strlen`)]):unsigned64 by call to `sshbuf_put_cstring`.
  202. 	    (r = sshbuf_put_u32(blob, SIG_VERSION)) != 0 ||
  203. 	    (r = sshkey_puts(key, blob)) != 0 ||
  204. 	    (r = sshbuf_put_cstring(blob, sig_namespace)) != 0 ||
                 ^
  205. 	    (r = sshbuf_put_string(blob, NULL, 0)) != 0 || /* reserved */
  206. 	    (r = sshbuf_put_cstring(blob, hashalg)) != 0 ||

#176
ssh-rsa.c:171: error: Dead Store
  The value written to &ret (type int) is never used.
  169. 	size_t slen = 0;
  170. 	u_int dlen, len;
  171. 	int nid, hash_alg, ret = SSH_ERR_INTERNAL_ERROR;
        ^
  172. 	struct sshbuf *b = NULL;
  173. 

#177
ssh-rsa.c:211: error: Integer Overflow L2
  ([1, 2048] - [-oo, 2047]):unsigned64.
  209. 	}
  210. 	if (len < slen) {
  211. 		size_t diff = slen - len;
         ^
  212. 		memmove(sig + diff, sig, len);
  213. 		explicit_bzero(sig, diff);

#178
krl.c:191: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `revoked_certs_free`.
  189. 	TAILQ_FOREACH_SAFE(rc, &krl->revoked_certs, entry, trc) {
  190. 		TAILQ_REMOVE(&krl->revoked_certs, rc, entry);
  191. 		revoked_certs_free(rc);
         ^
  192. 	}
  193. }

#179
scp.c:174: error: Unreachable Code
  Unreachable code after statement.
  172. 
  173. 	if (signo)
  174. 		_exit(1);
         ^
  175. 	exit(1);
  176. }

#180
ssh-pkcs11-client.c:219: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  217.  fail:
  218. 	free(blob);
  219. 	sshkey_free(key);
        ^
  220. 	sshbuf_free(msg);
  221. 	return (ret);

#181
log.c:182: error: Unreachable Code
  Unreachable code after statement.
  180. 	va_end(args);
  181. #endif
  182. 	_exit(1);
        ^
  183. }
  184. 

#182
kexdh.c:188: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_bignum2`.
  186. 	}
  187. 	if ((r = sshbuf_put_stringb(buf, dh_blob)) != 0 ||
  188. 	    (r = sshbuf_get_bignum2(buf, &dh_pub)) != 0)
                 ^
  189. 		goto out;
  190. 	sshbuf_reset(buf);

#183
kexdh.c:188: error: Buffer Overrun L3
  Offset: [4, +oo] Size: [0, +oo] by call to `sshbuf_get_bignum2`.
  186. 	}
  187. 	if ((r = sshbuf_put_stringb(buf, dh_blob)) != 0 ||
  188. 	    (r = sshbuf_get_bignum2(buf, &dh_pub)) != 0)
                 ^
  189. 		goto out;
  190. 	sshbuf_reset(buf);

#184
sshbuf-misc.c:188: error: Inferbo Alloc May Be Big
  Length: [-oo, 18446744073709551616].
  186. 		l--; /* the nul is put back below */
  187. 	}
  188. 	if ((r = malloc(l + 1)) == NULL)
                 ^
  189. 		return NULL;
  190. 	if (l > 0)

#185
sshbuf-misc.c:188: error: Integer Overflow L2
  ([-oo, 18446744073709551615] + 1):unsigned64.
  186. 		l--; /* the nul is put back below */
  187. 	}
  188. 	if ((r = malloc(l + 1)) == NULL)
                 ^
  189. 		return NULL;
  190. 	if (l > 0)

#186
nchan.c:192: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  190. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_EOF)) != 0 ||
  191. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  192. 		    (r = sshpkt_send(ssh)) != 0)
                  ^
  193. 			fatal("%s: send CHANNEL_EOF: %s", __func__, ssh_err(r));
  194. 		c->flags |= CHAN_EOF_SENT;

#187
nchan.c:191: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  189. 			    __func__, c->self);
  190. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_EOF)) != 0 ||
  191. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
                  ^
  192. 		    (r = sshpkt_send(ssh)) != 0)
  193. 			fatal("%s: send CHANNEL_EOF: %s", __func__, ssh_err(r));

#188
nchan.c:190: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  188. 			fatal("%s: channel %d: no remote_id",
  189. 			    __func__, c->self);
  190. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_EOF)) != 0 ||
                  ^
  191. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  192. 		    (r = sshpkt_send(ssh)) != 0)

#189
serverloop.c:208: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  206. 		    "keepalive@openssh.com", 1);
  207. 	}
  208. 	if ((r = sshpkt_send(ssh)) != 0)
                 ^
  209. 		fatal("%s: %s", __func__, ssh_err(r));
  210. }

#190
serverloop.c:202: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  200. 		    (r = sshpkt_put_cstring(ssh, "keepalive@openssh.com"))
  201. 		    != 0 ||
  202. 		    (r = sshpkt_put_u8(ssh, 1)) != 0) /* boolean: want reply */
                  ^
  203. 			fatal("%s: %s", __func__, ssh_err(r));
  204. 	} else {

#191
serverloop.c:199: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  197. 	 */
  198. 	if ((channel_id = channel_find_open(ssh)) == -1) {
  199. 		if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
                  ^
  200. 		    (r = sshpkt_put_cstring(ssh, "keepalive@openssh.com"))
  201. 		    != 0 ||

#192
serverloop.c:200: error: Integer Overflow L2
  ([0, +oo] - [4, 25]):unsigned64 by call to `sshpkt_put_cstring`.
  198. 	if ((channel_id = channel_find_open(ssh)) == -1) {
  199. 		if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
  200. 		    (r = sshpkt_put_cstring(ssh, "keepalive@openssh.com"))
                  ^
  201. 		    != 0 ||
  202. 		    (r = sshpkt_put_u8(ssh, 1)) != 0) /* boolean: want reply */

#193
smult_curve25519_ref.c:195: error: Buffer Overrun L2
  Offset: [-29, 62] Size: 32 by call to `square`.
  193. 
  194.   /* 2 */ square(z2,z);
  195.   /* 4 */ square(t1,z2);
                 ^
  196.   /* 8 */ square(t0,t1);
  197.   /* 9 */ mult(z9,t0,z);

#194
smult_curve25519_ref.c:198: error: Buffer Overrun L3
  Offset: [-31, 31] Size: 32 by call to `mult`.
  196.   /* 8 */ square(t0,t1);
  197.   /* 9 */ mult(z9,t0,z);
  198.   /* 11 */ mult(z11,z9,z2);
                  ^
  199.   /* 22 */ square(t0,z11);
  200.   /* 2^5 - 2^0 = 31 */ mult(z2_5_0,t0,z9);

#195
auth2.c:215: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  213. 	} else {
  214. 		debug("bad service request %s", service);
  215. 		ssh_packet_disconnect(ssh, "bad service request %s", service);
         ^
  216. 	}
  217. 	r = 0;

#196
auth2.c:210: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  208. 		if ((r = sshpkt_start(ssh, SSH2_MSG_SERVICE_ACCEPT)) != 0 ||
  209. 		    (r = sshpkt_put_cstring(ssh, service)) != 0 ||
  210. 		    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  211. 		    (r = ssh_packet_write_wait(ssh)) != 0)
  212. 			goto out;

#197
auth2.c:209: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  207. 	if (acceptit) {
  208. 		if ((r = sshpkt_start(ssh, SSH2_MSG_SERVICE_ACCEPT)) != 0 ||
  209. 		    (r = sshpkt_put_cstring(ssh, service)) != 0 ||
                  ^
  210. 		    (r = sshpkt_send(ssh)) != 0 ||
  211. 		    (r = ssh_packet_write_wait(ssh)) != 0)

#198
ssh-pkcs11-helper.c:198: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_from_blob`.
  196. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  197. 
  198. 	if ((r = sshkey_from_blob(blob, blen, &key)) != 0)
                 ^
  199. 		error("%s: sshkey_from_blob: %s", __func__, ssh_err(r));
  200. 	else {

#199
ssh-pkcs11-helper.c:198: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: [0, +oo] by call to `sshkey_from_blob`.
  196. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  197. 
  198. 	if ((r = sshkey_from_blob(blob, blen, &key)) != 0)
                 ^
  199. 		error("%s: sshkey_from_blob: %s", __func__, ssh_err(r));
  200. 	else {

#200
ssh-pkcs11-helper.c:234: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  232. #endif /* WITH_OPENSSL */
  233. 		}
  234. 		sshkey_free(key);
         ^
  235. 	}
  236. 	if ((msg = sshbuf_new()) == NULL)

#201
ssh-sk.c:211: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_ec`.
  209. 		goto out;
  210. 	}
  211. 	if ((r = sshbuf_get_ec(b, q, EC_KEY_get0_group(key->ecdsa))) != 0) {
                 ^
  212. 		error("%s: parse key: %s", __func__, ssh_err(r));
  213. 		r = SSH_ERR_INVALID_FORMAT;

#202
ssh-sk.c:211: error: Buffer Overrun L3
  Offset: [4, +oo] Size: [0, +oo] by call to `sshbuf_get_ec`.
  209. 		goto out;
  210. 	}
  211. 	if ((r = sshbuf_get_ec(b, q, EC_KEY_get0_group(key->ecdsa))) != 0) {
                 ^
  212. 		error("%s: parse key: %s", __func__, ssh_err(r));
  213. 		r = SSH_ERR_INVALID_FORMAT;

#203
ssh-sk.c:233: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  231.  out:
  232. 	EC_POINT_free(q);
  233. 	sshkey_free(key);
        ^
  234. 	sshbuf_free(b);
  235. 	return r;

#204
session.c:204: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_send_debug`.
  202. 	/* Create private directory for socket */
  203. 	if (mkdtemp(auth_sock_dir) == NULL) {
  204. 		ssh_packet_send_debug(ssh, "Agent forwarding disabled: "
         ^
  205. 		    "mkdtemp() failed: %.100s", strerror(errno));
  206. 		restore_uid();

#205
session.c:204: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssh_packet_send_debug`.
  202. 	/* Create private directory for socket */
  203. 	if (mkdtemp(auth_sock_dir) == NULL) {
  204. 		ssh_packet_send_debug(ssh, "Agent forwarding disabled: "
         ^
  205. 		    "mkdtemp() failed: %.100s", strerror(errno));
  206. 		restore_uid();

#206
session.c:204: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_send_debug`.
  202. 	/* Create private directory for socket */
  203. 	if (mkdtemp(auth_sock_dir) == NULL) {
  204. 		ssh_packet_send_debug(ssh, "Agent forwarding disabled: "
         ^
  205. 		    "mkdtemp() failed: %.100s", strerror(errno));
  206. 		restore_uid();

#207
ssh_api.c:201: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  199. 		    (k_prv = malloc(sizeof(*k_prv))) == NULL) {
  200. 			free(k);
  201. 			sshkey_free(pubkey);
          ^
  202. 			return SSH_ERR_ALLOC_FAIL;
  203. 		}

#208
authfile.c:214: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshbuf_free`.
  212. 	r = 0;
  213.  out:
  214. 	sshbuf_free(buffer);
        ^
  215. 	return r;
  216. }

#209
sc25519.c:201: error: Uninitialized Value
  The value read from t[_] was never initialized.
  199.   for(i=0;i<32;i++)
  200.     for(j=0;j<32;j++)
  201.       t[i+j] += x->v[i] * y->v[j];
             ^
  202. 
  203.   /* Reduce coefficients */

#210
sc25519.c:206: error: Uninitialized Value
  The value read from t[_] was never initialized.
  204.   for(i=0;i<63;i++)
  205.   {
  206.     carry = t[i] >> 8;
           ^
  207.     t[i+1] += carry;
  208.     t[i] &= 0xff;

#211
sc25519.c:207: error: Uninitialized Value
  The value read from t[_] was never initialized.
  205.   {
  206.     carry = t[i] >> 8;
  207.     t[i+1] += carry;
           ^
  208.     t[i] &= 0xff;
  209.   }

#212
fe25519.c:204: error: Uninitialized Value
  The value read from t[_] was never initialized.
  202.   for(i=0;i<32;i++)
  203.     for(j=0;j<32;j++)
  204.       t[i+j] += x->v[i] * y->v[j];
             ^
  205. 
  206.   for(i=32;i<63;i++)

#213
fe25519.c:207: error: Uninitialized Value
  The value read from t[_] was never initialized.
  205. 
  206.   for(i=32;i<63;i++)
  207.     r->v[i-32] = t[i-32] + times38(t[i]); 
           ^
  208.   r->v[31] = t[31]; /* result now in r[0]...r[31] */
  209. 

#214
fe25519.c:207: error: Uninitialized Value
  The value read from t[_] was never initialized.
  205. 
  206.   for(i=32;i<63;i++)
  207.     r->v[i-32] = t[i-32] + times38(t[i]); 
                                  ^
  208.   r->v[31] = t[31]; /* result now in r[0]...r[31] */
  209. 

#215
fe25519.c:208: error: Uninitialized Value
  The value read from t[_] was never initialized.
  206.   for(i=32;i<63;i++)
  207.     r->v[i-32] = t[i-32] + times38(t[i]); 
  208.   r->v[31] = t[31]; /* result now in r[0]...r[31] */
         ^
  209. 
  210.   reduce_mul(r);

#216
ge25519.c:226: error: Integer Overflow L2
  ([0, +oo] - 237):unsigned32 by call to `crypto_sign_ed25519_ref_fe25519_iseq_vartime`.
  224.   fe25519_square(&chk, &r->x);
  225.   fe25519_mul(&chk, &chk, &den);
  226.   if (!fe25519_iseq_vartime(&chk, &num))
              ^
  227.     fe25519_mul(&r->x, &r->x, &ge25519_sqrtm1);
  228. 

#217
ge25519.c:226: error: Integer Overflow L2
  ([0, +oo] - [0, 127]):unsigned32 by call to `crypto_sign_ed25519_ref_fe25519_iseq_vartime`.
  224.   fe25519_square(&chk, &r->x);
  225.   fe25519_mul(&chk, &chk, &den);
  226.   if (!fe25519_iseq_vartime(&chk, &num))
              ^
  227.     fe25519_mul(&r->x, &r->x, &ge25519_sqrtm1);
  228. 

#218
ssh-add.c:325: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `ssh_add_identity_constrained`.
  323. 	}
  324. 
  325. 	if ((r = ssh_add_identity_constrained(agent_fd, private, comment,
                 ^
  326. 	    lifetime, confirm, maxsign, skprovider)) == 0) {
  327. 		ret = 0;

#219
ssh-add.c:311: error: Buffer Overrun L3
  Offset: [0, 2047] Size: [0, 2048] by call to `ssh_free_identitylist`.
  309. 				    " required (%d).\n", left, minleft);
  310. 			}
  311. 			ssh_free_identitylist(idlist);
          ^
  312. 			goto out;
  313. 		}

#220
ssh-add.c:325: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `ssh_add_identity_constrained`.
  323. 	}
  324. 
  325. 	if ((r = ssh_add_identity_constrained(agent_fd, private, comment,
                 ^
  326. 	    lifetime, confirm, maxsign, skprovider)) == 0) {
  327. 		ret = 0;

#221
ssh-add.c:378: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `ssh_add_identity_constrained`.
  376. 	sshkey_free(cert);
  377. 
  378. 	if ((r = ssh_add_identity_constrained(agent_fd, private, comment,
                 ^
  379. 	    lifetime, confirm, maxsign, skprovider)) != 0) {
  380. 		error("Certificate %s (%s) add failed: %s", certpath,

#222
ssh-add.c:247: error: Buffer Overrun L3
  Offset: [36, +oo] Size: [0, +oo] by call to `sshkey_parse_private_fileblob`.
  245. 	/* try last */
  246. 	if (private == NULL && pass != NULL) {
  247. 		if ((r = sshkey_parse_private_fileblob(keyblob, pass, &private,
                  ^
  248. 		    &comment)) != 0 && r != SSH_ERR_KEY_WRONG_PASSPHRASE) {
  249. 			fprintf(stderr, "Error loading key \"%s\": %s\n",

#223
ssh-add.c:378: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `ssh_add_identity_constrained`.
  376. 	sshkey_free(cert);
  377. 
  378. 	if ((r = ssh_add_identity_constrained(agent_fd, private, comment,
                 ^
  379. 	    lifetime, confirm, maxsign, skprovider)) != 0) {
  380. 		error("Certificate %s (%s) add failed: %s", certpath,

#224
ssh-add.c:401: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  399. 	free(certpath);
  400. 	free(comment);
  401. 	sshkey_free(private);
        ^
  402. 
  403. 	return ret;

#225
sftp-client.c:209: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `encode_attrib`.
  207. 	    (r = sshbuf_put_u32(msg, id)) != 0 ||
  208. 	    (r = sshbuf_put_string(msg, s, len)) != 0 ||
  209. 	    (r = encode_attrib(msg, a)) != 0)
                 ^
  210. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  211. 	send_msg(conn, msg);

#226
nchan.c:221: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  219. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_CLOSE)) != 0 ||
  220. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  221. 		    (r = sshpkt_send(ssh)) != 0)
                  ^
  222. 			fatal("%s: send CHANNEL_EOF: %s", __func__, ssh_err(r));
  223. 		c->flags |= CHAN_CLOSE_SENT;

#227
nchan.c:220: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  218. 			    __func__, c->self);
  219. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_CLOSE)) != 0 ||
  220. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
                  ^
  221. 		    (r = sshpkt_send(ssh)) != 0)
  222. 			fatal("%s: send CHANNEL_EOF: %s", __func__, ssh_err(r));

#228
nchan.c:219: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  217. 			fatal("%s: channel %d: no remote_id",
  218. 			    __func__, c->self);
  219. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_CLOSE)) != 0 ||
                  ^
  220. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  221. 		    (r = sshpkt_send(ssh)) != 0)

#229
readpass.c:263: error: Unreachable Code
  Unreachable code after statement.
  261. 		execlp(askpass, askpass, prompt, (char *)NULL);
  262. 		error("%s: exec(%s): %s", __func__, askpass, strerror(errno));
  263. 		_exit(1);
         ^
  264. 		/* NOTREACHED */
  265. 	}

#230
serverloop.c:232: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_prepare_select`.
  230. 
  231. 	/* Allocate and update select() masks for channel descriptors. */
  232. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  233. 	    nallocp, &minwait_secs);
  234. 

#231
serverloop.c:232: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `channel_prepare_select`.
  230. 
  231. 	/* Allocate and update select() masks for channel descriptors. */
  232. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  233. 	    nallocp, &minwait_secs);
  234. 

#232
serverloop.c:232: error: Integer Overflow L2
  ([0, +oo] - 2):unsigned64 by call to `channel_prepare_select`.
  230. 
  231. 	/* Allocate and update select() masks for channel descriptors. */
  232. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  233. 	    nallocp, &minwait_secs);
  234. 

#233
serverloop.c:232: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `channel_prepare_select`.
  230. 
  231. 	/* Allocate and update select() masks for channel descriptors. */
  232. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  233. 	    nallocp, &minwait_secs);
  234. 

#234
serverloop.c:232: error: Integer Overflow L2
  ([0, +oo] - 8):unsigned64 by call to `channel_prepare_select`.
  230. 
  231. 	/* Allocate and update select() masks for channel descriptors. */
  232. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  233. 	    nallocp, &minwait_secs);
  234. 

#235
authfile.c:252: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshbuf_free`.
  250.  out:
  251. 	close(fd);
  252. 	sshbuf_free(buffer);
        ^
  253. 	return r;
  254. }

#236
sftp.c:231: error: Unreachable Code
  Unreachable code after statement.
  229. 	}
  230. 
  231. 	_exit(1);
        ^
  232. }
  233. 

#237
kex.c:227: error: Dead Store
  The value written to &r (type int) is never used.
  225. 	char *cp, *tmp, *patterns;
  226. 	char *list = NULL, *ret = NULL, *matching = NULL, *opatterns = NULL;
  227. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  228. 
  229. 	if (listp == NULL || def == NULL || all == NULL)

#238
sshsig.c:226: error: Dead Store
  The value written to &r (type int) is never used.
  224. sshsig_parse_preamble(struct sshbuf *buf)
  225. {
  226. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  227. 	uint32_t sversion;
  228. 

#239
sshsig.c:231: error: Integer Overflow L2
  ([0, `buf->size`] - [0, `buf->off` + 6]):unsigned64 by call to `sshbuf_get_u32`.
  229. 	if ((r = sshbuf_cmp(buf, 0, MAGIC_PREAMBLE, MAGIC_PREAMBLE_LEN)) != 0 ||
  230. 	    (r = sshbuf_consume(buf, (sizeof(MAGIC_PREAMBLE)-1))) != 0 ||
  231. 	    (r = sshbuf_get_u32(buf, &sversion)) != 0) {
                 ^
  232. 		error("Couldn't verify signature: invalid format");
  233. 		return r;

#240
umac.c:231: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo].
  229. 
  230.     /* Initialize pdf and cache */
  231.     memset(pc->nonce, 0, sizeof(pc->nonce));
           ^
  232.     aes_encryption(pc->nonce, pc->cache, pc->prf_key);
  233.     explicit_bzero(buf, sizeof(buf));

#241
packet.c:257: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `kex_free`.
  255.  fail:
  256. 	if (ssh) {
  257. 		kex_free(ssh->kex);
         ^
  258. 		free(ssh);
  259. 	}

#242
packet.c:263: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  261. 		sshbuf_free(state->input);
  262. 		sshbuf_free(state->output);
  263. 		sshbuf_free(state->incoming_packet);
         ^
  264. 		sshbuf_free(state->outgoing_packet);
  265. 		free(state);

#243
servconf.c:236: error: Buffer Overrun S2
  Offset: [`lp`, min(2147483646, `lp`)] Size: [0, +oo].
  234. 		*iarray = xrecallocarray(*iarray, *lp, *lp + 1,
  235. 		    sizeof(**iarray));
  236. 		(*iarray)[*lp] = i;
         ^
  237. 	}
  238. 

#244
nchan.c:246: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  244. 	    (r = sshpkt_put_cstring(ssh, "eow@openssh.com")) != 0 ||
  245. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 ||
  246. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  247. 		fatal("%s: send CHANNEL_EOF: %s", __func__, ssh_err(r));
  248. }

#245
nchan.c:245: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  243. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  244. 	    (r = sshpkt_put_cstring(ssh, "eow@openssh.com")) != 0 ||
  245. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 ||
                 ^
  246. 	    (r = sshpkt_send(ssh)) != 0)
  247. 		fatal("%s: send CHANNEL_EOF: %s", __func__, ssh_err(r));

#246
nchan.c:242: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  240. 	if (!c->have_remote_id)
  241. 		fatal("%s: channel %d: no remote_id", __func__, c->self);
  242. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_REQUEST)) != 0 ||
                 ^
  243. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  244. 	    (r = sshpkt_put_cstring(ssh, "eow@openssh.com")) != 0 ||

#247
nchan.c:244: error: Integer Overflow L2
  ([0, +oo] - [4, 19]):unsigned64 by call to `sshpkt_put_cstring`.
  242. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_REQUEST)) != 0 ||
  243. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  244. 	    (r = sshpkt_put_cstring(ssh, "eow@openssh.com")) != 0 ||
                 ^
  245. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 ||
  246. 	    (r = sshpkt_send(ssh)) != 0)

#248
match.c:255: error: Null Dereference
  pointer `p` last assigned on line 255 could be null and is dereferenced at line 255, column 2.
  253. 	pat = xstrdup(pattern);
  254. 	p = strchr(pat, '@');
  255. 	*p++ = '\0';
        ^
  256. 
  257. 	if ((ret = match_pattern(user, pat)) == 1)

#249
cipher.c:244: error: Dead Store
  The value written to &ret (type int) is never used.
  242. {
  243. 	struct sshcipher_ctx *cc = NULL;
  244. 	int ret = SSH_ERR_INTERNAL_ERROR;
        ^
  245. #ifdef WITH_OPENSSL
  246. 	const EVP_CIPHER *type;

#250
ssh-sk.c:267: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  265. 	r = 0;
  266.  out:
  267. 	sshkey_free(key);
        ^
  268. 	return r;
  269. }

#251
sshbuf-getput-basic.c:254: error: Null Dereference
  pointer `p` last assigned on line 244 could be null and is dereferenced at line 254, column 8.
  252. 		return SSH_ERR_MESSAGE_INCOMPLETE;
  253. 	}
  254. 	len = PEEK_U32(p);
              ^
  255. 	if (len > SSHBUF_SIZE_MAX - 4) {
  256. 		SSHBUF_DBG(("SSH_ERR_STRING_TOO_LARGE"));

#252
ssh_api.c:267: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_read_poll2`.
  265. 	 */
  266. 	for (;;) {
  267. 		if ((r = ssh_packet_read_poll2(ssh, &type, &seqnr)) != 0)
                  ^
  268. 			return r;
  269. 		if (type > 0 && type < DISPATCH_MAX &&

#253
ssh_api.c:267: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_read_poll2`.
  265. 	 */
  266. 	for (;;) {
  267. 		if ((r = ssh_packet_read_poll2(ssh, &type, &seqnr)) != 0)
                  ^
  268. 			return r;
  269. 		if (type > 0 && type < DISPATCH_MAX &&

#254
ssh_api.c:267: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_read_poll2`.
  265. 	 */
  266. 	for (;;) {
  267. 		if ((r = ssh_packet_read_poll2(ssh, &type, &seqnr)) != 0)
                  ^
  268. 			return r;
  269. 		if (type > 0 && type < DISPATCH_MAX &&

#255
ssh_api.c:267: error: Integer Overflow L2
  ([0, +oo] - 1024):unsigned64 by call to `ssh_packet_read_poll2`.
  265. 	 */
  266. 	for (;;) {
  267. 		if ((r = ssh_packet_read_poll2(ssh, &type, &seqnr)) != 0)
                  ^
  268. 			return r;
  269. 		if (type > 0 && type < DISPATCH_MAX &&

#256
authfd.c:312: error: Buffer Overrun L3
  Offset: [0, 2047] Size: [0, 2048] by call to `ssh_free_identitylist`.
  310. 	sshbuf_free(msg);
  311. 	if (idl != NULL)
  312. 		ssh_free_identitylist(idl);
         ^
  313. 	return r;
  314. }

#257
authfd.c:294: error: Buffer Overrun L3
  Offset: [11, +oo] (<= [4, +oo] + 7) Size: [0, +oo] by call to `deserialise_identity2`.
  292. 	}
  293. 	for (i = 0; i < num;) {
  294. 		if ((r = deserialise_identity2(msg, &(idl->keys[i]),
                  ^
  295. 		    &(idl->comments[i]))) != 0) {
  296. 			if (r == SSH_ERR_KEY_TYPE_UNKNOWN) {

#258
authfd.c:275: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  273. 
  274. 	/* Get the number of entries in the response and check it for sanity. */
  275. 	if ((r = sshbuf_get_u32(msg, &num)) != 0)
                 ^
  276. 		goto out;
  277. 	if (num > MAX_AGENT_IDENTITIES) {

#259
authfd.c:310: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  308. 	r = 0;
  309.  out:
  310. 	sshbuf_free(msg);
        ^
  311. 	if (idl != NULL)
  312. 		ssh_free_identitylist(idl);

#260
ge25519.c:249: error: Integer Overflow L2
  ([0, +oo] - 237):unsigned32 by call to `crypto_sign_ed25519_ref_fe25519_pack`.
  247.   fe25519_mul(&tx, &p->x, &zi);
  248.   fe25519_mul(&ty, &p->y, &zi);
  249.   fe25519_pack(r, &ty);
         ^
  250.   r[31] ^= fe25519_getparity(&tx) << 7;
  251. }

#261
ge25519.c:249: error: Integer Overflow L2
  ([0, +oo] - [0, 127]):unsigned32 by call to `crypto_sign_ed25519_ref_fe25519_pack`.
  247.   fe25519_mul(&tx, &p->x, &zi);
  248.   fe25519_mul(&ty, &p->y, &zi);
  249.   fe25519_pack(r, &ty);
         ^
  250.   r[31] ^= fe25519_getparity(&tx) << 7;
  251. }

#262
kexgen.c:301: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `sshkey_putb`.
  299. 		goto out;
  300. 	}
  301. 	if ((r = sshkey_putb(server_host_public, server_host_key_blob)) != 0)
                 ^
  302. 		goto out;
  303. 	hashlen = sizeof(hash);

#263
kexgen.c:327: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  325. 	    (r = sshpkt_put_stringb(ssh, server_pubkey)) != 0 ||
  326. 	    (r = sshpkt_put_string(ssh, signature, slen)) != 0 ||
  327. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  328. 		goto out;
  329. 

#264
kexgen.c:324: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_stringb`.
  322. 	/* send server hostkey, ECDH pubkey 'Q_S' and signed H */
  323. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEX_ECDH_REPLY)) != 0 ||
  324. 	    (r = sshpkt_put_stringb(ssh, server_host_key_blob)) != 0 ||
                 ^
  325. 	    (r = sshpkt_put_stringb(ssh, server_pubkey)) != 0 ||
  326. 	    (r = sshpkt_put_string(ssh, signature, slen)) != 0 ||

#265
kexgen.c:334: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  332. out:
  333. 	explicit_bzero(hash, sizeof(hash));
  334. 	sshbuf_free(server_host_key_blob);
        ^
  335. 	free(signature);
  336. 	sshbuf_free(shared_secret);

#266
ssh-rsa.c:251: error: Dead Store
  The value written to &ret (type int) is never used.
  249. 	const BIGNUM *rsa_n;
  250. 	char *sigtype = NULL;
  251. 	int hash_alg, want_alg, ret = SSH_ERR_INTERNAL_ERROR;
        ^
  252. 	size_t len = 0, diff, modlen, dlen;
  253. 	struct sshbuf *b = NULL;

#267
smult_curve25519_ref.c:259: error: Buffer Overrun L3
  Offset: [-31, 31] Size: 96 by call to `mainloop`.
  257.   e[31] |= 64;
  258.   for (i = 0;i < 32;++i) work[i] = p[i];
  259.   mainloop(work,e);
         ^
  260.   recip(work + 32,work + 32);
  261.   mult(work + 64,work,work + 32);

#268
smult_curve25519_ref.c:255: error: Uninitialized Value
  The value read from e[_] was never initialized.
  253.   unsigned int i;
  254.   for (i = 0;i < 32;++i) e[i] = n[i];
  255.   e[0] &= 248;
         ^
  256.   e[31] &= 127;
  257.   e[31] |= 64;

#269
session.c:255: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshbuf_put_u8`.
  253. 	if (sshbuf_len(loginmsg) == 0)
  254. 		return;
  255. 	if ((r = sshbuf_put_u8(loginmsg, 0)) != 0)
                 ^
  256. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  257. 	printf("%s", (char *)sshbuf_ptr(loginmsg));

#270
krl.c:293: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64.
  291. 	while ((crs = RB_PREV(revoked_serial_tree, rt, ers)) != NULL) {
  292. 		KRL_DBG(("%s: pred %llu:%llu", __func__, crs->lo, crs->hi));
  293. 		if (ers->lo != 0 && crs->hi < ers->lo - 1)
                             ^
  294. 			break;
  295. 		/* This entry overlaps. */

#271
ssh-pkcs11-helper.c:267: error: Null Dereference
  pointer `cp` last assigned on line 266 could be null and is dereferenced by call to `get_u32()` at line 267, column 12.
  265. 		return;		/* Incomplete message. */
  266. 	cp = sshbuf_ptr(iqueue);
  267. 	msg_len = get_u32(cp);
                  ^
  268. 	if (msg_len > MAX_MSG_LENGTH) {
  269. 		error("bad message len %d", msg_len);

#272
auth2-chall.c:278: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  276. 			fatal("%s: %s", __func__, ssh_err(r));
  277. 	}
  278. 	if ((r = sshpkt_send(ssh)) != 0 ||
                 ^
  279. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  280. 		fatal("%s: %s", __func__, ssh_err(r));

#273
auth2-chall.c:275: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  273. 	for (i = 0; i < kbdintctxt->nreq; i++) {
  274. 		if ((r = sshpkt_put_cstring(ssh, prompts[i])) != 0 ||
  275. 		    (r = sshpkt_put_u8(ssh, echo_on[i])) != 0)
                  ^
  276. 			fatal("%s: %s", __func__, ssh_err(r));
  277. 	}

#274
auth2-chall.c:268: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  266. 
  267. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_INFO_REQUEST)) != 0 ||
  268. 	    (r = sshpkt_put_cstring(ssh, name)) != 0 ||
                 ^
  269. 	    (r = sshpkt_put_cstring(ssh, instr)) != 0 ||
  270. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||	/* language not used */

#275
sshsig.c:259: error: Dead Store
  The value written to &r (type int) is never used.
  257. 	struct sshbuf *buf = NULL;
  258. 	char *hashalg = NULL;
  259. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  260. 
  261. 	if (hashalgp != NULL)

#276
sshsig.c:282: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  280.  done:
  281. 	free(hashalg);
  282. 	sshbuf_free(buf);
        ^
  283. 	return r;
  284. }

#277
authfile.c:284: error: Integer Overflow L2
  ([0, max(1, `k->cert->certblob->refcount`)] - 1):unsigned32 by call to `sshkey_read`.
  282. 			;
  283. 		if (*cp) {
  284. 			if ((r = sshkey_read(k, &cp)) == 0) {
                   ^
  285. 				cp[strcspn(cp, "\r\n")] = '\0';
  286. 				if (commentp) {

#278
authfile.c:284: error: Integer Overflow L2
  ([0, max(1, `k->cert->critical->refcount`)] - 1):unsigned32 by call to `sshkey_read`.
  282. 			;
  283. 		if (*cp) {
  284. 			if ((r = sshkey_read(k, &cp)) == 0) {
                   ^
  285. 				cp[strcspn(cp, "\r\n")] = '\0';
  286. 				if (commentp) {

#279
authfile.c:284: error: Integer Overflow L2
  ([0, max(1, `k->cert->extensions->refcount`)] - 1):unsigned32 by call to `sshkey_read`.
  282. 			;
  283. 		if (*cp) {
  284. 			if ((r = sshkey_read(k, &cp)) == 0) {
                   ^
  285. 				cp[strcspn(cp, "\r\n")] = '\0';
  286. 				if (commentp) {

#280
auth2.c:285: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `getpwnamallow`.
  283. 	if (authctxt->attempt++ == 0) {
  284. 		/* setup auth context */
  285. 		authctxt->pw = PRIVSEP(getpwnamallow(ssh, user));
                        ^
  286. 		authctxt->user = xstrdup(user);
  287. 		if (authctxt->pw && strcmp(service, "ssh-connection")==0) {

#281
auth2.c:312: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  310. 		userauth_banner(ssh);
  311. 		if (auth2_setup_methods_lists(authctxt) != 0)
  312. 			ssh_packet_disconnect(ssh,
          ^
  313. 			    "no authentication methods enabled");
  314. 	} else if (strcmp(user, authctxt->user) != 0 ||

#282
auth2.c:312: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  310. 		userauth_banner(ssh);
  311. 		if (auth2_setup_methods_lists(authctxt) != 0)
  312. 			ssh_packet_disconnect(ssh,
          ^
  313. 			    "no authentication methods enabled");
  314. 	} else if (strcmp(user, authctxt->user) != 0 ||

#283
auth2.c:312: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  310. 		userauth_banner(ssh);
  311. 		if (auth2_setup_methods_lists(authctxt) != 0)
  312. 			ssh_packet_disconnect(ssh,
          ^
  313. 			    "no authentication methods enabled");
  314. 	} else if (strcmp(user, authctxt->user) != 0 ||

#284
auth2.c:316: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  314. 	} else if (strcmp(user, authctxt->user) != 0 ||
  315. 	    strcmp(service, authctxt->service) != 0) {
  316. 		ssh_packet_disconnect(ssh, "Change of username or service "
         ^
  317. 		    "not allowed: (%s,%s) -> (%s,%s)",
  318. 		    authctxt->user, authctxt->service, user, service);

#285
auth2.c:316: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  314. 	} else if (strcmp(user, authctxt->user) != 0 ||
  315. 	    strcmp(service, authctxt->service) != 0) {
  316. 		ssh_packet_disconnect(ssh, "Change of username or service "
         ^
  317. 		    "not allowed: (%s,%s) -> (%s,%s)",
  318. 		    authctxt->user, authctxt->service, user, service);

#286
session.c:264: error: Dead Store
  The value written to &fd (type int) is never used.
  262. prepare_auth_info_file(struct passwd *pw, struct sshbuf *info)
  263. {
  264. 	int fd = -1, success = 0;
        ^
  265. 
  266. 	if (!options.expose_userauth_info || info == NULL)

#287
ssh-pkcs11-client.c:296: error: Unreachable Code
  Unreachable code after statement.
  294. 		    (dup2(pair[1], STDOUT_FILENO) == -1)) {
  295. 			fprintf(stderr, "dup2: %s\n", strerror(errno));
  296. 			_exit(1);
          ^
  297. 		}
  298. 		close(pair[0]);

#288
ssh-pkcs11-client.c:307: error: Unreachable Code
  Unreachable code after statement.
  305. 		execlp(helper, helper, verbosity, (char *)NULL);
  306. 		fprintf(stderr, "exec: %s: %s\n", helper, strerror(errno));
  307. 		_exit(1);
         ^
  308. 	}
  309. 	close(pair[1]);

#289
ssh-sk.c:276: error: Dead Store
  The value written to &r (type int) is never used.
  274. {
  275. 	struct sshkey *key = NULL;
  276. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  277. 
  278. 	*keyp = NULL;

#290
ssh-sk.c:324: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_free`.
  322. 	key = NULL;
  323.  out:
  324. 	sshkey_free(key);
        ^
  325. 	return r;
  326. }

#291
monitor.c:302: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `auth2_authctxt_reset_info`.
  300. 		auth_method = "unknown";
  301. 		auth_submethod = NULL;
  302. 		auth2_authctxt_reset_info(authctxt);
         ^
  303. 
  304. 		authenticated = (monitor_read(ssh, pmonitor,

#292
monitor.c:348: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `auth2_update_session_info`.
  346. 				authctxt->failures++;
  347. 			if (authenticated || partial) {
  348. 				auth2_update_session_info(authctxt,
           ^
  349. 				    auth_method, auth_submethod);
  350. 			}

#293
ttymodes.c:333: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_stringb`.
  331. 	/* Mark end of mode data. */
  332. 	if ((r = sshbuf_put_u8(buf, TTY_OP_END)) != 0 ||
  333. 	    (r = sshpkt_put_stringb(ssh, buf)) != 0)
                 ^
  334. 		fatal("%s: packet error: %s", __func__, ssh_err(r));
  335. 	sshbuf_free(buf);

#294
ssh-agent.c:326: error: Inferbo Alloc May Be Big
  Length: [64, 1048640] by call to `sshkey_sign`.
  324. 		    sshkey_type(id->key), fp);
  325. 	}
  326. 	if ((r = sshkey_sign(id->key, &signature, &slen,
                 ^
  327. 	    data, dlen, agent_decode_alg(key, flags),
  328. 	    id->sk_provider, compat)) != 0) {

#295
ssh-agent.c:336: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  334.  send:
  335. 	notify_complete(notifier);
  336. 	sshkey_free(key);
        ^
  337. 	free(fp);
  338. 	if (ok == 0) {

#296
ssh-agent.c:339: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshbuf_put_u8`.
  337. 	free(fp);
  338. 	if (ok == 0) {
  339. 		if ((r = sshbuf_put_u8(msg, SSH2_AGENT_SIGN_RESPONSE)) != 0 ||
                  ^
  340. 		    (r = sshbuf_put_string(msg, signature, slen)) != 0)
  341. 			fatal("%s: buffer error: %s", __func__, ssh_err(r));

#297
ssh-agent.c:340: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_string`.
  338. 	if (ok == 0) {
  339. 		if ((r = sshbuf_put_u8(msg, SSH2_AGENT_SIGN_RESPONSE)) != 0 ||
  340. 		    (r = sshbuf_put_string(msg, signature, slen)) != 0)
                  ^
  341. 			fatal("%s: buffer error: %s", __func__, ssh_err(r));
  342. 	} else if ((r = sshbuf_put_u8(msg, SSH_AGENT_FAILURE)) != 0)

#298
sshsig.c:365: error: Buffer Overrun L3
  Offset: [0, 31] Size: [0, +oo] by call to `sshkey_verify`.
  363. 		}
  364. 	}
  365. 	if ((r = sshkey_verify(key, sig, siglen, sshbuf_ptr(toverify),
                 ^
  366. 	    sshbuf_len(toverify), NULL, 0, sig_details)) != 0) {
  367. 		error("Signature verification failed: %s", ssh_err(r));

#299
sshsig.c:291: error: Dead Store
  The value written to &r (type int) is never used.
  289.     struct sshkey **sign_keyp, struct sshkey_sig_details **sig_details)
  290. {
  291. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  292. 	struct sshbuf *buf = NULL, *toverify = NULL;
  293. 	struct sshkey *key = NULL;

#300
sshsig.c:381: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  379. 	free(sigtype);
  380. 	free(sig_hashalg);
  381. 	sshbuf_free(buf);
        ^
  382. 	sshbuf_free(toverify);
  383. 	sshkey_free(key);

#301
sshsig.c:322: error: Integer Overflow L2
  ([0, `signature->size`] - [0, `signature->off` + 10]):unsigned64 by call to `sshkey_froms`.
  320. 		goto done;
  321. 
  322. 	if ((r = sshkey_froms(signature, &key)) != 0 ||
                 ^
  323. 	    (r = sshbuf_get_cstring(signature, &got_namespace, NULL)) != 0 ||
  324. 	    (r = sshbuf_get_string(signature, NULL, NULL)) != 0 ||

#302
packet.c:307: error: Buffer Overrun L1
  Offset: 46 (<= 44 + 2) Size: 1 by call to `cipher_init`.
  305. 	state->connection_in = fd_in;
  306. 	state->connection_out = fd_out;
  307. 	if ((r = cipher_init(&state->send_context, none,
                 ^
  308. 	    (const u_char *)"", 0, NULL, 0, CIPHER_ENCRYPT)) != 0 ||
  309. 	    (r = cipher_init(&state->receive_context, none,

#303
packet.c:309: error: Buffer Overrun L1
  Offset: 46 (<= 44 + 2) Size: 1 by call to `cipher_init`.
  307. 	if ((r = cipher_init(&state->send_context, none,
  308. 	    (const u_char *)"", 0, NULL, 0, CIPHER_ENCRYPT)) != 0 ||
  309. 	    (r = cipher_init(&state->receive_context, none,
                 ^
  310. 	    (const u_char *)"", 0, NULL, 0, CIPHER_DECRYPT)) != 0) {
  311. 		error("%s: cipher_init failed: %s", __func__, ssh_err(r));

#304
packet.c:307: error: Buffer Overrun L1
  Offset: [47, 63] (<= [44, 60] + 3) Size: 1 by call to `cipher_init`.
  305. 	state->connection_in = fd_in;
  306. 	state->connection_out = fd_out;
  307. 	if ((r = cipher_init(&state->send_context, none,
                 ^
  308. 	    (const u_char *)"", 0, NULL, 0, CIPHER_ENCRYPT)) != 0 ||
  309. 	    (r = cipher_init(&state->receive_context, none,

#305
packet.c:309: error: Buffer Overrun L1
  Offset: [47, 63] (<= [44, 60] + 3) Size: 1 by call to `cipher_init`.
  307. 	if ((r = cipher_init(&state->send_context, none,
  308. 	    (const u_char *)"", 0, NULL, 0, CIPHER_ENCRYPT)) != 0 ||
  309. 	    (r = cipher_init(&state->receive_context, none,
                 ^
  310. 	    (const u_char *)"", 0, NULL, 0, CIPHER_DECRYPT)) != 0) {
  311. 		error("%s: cipher_init failed: %s", __func__, ssh_err(r));

#306
ssh_api.c:294: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  292. 	if ((r = sshpkt_start(ssh, type)) != 0 ||
  293. 	    (r = sshpkt_put(ssh, data, len)) != 0 ||
  294. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  295. 		return r;
  296. 	return 0;

#307
ssh_api.c:292: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  290. 	int r;
  291. 
  292. 	if ((r = sshpkt_start(ssh, type)) != 0 ||
                 ^
  293. 	    (r = sshpkt_put(ssh, data, len)) != 0 ||
  294. 	    (r = sshpkt_send(ssh)) != 0)

#308
hostfile.c:297: error: Integer Overflow L2
  ([0, max(0, `hostkeys->entries->key->cert->certblob->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  295. 		free(hostkeys->entries[i].host);
  296. 		free(hostkeys->entries[i].file);
  297. 		sshkey_free(hostkeys->entries[i].key);
         ^
  298. 		explicit_bzero(hostkeys->entries + i, sizeof(*hostkeys->entries));
  299. 	}

#309
hostfile.c:297: error: Integer Overflow L2
  ([0, max(0, `hostkeys->entries->key->cert->critical->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  295. 		free(hostkeys->entries[i].host);
  296. 		free(hostkeys->entries[i].file);
  297. 		sshkey_free(hostkeys->entries[i].key);
         ^
  298. 		explicit_bzero(hostkeys->entries + i, sizeof(*hostkeys->entries));
  299. 	}

#310
hostfile.c:297: error: Integer Overflow L2
  ([0, max(0, `hostkeys->entries->key->cert->extensions->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  295. 		free(hostkeys->entries[i].host);
  296. 		free(hostkeys->entries[i].file);
  297. 		sshkey_free(hostkeys->entries[i].key);
         ^
  298. 		explicit_bzero(hostkeys->entries + i, sizeof(*hostkeys->entries));
  299. 	}

#311
hostfile.c:297: error: Integer Overflow L2
  ([0, max(0, `hostkeys->entries->key->sk_key_handle->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  295. 		free(hostkeys->entries[i].host);
  296. 		free(hostkeys->entries[i].file);
  297. 		sshkey_free(hostkeys->entries[i].key);
         ^
  298. 		explicit_bzero(hostkeys->entries + i, sizeof(*hostkeys->entries));
  299. 	}

#312
hostfile.c:297: error: Integer Overflow L2
  ([0, max(0, `hostkeys->entries->key->sk_reserved->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  295. 		free(hostkeys->entries[i].host);
  296. 		free(hostkeys->entries[i].file);
  297. 		sshkey_free(hostkeys->entries[i].key);
         ^
  298. 		explicit_bzero(hostkeys->entries + i, sizeof(*hostkeys->entries));
  299. 	}

#313
openbsd-compat/arc4random.c:314: error: Uninitialized Value
  The value read from r was never initialized.
  312. 	}
  313. 
  314. 	return r % upper_bound;
        ^
  315. }
  316. #endif /* !HAVE_ARC4RANDOM_UNIFORM */

#314
sntrup4591761.c:319: error: Buffer Overrun L2
  Offset: [1, 1519] Size: 761 by call to `rq_mult`.
  317.   rq_decoderounded(c,cstr + 32);
  318. 
  319.   rq_mult(t,c,f);
         ^
  320.   for (i = 0;i < p;++i) t3[i] = mod3_freeze(modq_freeze(3*t[i]));
  321. 

#315
sntrup4591761.c:319: error: Buffer Overrun L3
  Offset: [-760, 760] Size: 761 by call to `rq_mult`.
  317.   rq_decoderounded(c,cstr + 32);
  318. 
  319.   rq_mult(t,c,f);
         ^
  320.   for (i = 0;i < p;++i) t3[i] = mod3_freeze(modq_freeze(3*t[i]));
  321. 

#316
session.c:309: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `cleanhostname`.
  307. 			if ((host = hpdelim(&cp)) == NULL)
  308. 				fatal("%s: internal error: hpdelim", __func__);
  309. 			host = cleanhostname(host);
                 ^
  310. 			if (cp == NULL || (port = permitopen_port(cp)) < 0)
  311. 				fatal("%s: internal error: permitopen port",

#317
authfile.c:344: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  342.  out:
  343. 	free(file);
  344. 	sshkey_free(pub);
        ^
  345. 	return r;
  346. }

#318
openbsd-compat/port-net.c:309: error: Dead Store
  The value written to &ptr (type char*) is never used.
  307. 	int r;
  308. 	size_t len;
  309. 	char *ptr = buf;
        ^
  310. #if defined(SSH_TUN_PREPEND_AF)
  311. 	char rbuf[CHAN_RBUF];

#319
ssh-keyscan.c:322: error: Uninitialized Value
  The value read from hashed was never initialized.
  320. 	if (hash_hosts && (hashed = host_hash(host, NULL, 0)) == NULL)
  321. 		fatal("host_hash failed");
  322. 	known_host = hash_hosts ? hashed : hostport;
                     ^
  323. 	if (!get_cert)
  324. 		fprintf(stdout, "%s ", known_host);

#320
sshbuf-getput-basic.c:320: error: Integer Overflow L2
  ([0, `buf->size`] - [0, `buf->off` + 4]):unsigned64 by call to `sshbuf_get`.
  318. 	    (r = sshbuf_get_u32(buf, &len)) != 0 ||
  319. 	    (r = sshbuf_reserve(v, len, &p)) != 0 ||
  320. 	    (r = sshbuf_get(buf, p, len)) != 0)
                 ^
  321. 		return r;
  322. 	return 0;

#321
sftp.c:342: error: Unreachable Code
  Unreachable code after statement.
  340. 		fprintf(stderr, "Couldn't execute \"%s\": %s\n", shell,
  341. 		    strerror(errno));
  342. 		_exit(1);
         ^
  343. 	}
  344. 	while (waitpid(pid, &status, 0) == -1)

#322
authfd.c:325: error: Integer Overflow L2
  ([0, `idl->keys->cert->certblob->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  323. 	for (i = 0; i < idl->nkeys; i++) {
  324. 		if (idl->keys != NULL)
  325. 			sshkey_free(idl->keys[i]);
          ^
  326. 		if (idl->comments != NULL)
  327. 			free(idl->comments[i]);

#323
authfd.c:325: error: Integer Overflow L2
  ([0, `idl->keys->cert->critical->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  323. 	for (i = 0; i < idl->nkeys; i++) {
  324. 		if (idl->keys != NULL)
  325. 			sshkey_free(idl->keys[i]);
          ^
  326. 		if (idl->comments != NULL)
  327. 			free(idl->comments[i]);

#324
authfd.c:325: error: Integer Overflow L2
  ([0, `idl->keys->cert->extensions->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  323. 	for (i = 0; i < idl->nkeys; i++) {
  324. 		if (idl->keys != NULL)
  325. 			sshkey_free(idl->keys[i]);
          ^
  326. 		if (idl->comments != NULL)
  327. 			free(idl->comments[i]);

#325
authfd.c:325: error: Integer Overflow L2
  ([0, `idl->keys->sk_key_handle->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  323. 	for (i = 0; i < idl->nkeys; i++) {
  324. 		if (idl->keys != NULL)
  325. 			sshkey_free(idl->keys[i]);
          ^
  326. 		if (idl->comments != NULL)
  327. 			free(idl->comments[i]);

#326
authfd.c:325: error: Integer Overflow L2
  ([0, `idl->keys->sk_reserved->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  323. 	for (i = 0; i < idl->nkeys; i++) {
  324. 		if (idl->keys != NULL)
  325. 			sshkey_free(idl->keys[i]);
          ^
  326. 		if (idl->comments != NULL)
  327. 			free(idl->comments[i]);

#327
serverloop.c:342: error: Integer Overflow L2
  ([0, +oo] - 1024):unsigned64 by call to `ssh_packet_process_incoming`.
  340. 		} else {
  341. 			/* Buffer any received data. */
  342. 			if ((r = ssh_packet_process_incoming(ssh, buf, len))
                   ^
  343. 			    != 0)
  344. 				fatal("%s: ssh_packet_process_incoming: %s",

#328
sshbuf-getput-basic.c:334: error: Null Dereference
  pointer `p` last assigned on line 331 could be null and is dereferenced by call to `memcpy()` at line 334, column 3.
  332. 		return r;
  333. 	if (len != 0)
  334. 		memcpy(p, v, len);
         ^
  335. 	return 0;
  336. }

#329
ssh_api.c:366: error: Integer Overflow L2
  ([0, +oo] - 20):unsigned64 by call to `sshbuf_put`.
  364. 		if (ssh->kex->server || ++n > SSH_MAX_PRE_BANNER_LINES) {
  365.   bad:
  366. 			if ((r = sshbuf_put(ssh_packet_get_output(ssh),
                   ^
  367. 			   mismatch, strlen(mismatch))) != 0)
  368. 				return r;

#330
mux.c:412: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  410. 			free(cctx->env);
  411. 			free(cctx->term);
  412. 			sshbuf_free(cctx->cmd);
          ^
  413. 			free(cctx);
  414. 			reply_error(reply, MUX_S_FAILURE, rid,

#331
mux.c:420: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  418. 	}
  419. 
  420. 	debug3("%s: got fds stdin %d, stdout %d, stderr %d", __func__,
        ^
  421. 	    new_fd[0], new_fd[1], new_fd[2]);
  422. 

#332
mux.c:429: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  427. 		    "Multiple sessions not supported");
  428.  cleanup:
  429. 		close(new_fd[0]);
         ^
  430. 		close(new_fd[1]);
  431. 		close(new_fd[2]);

#333
mux.c:430: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  428.  cleanup:
  429. 		close(new_fd[0]);
  430. 		close(new_fd[1]);
         ^
  431. 		close(new_fd[2]);
  432. 		free(cctx->term);

#334
mux.c:431: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  429. 		close(new_fd[0]);
  430. 		close(new_fd[1]);
  431. 		close(new_fd[2]);
         ^
  432. 		free(cctx->term);
  433. 		if (env_len != 0) {

#335
mux.c:454: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  452. 
  453. 	/* Try to pick up ttymodes from client before it goes raw */
  454. 	if (cctx->want_tty && tcgetattr(new_fd[0], &cctx->tio) == -1)
                              ^
  455. 		error("%s: tcgetattr: %s", __func__, strerror(errno));
  456. 

#336
mux.c:458: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  456. 
  457. 	/* enable nonblocking unless tty */
  458. 	if (!isatty(new_fd[0]))
             ^
  459. 		set_nonblock(new_fd[0]);
  460. 	if (!isatty(new_fd[1]))

#337
mux.c:459: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  457. 	/* enable nonblocking unless tty */
  458. 	if (!isatty(new_fd[0]))
  459. 		set_nonblock(new_fd[0]);
         ^
  460. 	if (!isatty(new_fd[1]))
  461. 		set_nonblock(new_fd[1]);

#338
mux.c:460: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  458. 	if (!isatty(new_fd[0]))
  459. 		set_nonblock(new_fd[0]);
  460. 	if (!isatty(new_fd[1]))
             ^
  461. 		set_nonblock(new_fd[1]);
  462. 	if (!isatty(new_fd[2]))

#339
mux.c:461: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  459. 		set_nonblock(new_fd[0]);
  460. 	if (!isatty(new_fd[1]))
  461. 		set_nonblock(new_fd[1]);
         ^
  462. 	if (!isatty(new_fd[2]))
  463. 		set_nonblock(new_fd[2]);

#340
mux.c:462: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  460. 	if (!isatty(new_fd[1]))
  461. 		set_nonblock(new_fd[1]);
  462. 	if (!isatty(new_fd[2]))
             ^
  463. 		set_nonblock(new_fd[2]);
  464. 

#341
mux.c:463: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  461. 		set_nonblock(new_fd[1]);
  462. 	if (!isatty(new_fd[2]))
  463. 		set_nonblock(new_fd[2]);
         ^
  464. 
  465. 	window = CHAN_SES_WINDOW_DEFAULT;

#342
mux.c:472: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  470. 	}
  471. 
  472. 	nc = channel_new(ssh, "session", SSH_CHANNEL_OPENING,
             ^
  473. 	    new_fd[0], new_fd[1], new_fd[2], window, packetmax,
  474. 	    CHAN_EXTENDED_WRITE, "client-session", /*nonblock*/0);

#343
authfd.c:356: error: Buffer Overrun L3
  Offset: [0, 2047] Size: [0, 2048] by call to `ssh_free_identitylist`.
  354. 	}
  355. 
  356. 	ssh_free_identitylist(idlist);
        ^
  357. 	return ret;
  358. }

#344
ssh-sk.c:353: error: Dead Store
  The value written to &r (type int) is never used.
  351. 	size_t challenge_len;
  352. 	struct sk_enroll_response *resp = NULL;
  353. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  354. 	int alg;
  355. 

#345
ssh-sk.c:441: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_free`.
  439.  out:
  440. 	sshsk_free(skp);
  441. 	sshkey_free(key);
        ^
  442. 	sshsk_free_enroll_response(resp);
  443. 	explicit_bzero(randchall, sizeof(randchall));

#346
ssh-keygen.c:352: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `sshkey_putb`.
  350. 	if ((b = sshbuf_new()) == NULL)
  351. 		fatal("%s: sshbuf_new failed", __func__);
  352. 	if ((r = sshkey_putb(k, b)) != 0)
                 ^
  353. 		fatal("key_to_blob failed: %s", ssh_err(r));
  354. 	if ((b64 = sshbuf_dtob64_string(b, 1)) == NULL)

#347
ssh-keygen.c:354: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, +oo] by call to `sshbuf_dtob64_string`.
  352. 	if ((r = sshkey_putb(k, b)) != 0)
  353. 		fatal("key_to_blob failed: %s", ssh_err(r));
  354. 	if ((b64 = sshbuf_dtob64_string(b, 1)) == NULL)
                   ^
  355. 		fatal("%s: sshbuf_dtob64_string failed", __func__);
  356. 

#348
kex.c:390: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  388. 	if (r != 0 && proposal != NULL)
  389. 		kex_prop_free(proposal);
  390. 	sshbuf_free(b);
        ^
  391. 	return r;
  392. }

#349
openbsd-compat/port-net.c:361: error: Dead Store
  The value written to &buf (type unsigned char*) is never used.
  359. 	if (*dlen < sizeof(af))
  360. 		return (NULL);
  361. 	buf = *data;
        ^
  362. 
  363. #if defined(SSH_TUN_PREPEND_AF)

#350
authfile.c:375: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  373.  out:
  374. 	free(file);
  375. 	sshkey_free(pub);
        ^
  376. 	return r;
  377. }

#351
channels.c:389: error: Uninitialized Value
  The value read from found was never initialized.
  387. 	c->istate = CHAN_INPUT_OPEN;
  388. 	channel_register_fds(ssh, c, rfd, wfd, efd, extusage, nonblock, 0);
  389. 	c->self = found;
        ^
  390. 	c->type = type;
  391. 	c->ctype = ctype;

#352
channels.c:399: error: Uninitialized Value
  The value read from found was never initialized.
  397. 	c->delayed = 1;		/* prevent call to channel_post handler */
  398. 	TAILQ_INIT(&c->status_confirms);
  399. 	debug("channel %d: new [%s]", found, remote_name);
        ^
  400. 	return c;
  401. }

#353
auth2.c:418: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  416. 		    &dispatch_protocol_ignore);
  417. 		if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_SUCCESS)) != 0 ||
  418. 		    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  419. 		    (r = ssh_packet_write_wait(ssh)) != 0)
  420. 			fatal("%s: %s", __func__, ssh_err(r));

#354
auth2.c:386: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `auth2_update_session_info`.
  384. 	/* Update information exposed to session */
  385. 	if (authenticated || partial)
  386. 		auth2_update_session_info(authctxt, method, submethod);
         ^
  387. 
  388. 	if (authctxt->postponed)

#355
auth2.c:417: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  415. 		ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_REQUEST,
  416. 		    &dispatch_protocol_ignore);
  417. 		if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_SUCCESS)) != 0 ||
                  ^
  418. 		    (r = sshpkt_send(ssh)) != 0 ||
  419. 		    (r = ssh_packet_write_wait(ssh)) != 0)

#356
openbsd-compat/sha2.c:358: error: Buffer Overrun L3
  Offset added: 128 Size: [0, +oo].
  356. 	memcpy(context->state.st32, sha256_initial_hash_value,
  357. 	    sizeof(sha256_initial_hash_value));
  358. 	memset(context->buffer, 0, sizeof(context->buffer));
        ^
  359. 	context->bitcount[0] = 0;
  360. }

#357
ssh-agent.c:373: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `free_identity`.
  371. 		    __func__, idtab->nentries);
  372. 	TAILQ_REMOVE(&idtab->idlist, id, next);
  373. 	free_identity(id);
        ^
  374. 	idtab->nentries--;
  375. 	sshkey_free(key);

#358
sntrup4591761.c:388: error: Buffer Overrun L2
  Offset: [1, 1519] Size: 761 by call to `rq_mult`.
  386. 
  387.   rq_decode(h,pk);
  388.   rq_mult(c,h,r);
         ^
  389.   rq_round3(c,c);
  390. 

#359
sntrup4591761.c:388: error: Buffer Overrun L3
  Offset: [-760, 760] Size: 761 by call to `rq_mult`.
  386. 
  387.   rq_decode(h,pk);
  388.   rq_mult(c,h,r);
         ^
  389.   rq_round3(c,c);
  390. 

#360
krl.c:379: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  377. 	if (sshkey_is_cert(kcopy)) {
  378. 		if ((r = sshkey_drop_cert(kcopy)) != 0) {
  379. 			sshkey_free(kcopy);
          ^
  380. 			return r;
  381. 		}

#361
sshconnect2.c:412: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  410. 	if ((r = sshpkt_start(ssh, SSH2_MSG_SERVICE_REQUEST)) != 0 ||
  411. 	    (r = sshpkt_put_cstring(ssh, "ssh-userauth")) != 0 ||
  412. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  413. 		fatal("%s: %s", __func__, ssh_err(r));
  414. 

#362
sshconnect2.c:411: error: Integer Overflow L2
  ([0, +oo] - [4, 16]):unsigned64 by call to `sshpkt_put_cstring`.
  409. 
  410. 	if ((r = sshpkt_start(ssh, SSH2_MSG_SERVICE_REQUEST)) != 0 ||
  411. 	    (r = sshpkt_put_cstring(ssh, "ssh-userauth")) != 0 ||
                 ^
  412. 	    (r = sshpkt_send(ssh)) != 0)
  413. 		fatal("%s: %s", __func__, ssh_err(r));

#363
auth.c:386: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  384. 	    ssh_remote_ipaddr(ssh),
  385. 	    ssh_remote_port(ssh));
  386. 	ssh_packet_disconnect(ssh, "Too many authentication failures");
        ^
  387. 	/* NOTREACHED */
  388. }

#364
auth.c:386: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  384. 	    ssh_remote_ipaddr(ssh),
  385. 	    ssh_remote_port(ssh));
  386. 	ssh_packet_disconnect(ssh, "Too many authentication failures");
        ^
  387. 	/* NOTREACHED */
  388. }

#365
sshd.c:385: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  383. 	for (i = 0; i < options.num_host_key_files; i++) {
  384. 		if (sensitive_data.host_keys[i]) {
  385. 			sshkey_free(sensitive_data.host_keys[i]);
          ^
  386. 			sensitive_data.host_keys[i] = NULL;
  387. 		}

#366
authfile.c:416: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `sshkey_cert_copy`.
  414. 
  415. 	if ((r = sshkey_to_certified(key)) != 0 ||
  416. 	    (r = sshkey_cert_copy(cert, key)) != 0)
                 ^
  417. 		goto out;
  418. 	r = 0;

#367
authfile.c:424: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshkey_free`.
  422. 	}
  423.  out:
  424. 	sshkey_free(key);
        ^
  425. 	sshkey_free(cert);
  426. 	return r;

#368
ssh-agent.c:390: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `free_identity`.
  388. 	    id = TAILQ_FIRST(&idtab->idlist)) {
  389. 		TAILQ_REMOVE(&idtab->idlist, id, next);
  390. 		free_identity(id);
         ^
  391. 	}
  392. 

#369
authfd.c:419: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_string`.
  417. 		goto out;
  418. 	}
  419. 	if ((r = sshbuf_get_string(msg, &sig, &len)) != 0)
                 ^
  420. 		goto out;
  421. 	/* Check what we actually got back from the agent. */

#370
authfd.c:393: error: Dead Store
  The value written to &r (type int) is never used.
  391. 	size_t len = 0;
  392. 	u_int flags = 0;
  393. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  394. 
  395. 	*sigp = NULL;

#371
sshsig.c:391: error: Dead Store
  The value written to &r (type int) is never used.
  389. {
  390. 	char *hex, hash[SSH_DIGEST_MAX_LENGTH];
  391. 	int alg, r = SSH_ERR_INTERNAL_ERROR;
        ^
  392. 	struct sshbuf *b = NULL;
  393. 

#372
sshsig.c:413: error: Dead Store
  The value written to &r (type int) is never used.
  411. 	}
  412. 	if ((b = sshbuf_new()) == NULL) {
  413. 		r = SSH_ERR_ALLOC_FAIL;
         ^
  414. 		goto out;
  415. 	}

#373
openbsd-compat/sha2.c:427: error: Buffer Overrun L2
  Offset: [23, 70] Size: 64.
  425. 		ROUND256(d,e,f,g,h,a,b,c);
  426. 		ROUND256(c,d,e,f,g,h,a,b);
  427. 		ROUND256(b,c,d,e,f,g,h,a);
         ^
  428. 	} while (j < 64);
  429. 

#374
openbsd-compat/sha2.c:415: error: Buffer Overrun L2
  Offset: [7, 22] Size: 16.
  413. 		ROUND256_0_TO_15(d,e,f,g,h,a,b,c);
  414. 		ROUND256_0_TO_15(c,d,e,f,g,h,a,b);
  415. 		ROUND256_0_TO_15(b,c,d,e,f,g,h,a);
         ^
  416. 	} while (j < 16);
  417. 

#375
openbsd-compat/sha2.c:441: error: Dead Store
  The value written to &a (type unsigned int) is never used.
  439. 
  440. 	/* Clean up */
  441. 	a = b = c = d = e = f = g = h = T1 = 0;
        ^
  442. }
  443. 

#376
sshbuf-getput-basic.c:397: error: Null Dereference
  pointer `p` last assigned on line 395 could be null and is dereferenced at line 397, column 2.
  395. 	if ((r = sshbuf_reserve(buf, 8, &p)) < 0)
  396. 		return r;
  397. 	POKE_U64(p, val);
        ^
  398. 	return 0;
  399. }

#377
serverloop.c:448: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_after_select`.
  446. 		collect_children(ssh);
  447. 		if (!ssh_packet_is_rekeying(ssh))
  448. 			channel_after_select(ssh, readset, writeset);
          ^
  449. 		if (process_input(ssh, readset, connection_in) < 0)
  450. 			break;

#378
sshd.c:405: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `sshkey_from_private`.
  403. 	for (i = 0; i < options.num_host_key_files; i++) {
  404. 		if (sensitive_data.host_keys[i]) {
  405. 			if ((r = sshkey_from_private(
                   ^
  406. 			    sensitive_data.host_keys[i], &tmp)) != 0)
  407. 				fatal("could not demote host %s key: %s",

#379
sshd.c:410: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  408. 				    sshkey_type(sensitive_data.host_keys[i]),
  409. 				    ssh_err(r));
  410. 			sshkey_free(sensitive_data.host_keys[i]);
          ^
  411. 			sensitive_data.host_keys[i] = tmp;
  412. 		}

#380
log.c:456: error: Buffer Overrun L2
  Offset: [0, 1026] Size: 1024 by call to `strnvis`.
  454. 		vsnprintf(msgbuf, sizeof(msgbuf), fmt, args);
  455. 	}
  456. 	strnvis(fmtbuf, msgbuf, sizeof(fmtbuf),
        ^
  457. 	    log_on_stderr ? LOG_STDERR_VIS : LOG_SYSLOG_VIS);
  458. 	if (log_handler != NULL) {

#381
log.c:409: error: Dead Store
  The value written to &pri (type int) is never used.
  407. 	char fmtbuf[MSGBUFSIZ];
  408. 	char *txt = NULL;
  409. 	int pri = LOG_INFO;
        ^
  410. 	int saved_errno = errno;
  411. 	log_handler_fn *tmp_handler;

#382
ssh-agent.c:414: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `free_identity`.
  412. 			debug("expiring key '%s'", id->comment);
  413. 			TAILQ_REMOVE(&idtab->idlist, id, next);
  414. 			free_identity(id);
          ^
  415. 			idtab->nentries--;
  416. 		} else

#383
sshbuf-getput-basic.c:409: error: Null Dereference
  pointer `p` last assigned on line 407 could be null and is dereferenced at line 409, column 2.
  407. 	if ((r = sshbuf_reserve(buf, 4, &p)) < 0)
  408. 		return r;
  409. 	POKE_U32(p, val);
        ^
  410. 	return 0;
  411. }

#384
ssh-rsa.c:413: error: Dead Store
  The value written to &ret (type int) is never used.
  411. 	if ((ret = rsa_hash_alg_oid(hash_alg, &oid, &oidlen)) != 0)
  412. 		return ret;
  413. 	ret = SSH_ERR_INTERNAL_ERROR;
        ^
  414. 	hlen = ssh_digest_bytes(hash_alg);
  415. 	if (hashlen != hlen) {

#385
ssh-add.c:410: error: Dead Store
  The value written to &ret (type int) is never used.
  408. {
  409. 	char *pin = NULL;
  410. 	int r, ret = -1;
        ^
  411. 
  412. 	if (add) {

#386
kex.c:415: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  413. 	if ((r = sshpkt_start(ssh, SSH2_MSG_UNIMPLEMENTED)) != 0 ||
  414. 	    (r = sshpkt_put_u32(ssh, seq)) != 0 ||
  415. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  416. 		return r;
  417. 	return 0;

#387
kex.c:414: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  412. 	error("kex protocol error: type %d seq %u", type, seq);
  413. 	if ((r = sshpkt_start(ssh, SSH2_MSG_UNIMPLEMENTED)) != 0 ||
  414. 	    (r = sshpkt_put_u32(ssh, seq)) != 0 ||
                 ^
  415. 	    (r = sshpkt_send(ssh)) != 0)
  416. 		return r;

#388
kex.c:413: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  411. 
  412. 	error("kex protocol error: type %d seq %u", type, seq);
  413. 	if ((r = sshpkt_start(ssh, SSH2_MSG_UNIMPLEMENTED)) != 0 ||
                 ^
  414. 	    (r = sshpkt_put_u32(ssh, seq)) != 0 ||
  415. 	    (r = sshpkt_send(ssh)) != 0)

#389
sntrup4591761.c:424: error: Buffer Overrun L2
  Offset: [1, 1519] Size: 761 by call to `rq_mult`.
  422.   rq_recip3(f3recip,f);
  423. 
  424.   rq_mult(h,f3recip,g);
         ^
  425. 
  426.   rq_encode(pk,h);

#390
sntrup4591761.c:424: error: Buffer Overrun L3
  Offset: [-760, 760] Size: 761 by call to `rq_mult`.
  422.   rq_recip3(f3recip,f);
  423. 
  424.   rq_mult(h,f3recip,g);
         ^
  425. 
  426.   rq_encode(pk,h);

#391
ssh-keygen.c:426: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `do_convert_to_ssh2`.
  424. 	switch (convert_format) {
  425. 	case FMT_RFC4716:
  426. 		do_convert_to_ssh2(pw, k);
         ^
  427. 		break;
  428. 	case FMT_PKCS8:

#392
sshbuf-getput-basic.c:421: error: Null Dereference
  pointer `p` last assigned on line 419 could be null and is dereferenced at line 421, column 2.
  419. 	if ((r = sshbuf_reserve(buf, 2, &p)) < 0)
  420. 		return r;
  421. 	POKE_U16(p, val);
        ^
  422. 	return 0;
  423. }

#393
monitor.c:444: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  442. 		fatal("%s: log fd read: %s", __func__, strerror(errno));
  443. 	}
  444. 	if ((r = sshbuf_get_u32(logmsg, &len)) != 0)
                 ^
  445. 		fatal("%s: get len: %s", __func__, ssh_err(r));
  446. 	if (len <= 4 || len > 8192)

#394
openbsd-compat/blowfish.c:447: error: Buffer Overrun L2
  Offset: [1, 18] Size: 18.
  445. 
  446. 		c->P[i] = datal;
  447. 		c->P[i + 1] = datar;
         ^
  448. 	}
  449. 

#395
openbsd-compat/blowfish.c:455: error: Buffer Overrun L2
  Offset: [1, 256] Size: 256.
  453. 
  454. 			c->S[i][k] = datal;
  455. 			c->S[i][k + 1] = datar;
          ^
  456. 		}
  457. 	}

#396
ssh-keyscan.c:435: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_close`.
  433. 	fdcon[s].c_keytype = 0;
  434. 	if (fdcon[s].c_ssh) {
  435. 		ssh_packet_close(fdcon[s].c_ssh);
         ^
  436. 		free(fdcon[s].c_ssh);
  437. 		fdcon[s].c_ssh = NULL;

#397
auth.c:440: error: Buffer Overrun L3
  Offset: 0 Size: [0, 18446744073709551616] by call to `path_absolute`.
  438. 	 * compatible and prepend the '%h/'
  439. 	 */
  440. 	if (path_absolute(file))
            ^
  441. 		return (file);
  442. 

#398
sshbuf-getput-basic.c:433: error: Null Dereference
  pointer `p` last assigned on line 431 could be null and is dereferenced at line 433, column 2.
  431. 	if ((r = sshbuf_reserve(buf, 1, &p)) < 0)
  432. 		return r;
  433. 	p[0] = val;
        ^
  434. 	return 0;
  435. }

#399
ssh-agent.c:527: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sshkey_shield_private`.
  525. 		}
  526. 	}
  527. 	if ((r = sshkey_shield_private(k)) != 0) {
                 ^
  528. 		error("%s: shield private key: %s", __func__, ssh_err(r));
  529. 		goto err;

#400
ssh-agent.c:527: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `sshkey_shield_private`.
  525. 		}
  526. 	}
  527. 	if ((r = sshkey_shield_private(k)) != 0) {
                 ^
  528. 		error("%s: shield private key: %s", __func__, ssh_err(r));
  529. 		goto err;

#401
ssh-agent.c:436: error: Dead Store
  The value written to &r (type int) is never used.
  434. 	struct sshkey *k = NULL;
  435. 	u_char ctype;
  436. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  437. 
  438. 	if ((r = sshkey_private_deserialize(e->request, &k)) != 0 ||

#402
ssh-agent.c:542: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  540. 	} else {
  541. 		/* key state might have been updated */
  542. 		sshkey_free(id->key);
         ^
  543. 		free(id->comment);
  544. 		free(id->sk_provider);

#403
ssh-agent.c:555: error: Uninitialized Value
  The value read from seconds was never initialized.
  553. 	    SSH_FP_DEFAULT)) == NULL)
  554. 		fatal("%s: sshkey_fingerprint failed", __func__);
  555. 	debug("%s: add %s %s \"%.100s\" (life: %u) (confirm: %u) "
        ^
  556. 	    "(provider: %s)", __func__, sshkey_ssh_name(k), fp, comment,
  557. 	    seconds, confirm, sk_provider == NULL ? "none" : sk_provider);

#404
sshsig.c:436: error: Dead Store
  The value written to &r (type int) is never used.
  434. {
  435. 	struct sshbuf *b = NULL;
  436. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  437. 
  438. 	if (hashalg == NULL)

#405
sshsig.c:452: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  450. 	r = 0;
  451.  out:
  452. 	sshbuf_free(b);
        ^
  453. 	return r;
  454. }

#406
ssh-add.c:454: error: Buffer Overrun L3
  Offset: [0, 31] Size: [0, +oo] by call to `sshkey_verify`.
  452. 		goto done;
  453. 	}
  454. 	if ((r = sshkey_verify(key, sig, slen, data, sizeof(data),
                 ^
  455. 	    NULL, 0, NULL)) != 0) {
  456. 		error("Signature verification failed for %s: %s",

#407
ssh-add.c:454: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_verify`.
  452. 		goto done;
  453. 	}
  454. 	if ((r = sshkey_verify(key, sig, slen, data, sizeof(data),
                 ^
  455. 	    NULL, 0, NULL)) != 0) {
  456. 		error("Signature verification failed for %s: %s",

#408
ssh-add.c:464: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  462.  done:
  463. 	free(sig);
  464. 	sshkey_free(key);
        ^
  465. 	return ret;
  466. }

#409
authfile.c:454: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  452. 
  453. 	while (getline(&line, &linesize, f) != -1) {
  454. 		sshkey_free(pub);
         ^
  455. 		pub = NULL;
  456. 		cp = line;

#410
sntrup4591761.c:458: error: Uninitialized Value
  The value read from fg[_] was never initialized.
  456. 
  457.   for (i = p + p - 2;i >= p;--i) {
  458.     fg[i - p] = mod3_sum(fg[i - p],fg[i]);
                       ^
  459.     fg[i - p + 1] = mod3_sum(fg[i - p + 1],fg[i]);
  460.   }

#411
sntrup4591761.c:463: error: Uninitialized Value
  The value read from fg[_] was never initialized.
  461. 
  462.   for (i = 0;i < p;++i)
  463.     h[i] = fg[i];
           ^
  464. }
  465. 

#412
ssh-keygen.c:453: error: Integer Overflow L2
  ([0, `b->size`] - [0, `b->off` + 4]):unsigned64 by call to `sshbuf_len`.
  451. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  452. 	bytes = (bignum_bits + 7) / 8;
  453. 	if (sshbuf_len(b) < bytes)
            ^
  454. 		fatal("%s: input buffer too small: need %d have %zu",
  455. 		    __func__, bytes, sshbuf_len(b));

#413
ssh-sk.c:452: error: Dead Store
  The value written to &r (type int) is never used.
  450. {
  451. 	struct sshbuf *inner_sig = NULL;
  452. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  453. 
  454. 	/* Check response validity */

#414
kex.c:459: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  457. 	kex_reset_dispatch(ssh);
  458. 	if ((r = sshpkt_start(ssh, SSH2_MSG_NEWKEYS)) != 0 ||
  459. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  460. 		return r;
  461. 	debug("SSH2_MSG_NEWKEYS sent");

#415
kex.c:458: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  456. 
  457. 	kex_reset_dispatch(ssh);
  458. 	if ((r = sshpkt_start(ssh, SSH2_MSG_NEWKEYS)) != 0 ||
                 ^
  459. 	    (r = sshpkt_send(ssh)) != 0)
  460. 		return r;

#416
krl.c:462: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `ssh_krl_revoke_cert_by_key_id`.
  460. 
  461. 	if (key->cert->serial == 0) {
  462. 		return ssh_krl_revoke_cert_by_key_id(krl,
                ^
  463. 		    key->cert->signature_key,
  464. 		    key->cert->key_id);

#417
krl.c:466: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `ssh_krl_revoke_cert_by_serial`.
  464. 		    key->cert->key_id);
  465. 	} else {
  466. 		return ssh_krl_revoke_cert_by_serial(krl,
                ^
  467. 		    key->cert->signature_key,
  468. 		    key->cert->serial);

#418
sshsig.c:462: error: Dead Store
  The value written to &r (type int) is never used.
  460. {
  461. 	struct sshbuf *b = NULL;
  462. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  463. 	char *hashalg = NULL;
  464. 

#419
sshsig.c:482: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  480. 	r = 0;
  481.  out:
  482. 	sshbuf_free(b);
        ^
  483. 	free(hashalg);
  484. 	return r;

#420
openbsd-compat/blowfish.c:488: error: Buffer Overrun L2
  Offset: [1, 18] Size: 18.
  486. 
  487. 		c->P[i] = datal;
  488. 		c->P[i + 1] = datar;
         ^
  489. 	}
  490. 

#421
openbsd-compat/blowfish.c:498: error: Buffer Overrun L2
  Offset: [1, 256] Size: 256.
  496. 
  497. 			c->S[i][k] = datal;
  498. 			c->S[i][k + 1] = datar;
          ^
  499. 		}
  500. 	}

#422
ssh-keygen.c:584: error: Buffer Overrun L3
  Offset: [0, 31] Size: [0, +oo] by call to `sshkey_verify`.
  582. 	if (sshkey_sign(key, &sig, &slen, data, sizeof(data),
  583. 	    NULL, NULL, 0) != 0 ||
  584. 	    sshkey_verify(key, sig, slen, data, sizeof(data),
            ^
  585. 	    NULL, 0, NULL) != 0) {
  586. 		sshkey_free(key);

#423
ssh-keygen.c:584: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_verify`.
  582. 	if (sshkey_sign(key, &sig, &slen, data, sizeof(data),
  583. 	    NULL, NULL, 0) != 0 ||
  584. 	    sshkey_verify(key, sig, slen, data, sizeof(data),
            ^
  585. 	    NULL, 0, NULL) != 0) {
  586. 		sshkey_free(key);

#424
ssh-keygen.c:528: error: Dead Store
  The value written to &dsa_p (type bignum_st*) is never used.
  526. 		if (!DSA_set0_pqg(key->dsa, dsa_p, dsa_q, dsa_g))
  527. 			fatal("%s: DSA_set0_pqg failed", __func__);
  528. 		dsa_p = dsa_q = dsa_g = NULL; /* transferred */
         ^
  529. 		if (!DSA_set0_key(key->dsa, dsa_pub_key, dsa_priv_key))
  530. 			fatal("%s: DSA_set0_key failed", __func__);

#425
ssh-keygen.c:531: error: Dead Store
  The value written to &dsa_pub_key (type bignum_st*) is never used.
  529. 		if (!DSA_set0_key(key->dsa, dsa_pub_key, dsa_priv_key))
  530. 			fatal("%s: DSA_set0_key failed", __func__);
  531. 		dsa_pub_key = dsa_priv_key = NULL; /* transferred */
         ^
  532. 		break;
  533. 	case KEY_RSA:

#426
ssh-keygen.c:568: error: Dead Store
  The value written to &rsa_n (type bignum_st*) is never used.
  566. 		if (!RSA_set0_key(key->rsa, rsa_n, rsa_e, rsa_d))
  567. 			fatal("%s: RSA_set0_key failed", __func__);
  568. 		rsa_n = rsa_e = rsa_d = NULL; /* transferred */
         ^
  569. 		if (!RSA_set0_factors(key->rsa, rsa_p, rsa_q))
  570. 			fatal("%s: RSA_set0_factors failed", __func__);

#427
ssh-keygen.c:571: error: Dead Store
  The value written to &rsa_p (type bignum_st*) is never used.
  569. 		if (!RSA_set0_factors(key->rsa, rsa_p, rsa_q))
  570. 			fatal("%s: RSA_set0_factors failed", __func__);
  571. 		rsa_p = rsa_q = NULL; /* transferred */
         ^
  572. 		if ((r = ssh_rsa_complete_crt_parameters(key, rsa_iqmp)) != 0)
  573. 			fatal("generate RSA parameters failed: %s", ssh_err(r));

#428
ssh-keygen.c:552: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  550. 		if (!BN_set_word(rsa_e, e)) {
  551. 			BN_clear_free(rsa_e);
  552. 			sshkey_free(key);
          ^
  553. 			return NULL;
  554. 		}

#429
ssh-keygen.c:486: error: Integer Overflow L2
  ([0, `b->size`] - [0, `b->off` + 8]):unsigned64 by call to `sshbuf_get_cstring`.
  484. 	}
  485. 	if ((r = sshbuf_get_u32(b, &i1)) != 0 ||
  486. 	    (r = sshbuf_get_cstring(b, &type, NULL)) != 0 ||
                 ^
  487. 	    (r = sshbuf_get_cstring(b, &cipher, NULL)) != 0 ||
  488. 	    (r = sshbuf_get_u32(b, &i2)) != 0 ||

#430
ssh-keygen.c:542: error: Uninitialized Value
  The value read from e2 was never initialized.
  540. 		if (e < 30) {
  541. 			e <<= 8;
  542. 			e += e2;
          ^
  543. 			debug("e %lx", e);
  544. 			e <<= 8;

#431
ssh-keygen.c:545: error: Uninitialized Value
  The value read from e3 was never initialized.
  543. 			debug("e %lx", e);
  544. 			e <<= 8;
  545. 			e += e3;
          ^
  546. 			debug("e %lx", e);
  547. 		}

#432
ssh-keyscan.c:537: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `keygrab_ssh2`.
  535. 	fprintf(stderr, "%c %s:%d %s\n", print_sshfp ? ';' : '#',
  536. 	    c->c_name, ssh_port, chop(buf));
  537. 	keygrab_ssh2(c);
        ^
  538. 	confree(s);
  539. }

#433
ssh-keyscan.c:515: error: Uninitialized Value
  The value read from *cp was never initialized.
  513. 		return;
  514. 	}
  515. 	if (*cp != '\n' && *cp != '\r') {
            ^
  516. 		error("%s: bad greeting", c->c_name);
  517. 		confree(s);

#434
ssh-keyscan.c:515: error: Uninitialized Value
  The value read from *cp was never initialized.
  513. 		return;
  514. 	}
  515. 	if (*cp != '\n' && *cp != '\r') {
                           ^
  516. 		error("%s: bad greeting", c->c_name);
  517. 		confree(s);

#435
ssh-add.c:507: error: Buffer Overrun L3
  Offset: [0, 2047] Size: [0, 2048] by call to `ssh_free_identitylist`.
  505. 		}
  506. 	}
  507. 	ssh_free_identitylist(idlist);
        ^
  508. 	return 0;
  509. }

#436
authfd.c:528: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  526. 	r = decode_reply(type);
  527.  out:
  528. 	sshbuf_free(msg);
        ^
  529. 	return r;
  530. }

#437
authfd.c:519: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `encode_constraints`.
  517. 	}
  518. 	if (constrained &&
  519. 	    (r = encode_constraints(msg, life, confirm, maxsign,
                 ^
  520. 	    provider)) != 0)
  521. 		goto out;

#438
authfd.c:522: error: Integer Overflow L2
  ([0, +oo] - [1, 1024]):unsigned64 by call to `ssh_request_reply`.
  520. 	    provider)) != 0)
  521. 		goto out;
  522. 	if ((r = ssh_request_reply(sock, msg, msg)) != 0)
                 ^
  523. 		goto out;
  524. 	if ((r = sshbuf_get_u8(msg, &type)) != 0)

#439
authfd.c:511: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `comment->strlen`)]):unsigned64 by call to `sshbuf_put_cstring`.
  509. 		    (r = sshkey_private_serialize_maxsign(key, msg, maxsign,
  510. 		    NULL)) != 0 ||
  511. 		    (r = sshbuf_put_cstring(msg, comment)) != 0)
                  ^
  512. 			goto out;
  513. 		break;

#440
authfd.c:519: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `provider->strlen`)]):unsigned64 by call to `encode_constraints`.
  517. 	}
  518. 	if (constrained &&
  519. 	    (r = encode_constraints(msg, life, confirm, maxsign,
                 ^
  520. 	    provider)) != 0)
  521. 		goto out;

#441
serverloop.c:491: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  489. 	    (r = sshpkt_get_u32(ssh, &originator_port)) != 0 ||
  490. 	    (r = sshpkt_get_end(ssh)) != 0)
  491. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
         ^
  492. 	if (target_port > 0xFFFF) {
  493. 		error("%s: invalid target port", __func__);

#442
krl.c:542: error: Dead Store
  The value written to &cost (type unsigned long) is never used.
  540. 		new_state = KRL_SECTION_CERT_SERIAL_BITMAP;
  541. 		*force_new_section = 1;
  542. 		cost = cost_bitmap_restart;
         ^
  543. 	}
  544. 	KRL_DBG(("%s: contig %llu last_gap %llu next_gap %llu final %d, costs:"

#443
readconf.c:523: error: Unreachable Code
  Unreachable code after statement.
  521. 		signal(SIGTERM, SIG_DFL);
  522. 		kill(getpid(), SIGTERM);
  523. 		_exit(1);
         ^
  524. 	}
  525. 	/* Parent. */

#444
sftp-server.c:491: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_stringb`.
  489. 	int r;
  490. 
  491. 	if ((r = sshbuf_put_stringb(oqueue, m)) != 0)
                 ^
  492. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  493. 	sshbuf_reset(m);

#445
clientloop.c:499: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  497. 	    (r = sshpkt_put_cstring(ssh, "keepalive@openssh.com")) != 0 ||
  498. 	    (r = sshpkt_put_u8(ssh, 1)) != 0 ||		/* boolean: want reply */
  499. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  500. 		fatal("%s: send packet: %s", __func__, ssh_err(r));
  501. 	/* Insert an empty placeholder to maintain ordering */

#446
clientloop.c:498: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  496. 	if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
  497. 	    (r = sshpkt_put_cstring(ssh, "keepalive@openssh.com")) != 0 ||
  498. 	    (r = sshpkt_put_u8(ssh, 1)) != 0 ||		/* boolean: want reply */
                 ^
  499. 	    (r = sshpkt_send(ssh)) != 0)
  500. 		fatal("%s: send packet: %s", __func__, ssh_err(r));

#447
clientloop.c:496: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  494. 		cleanup_exit(255);
  495. 	}
  496. 	if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
                 ^
  497. 	    (r = sshpkt_put_cstring(ssh, "keepalive@openssh.com")) != 0 ||
  498. 	    (r = sshpkt_put_u8(ssh, 1)) != 0 ||		/* boolean: want reply */

#448
clientloop.c:497: error: Integer Overflow L2
  ([0, +oo] - [4, 25]):unsigned64 by call to `sshpkt_put_cstring`.
  495. 	}
  496. 	if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
  497. 	    (r = sshpkt_put_cstring(ssh, "keepalive@openssh.com")) != 0 ||
                 ^
  498. 	    (r = sshpkt_put_u8(ssh, 1)) != 0 ||		/* boolean: want reply */
  499. 	    (r = sshpkt_send(ssh)) != 0)

#449
sshsig.c:493: error: Dead Store
  The value written to &r (type int) is never used.
  491. 	ssize_t n, total = 0;
  492. 	struct ssh_digest_ctx *ctx;
  493. 	int alg, oerrno, r = SSH_ERR_INTERNAL_ERROR;
        ^
  494. 	struct sshbuf *b = NULL;
  495. 

#450
sshsig.c:518: error: Dead Store
  The value written to &r (type int) is never used.
  516. 			ssh_digest_free(ctx);
  517. 			errno = oerrno;
  518. 			r = SSH_ERR_SYSTEM_ERROR;
          ^
  519. 			goto out;
  520. 		} else if (n == 0) {

#451
sshsig.c:540: error: Dead Store
  The value written to &r (type int) is never used.
  538. 	}
  539. 	if ((b = sshbuf_new()) == NULL) {
  540. 		r = SSH_ERR_ALLOC_FAIL;
         ^
  541. 		goto out;
  542. 	}

#452
ssh-sk.c:496: error: Dead Store
  The value written to &r (type int) is never used.
  494. sshsk_ed25519_sig(struct sk_sign_response *resp, struct sshbuf *sig)
  495. {
  496. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  497. 
  498. 	/* Check response validity */

#453
ssh-sk.c:501: error: Dead Store
  The value written to &r (type int) is never used.
  499. 	if (resp->sig_r == NULL) {
  500. 		error("%s: sk_sign response invalid", __func__);
  501. 		r = SSH_ERR_INVALID_FORMAT;
         ^
  502. 		goto out;
  503. 	}

#454
clientloop.c:520: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_prepare_select`.
  518. 
  519. 	/* Add any selections by the channel mechanism. */
  520. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  521. 	    nallocp, &minwait_secs);
  522. 

#455
clientloop.c:520: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `channel_prepare_select`.
  518. 
  519. 	/* Add any selections by the channel mechanism. */
  520. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  521. 	    nallocp, &minwait_secs);
  522. 

#456
clientloop.c:520: error: Integer Overflow L2
  ([0, +oo] - 2):unsigned64 by call to `channel_prepare_select`.
  518. 
  519. 	/* Add any selections by the channel mechanism. */
  520. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  521. 	    nallocp, &minwait_secs);
  522. 

#457
clientloop.c:520: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `channel_prepare_select`.
  518. 
  519. 	/* Add any selections by the channel mechanism. */
  520. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  521. 	    nallocp, &minwait_secs);
  522. 

#458
clientloop.c:520: error: Integer Overflow L2
  ([0, +oo] - 8):unsigned64 by call to `channel_prepare_select`.
  518. 
  519. 	/* Add any selections by the channel mechanism. */
  520. 	channel_prepare_select(ssh, readsetp, writesetp, maxfdp,
        ^
  521. 	    nallocp, &minwait_secs);
  522. 

#459
auth-options.c:515: error: Dead Store
  The value written to &errstr (type char*) is never used.
  513. {
  514. 	struct sshauthopt *ret;
  515. 	const char *errstr = "internal error";
        ^
  516. 	const char *tmp;
  517. 

#460
sshbuf-getput-basic.c:523: error: Null Dereference
  pointer `d` last assigned on line 521 could be null and is dereferenced at line 523, column 2.
  521. 	if ((r = sshbuf_reserve(buf, len + 4, &d)) < 0)
  522. 		return r;
  523. 	POKE_U32(d, len);
        ^
  524. 	if (len != 0)
  525. 		memcpy(d + 4, v, len);

#461
ssh-sk.c:591: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `sshsk_ecdsa_sig`.
  589. #ifdef WITH_OPENSSL
  590. 	case KEY_ECDSA_SK:
  591. 		if ((r = sshsk_ecdsa_sig(resp, sig)) != 0)
                  ^
  592. 			goto out;
  593. 		break;

#462
ssh-sk.c:526: error: Dead Store
  The value written to &r (type int) is never used.
  524. {
  525. 	struct sshsk_provider *skp = NULL;
  526. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  527. 	int type, alg;
  528. 	struct sk_sign_response *resp = NULL;

#463
ssh-sk.c:624: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  622. 	sshsk_free_sign_response(resp);
  623. 	sshbuf_free(sig);
  624. 	sshbuf_free(inner_sig);
        ^
  625. 	return r;
  626. }

#464
sshkey.c:531: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `cert_free`.
  529. 	    (cert->critical = sshbuf_new()) == NULL ||
  530. 	    (cert->extensions = sshbuf_new()) == NULL) {
  531. 		cert_free(cert);
         ^
  532. 		return NULL;
  533. 	}

#465
openbsd-compat/sha2.c:548: error: Dead Store
  The value written to &usedspace (type unsigned long) is never used.
  546. 			context->bitcount[0] += (u_int64_t)len << 3;
  547. 			/* Clean up: */
  548. 			usedspace = freespace = 0;
          ^
  549. 			return;
  550. 		}

#466
openbsd-compat/sha2.c:565: error: Dead Store
  The value written to &usedspace (type unsigned long) is never used.
  563. 	}
  564. 	/* Clean up: */
  565. 	usedspace = freespace = 0;
        ^
  566. }
  567. DEF_WEAK(SHA256Update);

#467
serverloop.c:542: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  540. 	    (r = sshpkt_get_u32(ssh, &originator_port)) != 0 ||
  541. 	    (r = sshpkt_get_end(ssh)) != 0)
  542. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
         ^
  543. 	if (originator_port > 0xFFFF) {
  544. 		error("%s: invalid originator port", __func__);

#468
kex.c:560: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  558. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEXINIT)) != 0 ||
  559. 	    (r = sshpkt_putb(ssh, kex->my)) != 0 ||
  560. 	    (r = sshpkt_send(ssh)) != 0) {
                 ^
  561. 		error("%s: compose reply: %s", __func__, ssh_err(r));
  562. 		return r;

#469
kex.c:558: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  556. 	arc4random_buf(cookie, KEX_COOKIE_LEN);
  557. 
  558. 	if ((r = sshpkt_start(ssh, SSH2_MSG_KEXINIT)) != 0 ||
                 ^
  559. 	    (r = sshpkt_putb(ssh, kex->my)) != 0 ||
  560. 	    (r = sshpkt_send(ssh)) != 0) {

#470
authfd.c:565: error: Uninitialized Value
  The value read from blen was never initialized.
  563.  out:
  564. 	if (blob != NULL) {
  565. 		explicit_bzero(blob, blen);
         ^
  566. 		free(blob);
  567. 	}

#471
sshkey.c:604: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  602. 	if (sshkey_is_cert(k)) {
  603. 		if ((k->cert = cert_new()) == NULL) {
  604. 			sshkey_free(k);
          ^
  605. 			return NULL;
  606. 		}

#472
ssh-add.c:583: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  581. 		}
  582. 		free(fp);
  583. 		sshkey_free(keys[i]);
         ^
  584. 	}
  585. 	free(keys);

#473
ssh-add.c:560: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssh_add_identity_constrained`.
  558. 		    fingerprint_hash, SSH_FP_DEFAULT)) == NULL)
  559. 			fatal("%s: sshkey_fingerprint failed", __func__);
  560. 		if ((r = ssh_add_identity_constrained(agent_fd, keys[i], "",
                  ^
  561. 		    lifetime, confirm, maxsign, skprovider)) != 0) {
  562. 			error("Unable to add key %s %s",

#474
ssh-add.c:560: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_add_identity_constrained`.
  558. 		    fingerprint_hash, SSH_FP_DEFAULT)) == NULL)
  559. 			fatal("%s: sshkey_fingerprint failed", __func__);
  560. 		if ((r = ssh_add_identity_constrained(agent_fd, keys[i], "",
                  ^
  561. 		    lifetime, confirm, maxsign, skprovider)) != 0) {
  562. 			error("Unable to add key %s %s",

#475
monitor_wrap.c:552: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `ssh_packet_get_state`.
  550. 	if ((m = sshbuf_new()) == NULL)
  551. 		fatal("%s: sshbuf_new failed", __func__);
  552. 	if ((r = ssh_packet_get_state(ssh, m)) != 0)
                 ^
  553. 		fatal("%s: get_state failed: %s",
  554. 		    __func__, ssh_err(r));

#476
channels.c:569: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_send`.
  567. 		    channel_rfwd_bind_host(perm->listen_host))) != 0 ||
  568. 		    (r = sshpkt_put_u32(ssh, perm->listen_port)) != 0 ||
  569. 		    (r = sshpkt_send(ssh)) != 0) {
                  ^
  570. 			fatal("%s: channel %i: %s", __func__,
  571. 			    c->self, ssh_err(r));

#477
readconf.c:619: error: Integer Overflow L2
  ([0, 18446744073709551615] + 1):unsigned64 by call to `xstrdup`.
  617. 		}
  618. 		if (strcasecmp(attrib, "host") == 0) {
  619. 			criteria = xstrdup(host);
                     ^
  620. 			r = match_hostname(host, arg) == 1;
  621. 			if (r == (negate ? 1 : 0))

#478
sshsig.c:564: error: Dead Store
  The value written to &r (type int) is never used.
  562. {
  563. 	struct sshbuf *b = NULL;
  564. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  565. 
  566. 	if (hashalg == NULL)

#479
sshsig.c:580: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  578. 	r = 0;
  579.  out:
  580. 	sshbuf_free(b);
        ^
  581. 	return r;
  582. }

#480
monitor_wrap.c:565: error: Dead Store
  The value written to &tmp1 (type int) is never used.
  563. 	struct sshbuf *m;
  564. 	char *p, *msg;
  565. 	int success = 0, tmp1 = -1, tmp2 = -1, r;
        ^
  566. 
  567. 	/* Kludge: ensure there are fds free to receive the pty/tty */

#481
ssh-agent.c:583: error: Integer Overflow L2
  ([1, 32] - [0, 32]):unsigned64 by call to `bcrypt_pbkdf`.
  581. 		debug("empty password not supported");
  582. 	} else if (locked && !lock) {
  583. 		if (bcrypt_pbkdf(passwd, pwlen, lock_salt, sizeof(lock_salt),
             ^
  584. 		    passwdhash, sizeof(passwdhash), LOCK_ROUNDS) < 0)
  585. 			fatal("bcrypt_pbkdf");

#482
ssh-agent.c:606: error: Integer Overflow L2
  ([1, 32] - [0, 32]):unsigned64 by call to `bcrypt_pbkdf`.
  604. 		locked = 1;
  605. 		arc4random_buf(lock_salt, sizeof(lock_salt));
  606. 		if (bcrypt_pbkdf(passwd, pwlen, lock_salt, sizeof(lock_salt),
             ^
  607. 		    lock_pwhash, sizeof(lock_pwhash), LOCK_ROUNDS) < 0)
  608. 			fatal("bcrypt_pbkdf");

#483
serverloop.c:584: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_send_debug`.
  582. 		break;
  583. 	default:
  584. 		ssh_packet_send_debug(ssh, "Unsupported tunnel device mode.");
         ^
  585. 		return NULL;
  586. 	}

#484
serverloop.c:578: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  576. 
  577. 	if ((r = sshpkt_get_u32(ssh, &mode)) != 0)
  578. 		sshpkt_fatal(ssh, r, "%s: parse mode", __func__);
         ^
  579. 	switch (mode) {
  580. 	case SSH_TUNMODE_POINTOPOINT:

#485
serverloop.c:584: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssh_packet_send_debug`.
  582. 		break;
  583. 	default:
  584. 		ssh_packet_send_debug(ssh, "Unsupported tunnel device mode.");
         ^
  585. 		return NULL;
  586. 	}

#486
serverloop.c:584: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_send_debug`.
  582. 		break;
  583. 	default:
  584. 		ssh_packet_send_debug(ssh, "Unsupported tunnel device mode.");
         ^
  585. 		return NULL;
  586. 	}

#487
auth2-pubkey.c:702: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  700. 	sshauthopt_free(certopts);
  701. 	sshauthopt_free(finalopts);
  702. 	sshkey_free(found);
        ^
  703. 	return ret;
  704. }

#488
auth2-pubkey.c:601: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_read`.
  599. 		}
  600. 		skip_space(&cp);
  601. 		if (sshkey_read(found, &cp) != 0) {
             ^
  602. 			/* still no key?  advance to next line*/
  603. 			debug2("%s: advance: '%s'", loc, cp);

#489
monitor.c:582: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 8]):unsigned64 by call to `sshbuf_get_u32`.
  580. 	if ((r = sshbuf_get_u32(m, &min)) != 0 ||
  581. 	    (r = sshbuf_get_u32(m, &want)) != 0 ||
  582. 	    (r = sshbuf_get_u32(m, &max)) != 0)
                 ^
  583. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  584. 

#490
sftp-server.c:590: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `encode_attrib`.
  588. 		if ((r = sshbuf_put_cstring(msg, stats[i].name)) != 0 ||
  589. 		    (r = sshbuf_put_cstring(msg, stats[i].long_name)) != 0 ||
  590. 		    (r = encode_attrib(msg, &stats[i].attrib)) != 0)
                  ^
  591. 			fatal("%s: buffer error: %s", __func__, ssh_err(r));
  592. 	}

#491
krl.c:632: error: Buffer Overrun L3
  Offset added: [4, 67108860] Size: [0, +oo] by call to `bitmap_free`.
  630. 				if ((r = put_bitmap(sect, bitmap)) != 0)
  631. 					goto out;
  632. 				bitmap_free(bitmap);
           ^
  633. 				bitmap = NULL;
  634. 				break;

#492
krl.c:578: error: Dead Store
  The value written to &r (type int) is never used.
  576. revoked_certs_generate(struct revoked_certs *rc, struct sshbuf *buf)
  577. {
  578. 	int final, force_new_sect, r = SSH_ERR_INTERNAL_ERROR;
        ^
  579. 	u_int64_t i, contig, gap, last = 0, bitmap_start = 0;
  580. 	struct revoked_serial *rs, *nrs;

#493
authfd.c:598: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `encode_constraints`.
  596. 		goto out;
  597. 	if (constrained &&
  598. 	    (r = encode_constraints(msg, life, confirm, 0, NULL)) != 0)
                 ^
  599. 		goto out;
  600. 	if ((r = ssh_request_reply(sock, msg, msg)) != 0)

#494
sshsig.c:590: error: Dead Store
  The value written to &r (type int) is never used.
  588. {
  589. 	struct sshbuf *b = NULL;
  590. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  591. 	char *hashalg = NULL;
  592. 

#495
sshsig.c:610: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  608. 	r = 0;
  609.  out:
  610. 	sshbuf_free(b);
        ^
  611. 	free(hashalg);
  612. 	return r;

#496
sftp.c:599: error: Buffer Overrun L2
  Offset: [0, 1] Size: 1 by call to `BSDgetopt`.
  597. 	opterr = 0;
  598. 
  599. 	while ((ch = getopt(argc, argv, "")) != -1) {
                     ^
  600. 		switch (ch) {
  601. 		default:

#497
sftp-server.c:608: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `encode_attrib`.
  606. 	if ((r = sshbuf_put_u8(msg, SSH2_FXP_ATTRS)) != 0 ||
  607. 	    (r = sshbuf_put_u32(msg, id)) != 0 ||
  608. 	    (r = encode_attrib(msg, a)) != 0)
                 ^
  609. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  610. 	send_msg(msg);

#498
mux.c:657: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `reply_ok`.
  655. 			   rfwd->allocated_port);
  656. 		} else {
  657. 			reply_ok(out, fctx->rid);
          ^
  658. 		}
  659. 		goto out;

#499
mux.c:686: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_stringb`.
  684. 	free(failmsg);
  685.  out:
  686. 	if ((r = sshbuf_put_stringb(c->output, out)) != 0)
                 ^
  687. 		fatal("%s: sshbuf_put_stringb: %s", __func__, ssh_err(r));
  688. 	sshbuf_free(out);

#500
openbsd-compat/glob.c:617: error: Buffer Overrun L1
  Offset: -1 Size: 4096 by call to `glob2`.
  615. 	if (*pattern == EOS)
  616. 		return(0);
  617. 	return(glob2(pathbuf, pathbuf+PATH_MAX-1,
               ^
  618. 	    pathbuf, pathbuf+PATH_MAX-1,
  619. 	    pattern, pattern_last, pglob, limitp));

#501
sntrup4591761.c:618: error: Buffer Overrun L2
  Offset: [1, 1519] Size: 761 by call to `int32_sort`.
  616.   for (i = 0;i < w;++i) r[i] &= -2;
  617.   for (i = w;i < p;++i) r[i] = (r[i] & -3) | 1;
  618.   int32_sort(r,p);
         ^
  619.   for (i = 0;i < p;++i) f[i] = ((small) (r[i] & 3)) - 1;
  620. }

#502
sntrup4591761.c:616: error: Uninitialized Value
  The value read from r[_] was never initialized.
  614. 
  615.   for (i = 0;i < p;++i) r[i] = small_random32();
  616.   for (i = 0;i < w;++i) r[i] &= -2;
                               ^
  617.   for (i = w;i < p;++i) r[i] = (r[i] & -3) | 1;
  618.   int32_sort(r,p);

#503
sntrup4591761.c:617: error: Uninitialized Value
  The value read from r[_] was never initialized.
  615.   for (i = 0;i < p;++i) r[i] = small_random32();
  616.   for (i = 0;i < w;++i) r[i] &= -2;
  617.   for (i = w;i < p;++i) r[i] = (r[i] & -3) | 1;
                               ^
  618.   int32_sort(r,p);
  619.   for (i = 0;i < p;++i) f[i] = ((small) (r[i] & 3)) - 1;

#504
monitor.c:681: error: Buffer Overrun L3
  Offset: [0, 1048575] Size: [0, +oo] by call to `sshkey_sign`.
  679. 
  680. 	if ((key = get_hostkey_by_index(keyid)) != NULL) {
  681. 		if ((r = sshkey_sign(key, &signature, &siglen, p, datlen, alg,
                  ^
  682. 		    options.sk_provider, compat)) != 0)
  683. 			fatal("%s: sshkey_sign failed: %s",

#505
monitor.c:681: error: Inferbo Alloc May Be Big
  Length: [64, 1048640] by call to `sshkey_sign`.
  679. 
  680. 	if ((key = get_hostkey_by_index(keyid)) != NULL) {
  681. 		if ((r = sshkey_sign(key, &signature, &siglen, p, datlen, alg,
                  ^
  682. 		    options.sk_provider, compat)) != 0)
  683. 			fatal("%s: sshkey_sign failed: %s",

#506
monitor.c:630: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 4]):unsigned64 by call to `sshbuf_get_string`.
  628. 
  629. 	if ((r = sshbuf_get_u32(m, &keyid)) != 0 ||
  630. 	    (r = sshbuf_get_string(m, &p, &datlen)) != 0 ||
                 ^
  631. 	    (r = sshbuf_get_cstring(m, &alg, &alglen)) != 0 ||
  632. 	    (r = sshbuf_get_u32(m, &compat)) != 0)

#507
ssh-keygen.c:664: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `do_convert_private_ssh2`.
  662. 		fatal("%s: base64 decoding failed: %s", __func__, ssh_err(r));
  663. 	if (*private)
  664. 		*k = do_convert_private_ssh2(buf);
              ^
  665. 	else if ((r = sshkey_fromb(buf, k)) != 0)
  666. 		fatal("decode blob failed: %s", ssh_err(r));

#508
ssh-keygen.c:665: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_fromb`.
  663. 	if (*private)
  664. 		*k = do_convert_private_ssh2(buf);
  665. 	else if ((r = sshkey_fromb(buf, k)) != 0)
                      ^
  666. 		fatal("decode blob failed: %s", ssh_err(r));
  667. 	sshbuf_free(buf);

#509
ssh-keygen.c:665: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: [0, +oo] by call to `sshkey_fromb`.
  663. 	if (*private)
  664. 		*k = do_convert_private_ssh2(buf);
  665. 	else if ((r = sshkey_fromb(buf, k)) != 0)
                      ^
  666. 		fatal("decode blob failed: %s", ssh_err(r));
  667. 	sshbuf_free(buf);

#510
ssh-keygen.c:667: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  665. 	else if ((r = sshkey_fromb(buf, k)) != 0)
  666. 		fatal("decode blob failed: %s", ssh_err(r));
  667. 	sshbuf_free(buf);
        ^
  668. 	fclose(fp);
  669. }

#511
clientloop.c:670: error: Integer Overflow L2
  ([0, +oo] - 1024):unsigned64 by call to `ssh_packet_process_incoming`.
  668. 			return;
  669. 		}
  670. 		ssh_packet_process_incoming(ssh, buf, len);
         ^
  671. 	}
  672. }

#512
sntrup4591761.c:659: error: Dead Store
  The value written to &c (type unsigned char*) is never used.
  657.   f0 = *f++ + qshift;
  658.   *c++ = f0; f0 >>= 8;
  659.   *c++ = f0;
          ^
  660. }
  661. 

#513
sntrup4591761.c:657: error: Dead Store
  The value written to &f (type short const *) is never used.
  655.   }
  656.   /* XXX: using p mod 5 = 1 */
  657.   f0 = *f++ + qshift;
               ^
  658.   *c++ = f0; f0 >>= 8;
  659.   *c++ = f0;

#514
sshconnect2.c:653: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_from_blob`.
  651. 		goto done;
  652. 	}
  653. 	if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                 ^
  654. 		debug("no key from blob. pkalg %s: %s", pkalg, ssh_err(r));
  655. 		goto done;

#515
sshconnect2.c:653: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: [0, +oo] by call to `sshkey_from_blob`.
  651. 		goto done;
  652. 	}
  653. 	if ((r = sshkey_from_blob(pkblob, blen, &key)) != 0) {
                 ^
  654. 		debug("no key from blob. pkalg %s: %s", pkalg, ssh_err(r));
  655. 		goto done;

#516
sshconnect2.c:687: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  685. 	r = 0;
  686.  done:
  687. 	sshkey_free(key);
        ^
  688. 	free(ident);
  689. 	free(fp);

#517
sshconnect2.c:684: error: Integer Overflow L2
  ([5, +oo] - [4, 9]):unsigned64 by call to `sign_and_send_pubkey`.
  682. 	ident = format_identity(id);
  683. 	debug("Server accepts key: %s", ident);
  684. 	sent = sign_and_send_pubkey(ssh, id);
               ^
  685. 	r = 0;
  686.  done:

#518
kex.c:640: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `kex_free`.
  638. 	    (kex->client_version = sshbuf_new()) == NULL ||
  639. 	    (kex->server_version = sshbuf_new()) == NULL) {
  640. 		kex_free(kex);
         ^
  641. 		return NULL;
  642. 	}

#519
openbsd-compat/sha2.c:638: error: Buffer Overrun L3
  Offset added: 128 Size: [0, +oo].
  636. 	memcpy(context->state.st64, sha512_initial_hash_value,
  637. 	    sizeof(sha512_initial_hash_value));
  638. 	memset(context->buffer, 0, sizeof(context->buffer));
        ^
  639. 	context->bitcount[0] = context->bitcount[1] =  0;
  640. }

#520
serverloop.c:649: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  647. 
  648. 	if (no_more_sessions) {
  649. 		ssh_packet_disconnect(ssh, "Possible attack: attempt to open a "
         ^
  650. 		    "session after additional sessions disabled");
  651. 	}

#521
serverloop.c:646: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  644. 	debug("input_session_request");
  645. 	if ((r = sshpkt_get_end(ssh)) != 0)
  646. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
         ^
  647. 
  648. 	if (no_more_sessions) {

#522
serverloop.c:649: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  647. 
  648. 	if (no_more_sessions) {
  649. 		ssh_packet_disconnect(ssh, "Possible attack: attempt to open a "
         ^
  650. 		    "session after additional sessions disabled");
  651. 	}

#523
sftp.c:659: error: Buffer Overrun L3
  Offset: [0, +oo] Size: [0, +oo] by call to `remote_glob`.
  657. 
  658. 	debug3("Looking up %s", abs_src);
  659. 	if ((r = remote_glob(conn, abs_src, GLOB_MARK, NULL, &g)) != 0) {
                 ^
  660. 		if (r == GLOB_NOSPACE) {
  661. 			error("Too many matches for \"%s\".", abs_src);

#524
sftp.c:659: error: Inferbo Alloc May Be Negative
  Length: [-9223372036854775805, +oo] by call to `remote_glob`.
  657. 
  658. 	debug3("Looking up %s", abs_src);
  659. 	if ((r = remote_glob(conn, abs_src, GLOB_MARK, NULL, &g)) != 0) {
                 ^
  660. 		if (r == GLOB_NOSPACE) {
  661. 			error("Too many matches for \"%s\".", abs_src);

#525
sftp.c:710: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `download_dir`.
  708. 			    g.gl_pathv[i], abs_dst);
  709. 		if (pathname_is_dir(g.gl_pathv[i]) && (rflag || global_rflag)) {
  710. 			if (download_dir(conn, g.gl_pathv[i], abs_dst, NULL,
              ^
  711. 			    pflag || global_pflag, 1, resume,
  712. 			    fflag || global_fflag) == -1)

#526
sftp.c:659: error: Integer Overflow L2
  ([0, 9223372036854775807] - [0, 9223372036854775805]):unsigned64 by call to `remote_glob`.
  657. 
  658. 	debug3("Looking up %s", abs_src);
  659. 	if ((r = remote_glob(conn, abs_src, GLOB_MARK, NULL, &g)) != 0) {
                 ^
  660. 		if (r == GLOB_NOSPACE) {
  661. 			error("Too many matches for \"%s\".", abs_src);

#527
ssh-sk.c:652: error: Dead Store
  The value written to &r (type int) is never used.
  650. {
  651. 	struct sshsk_provider *skp = NULL;
  652. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  653. 	struct sk_resident_key **rks = NULL;
  654. 	size_t i, nrks = 0, nkeys = 0;

#528
scp.c:661: error: Integer Overflow L2
  ([0, 2147483647] + 1):signed32.
  659. 	*startp = *endp = -1;
  660. 	in_bracket = brace_level = 0;
  661. 	for (i = 0; i < INT_MAX && *endp < 0 && pattern[i] != '\0'; i++) {
                                                                    ^
  662. 		switch (pattern[i]) {
  663. 		case '\\':

#529
hostfile.c:685: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  683. 
  684. 		free(lineinfo.line);
  685. 		sshkey_free(lineinfo.key);
         ^
  686. 		memset(&lineinfo, 0, sizeof(lineinfo));
  687. 		lineinfo.path = path;

#530
auth.c:673: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `buf.strlen`)]):unsigned64 by call to `sshbuf_put_cstring`.
  671. 	vsnprintf(buf, sizeof(buf), fmt, args);
  672. 	va_end(args);
  673. 	if ((r = sshbuf_put_cstring(auth_debug, buf)) != 0)
                 ^
  674. 		fatal("%s: sshbuf_put_cstring: %s", __func__, ssh_err(r));
  675. }

#531
sntrup4591761.c:746: error: Dead Store
  The value written to &c (type unsigned char const *) is never used.
  744. 
  745.   c0 = *c++;
  746.   c1 = *c++;
               ^
  747.   c0 += c1 << 8;
  748.   *f++ = modq_freeze(c0 + q - qshift);

#532
sntrup4591761.c:748: error: Dead Store
  The value written to &f (type short*) is never used.
  746.   c1 = *c++;
  747.   c0 += c1 << 8;
  748.   *f++ = modq_freeze(c0 + q - qshift);
          ^
  749. }
  750. 

#533
misc.c:694: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `cleanhostname`.
  692. 	if (tmp != NULL) {
  693. 		*tmp++ = '\0';
  694. 		host = xstrdup(cleanhostname(tmp));
                        ^
  695. 		if (*sdup != '\0')
  696. 			user = xstrdup(sdup);

#534
openbsd-compat/sha2.c:708: error: Buffer Overrun L2
  Offset: [23, 86] Size: 80.
  706. 		ROUND512(d,e,f,g,h,a,b,c);
  707. 		ROUND512(c,d,e,f,g,h,a,b);
  708. 		ROUND512(b,c,d,e,f,g,h,a);
         ^
  709. 	} while (j < 80);
  710. 

#535
openbsd-compat/sha2.c:696: error: Buffer Overrun L2
  Offset: [7, 22] Size: 16.
  694. 		ROUND512_0_TO_15(d,e,f,g,h,a,b,c);
  695. 		ROUND512_0_TO_15(c,d,e,f,g,h,a,b);
  696. 		ROUND512_0_TO_15(b,c,d,e,f,g,h,a);
         ^
  697. 	} while (j < 16);
  698. 

#536
openbsd-compat/sha2.c:722: error: Dead Store
  The value written to &a (type unsigned long) is never used.
  720. 
  721. 	/* Clean up */
  722. 	a = b = c = d = e = f = g = h = T1 = 0;
        ^
  723. }
  724. 

#537
serverloop.c:684: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  682. 	    (r = sshpkt_get_u32(ssh, &rwindow)) != 0 ||
  683. 	    (r = sshpkt_get_u32(ssh, &rmaxpack)) != 0)
  684. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
         ^
  685. 	debug("%s: ctype %s rchan %u win %u max %u", __func__,
  686. 	    ctype, rchan, rwindow, rmaxpack);

#538
serverloop.c:711: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  709. 			    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||
  710. 			    (r = sshpkt_put_u32(ssh, c->local_maxpacket)) != 0 ||
  711. 			    (r = sshpkt_send(ssh)) != 0) {
                   ^
  712. 				sshpkt_fatal(ssh, r,
  713. 				    "%s: send open confirm", __func__);

#539
serverloop.c:721: error: Integer Overflow L2
  ([0, +oo] - [4, 15]):unsigned64 by call to `sshpkt_put_cstring`.
  719. 		    (r = sshpkt_put_u32(ssh, rchan)) != 0 ||
  720. 		    (r = sshpkt_put_u32(ssh, reason)) != 0 ||
  721. 		    (r = sshpkt_put_cstring(ssh, errmsg ? errmsg : "open failed")) != 0 ||
                  ^
  722. 		    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  723. 		    (r = sshpkt_send(ssh)) != 0) {

#540
auth.c:689: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_send_debug`.
  687. 			fatal("%s: sshbuf_get_cstring: %s",
  688. 			    __func__, ssh_err(r));
  689. 		ssh_packet_send_debug(ssh, "%s", msg);
         ^
  690. 		free(msg);
  691. 	}

#541
auth.c:689: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_send_debug`.
  687. 			fatal("%s: sshbuf_get_cstring: %s",
  688. 			    __func__, ssh_err(r));
  689. 		ssh_packet_send_debug(ssh, "%s", msg);
         ^
  690. 		free(msg);
  691. 	}

#542
auth.c:689: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_send_debug`.
  687. 			fatal("%s: sshbuf_get_cstring: %s",
  688. 			    __func__, ssh_err(r));
  689. 		ssh_packet_send_debug(ssh, "%s", msg);
         ^
  690. 		free(msg);
  691. 	}

#543
sshsig.c:723: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, +oo] by call to `sshkey_read`.
  721. 		*cp++ = '\0';
  722. 		skip_space(&cp);
  723. 		if (sshkey_read(found_key, &cp) != 0) {
             ^
  724. 			error("%s:%lu: invalid key", path,
  725. 			    linenum);

#544
sshsig.c:765: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  763. 	}
  764.  done:
  765. 	sshkey_free(found_key);
        ^
  766. 	sshsigopt_free(sigopts);
  767. 	return found ? 0 : SSH_ERR_KEY_NOT_FOUND;

#545
mux.c:709: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 4]):unsigned64 by call to `sshbuf_get_cstring`.
  707. 	/* XXX - lport/cport check redundant */
  708. 	if ((r = sshbuf_get_u32(m, &ftype)) != 0 ||
  709. 	    (r = sshbuf_get_cstring(m, &listen_addr, NULL)) != 0 ||
                 ^
  710. 	    (r = sshbuf_get_u32(m, &lport)) != 0 ||
  711. 	    (r = sshbuf_get_cstring(m, &connect_addr, NULL)) != 0 ||

#546
openbsd-compat/glob.c:767: error: Dead Store
  The value written to &dc (type unsigned short*) is never used.
  765. 			continue;
  766. 		}
  767. 		err = glob2(pathbuf, pathbuf_last, --dc, pathend_last,
                                            ^
  768. 		    restpattern, restpattern_last, pglob, limitp);
  769. 		if (err)

#547
auth-options.c:739: error: Buffer Overrun L3
  Offset: [0, 2147483646] Size: [1, 2147483647].
  737.  out:
  738. 	for (i = 0; i < n; i++)
  739. 		free(a[i]);
              ^
  740. 	free(a);
  741. 	sshbuf_free(b);

#548
auth-options.c:728: error: Buffer Overrun L3
  Offset: [0, 2147483646] Size: [1, 2147483647] by call to `sshbuf_get_cstring`.
  726. 	}
  727. 	for (i = 0; i < n; i++) {
  728. 		if ((r = sshbuf_get_cstring(b, &a[i], NULL)) != 0)
                  ^
  729. 			goto out;
  730. 	}

#549
auth-options.c:713: error: Dead Store
  The value written to &r (type int) is never used.
  711. 	struct sshbuf *b = NULL;
  712. 	u_int tmp;
  713. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  714. 
  715. 	if ((r = sshbuf_get_u32(m, &tmp)) != 0 ||

#550
auth-options.c:723: error: Inferbo Alloc May Be Big
  Length: [1, 2147483647].
  721. 	}
  722. 	n = tmp;
  723. 	if (n > 0 && (a = calloc(n, sizeof(*a))) == NULL) {
                          ^
  724. 		r = SSH_ERR_ALLOC_FAIL;
  725. 		goto out;

#551
auth-options.c:741: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  739. 		free(a[i]);
  740. 	free(a);
  741. 	sshbuf_free(b);
        ^
  742. 	return r;
  743. }

#552
auth-options.c:716: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 4]):unsigned64 by call to `sshbuf_froms`.
  714. 
  715. 	if ((r = sshbuf_get_u32(m, &tmp)) != 0 ||
  716. 	    (r = sshbuf_froms(m, &b)) != 0)
                 ^
  717. 		goto out;
  718. 	if (tmp > INT_MAX) {

#553
ssh-agent.c:738: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `free_identity`.
  736. 		if (!strcmp(canonical_provider, id->provider)) {
  737. 			TAILQ_REMOVE(&idtab->idlist, id, next);
  738. 			free_identity(id);
          ^
  739. 			idtab->nentries--;
  740. 		}

#554
sshconnect.c:1134: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `sshkey_from_private`.
  1132. 		 */
  1133. 		debug("No matching CA found. Retry with plain key");
  1134. 		if ((r = sshkey_from_private(host_key, &raw_key)) != 0)
                   ^
  1135. 			fatal("%s: sshkey_from_private: %s",
  1136. 			    __func__, ssh_err(r));

#555
sshconnect.c:1142: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1140. 		goto retry;
  1141. 	}
  1142. 	sshkey_free(raw_key);
         ^
  1143. 	free(ip);
  1144. 	free(host);

#556
monitor.c:732: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `getpwnamallow`.
  730. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  731. 
  732. 	pwent = getpwnamallow(ssh, username);
                ^
  733. 
  734. 	authctxt->user = xstrdup(username);

#557
sftp-server.c:726: error: Dead Store
  The value written to &status (type int) is never used.
  724. process_close(u_int32_t id)
  725. {
  726. 	int r, handle, ret, status = SSH2_FX_FAILURE;
        ^
  727. 
  728. 	if ((r = get_handle(iqueue, &handle)) != 0)

#558
sftp.c:749: error: Buffer Overrun L3
  Offset: [0, +oo] Size: [0, +oo] by call to `_ssh__compat_glob`.
  747. 	memset(&g, 0, sizeof(g));
  748. 	debug3("Looking up %s", src);
  749. 	if (glob(src, GLOB_NOCHECK | GLOB_MARK, NULL, &g)) {
            ^
  750. 		error("File \"%s\" not found.", src);
  751. 		err = -1;

#559
sftp.c:749: error: Inferbo Alloc May Be Negative
  Length: [-9223372036854775805, +oo] by call to `_ssh__compat_glob`.
  747. 	memset(&g, 0, sizeof(g));
  748. 	debug3("Looking up %s", src);
  749. 	if (glob(src, GLOB_NOCHECK | GLOB_MARK, NULL, &g)) {
            ^
  750. 		error("File \"%s\" not found.", src);
  751. 		err = -1;

#560
sftp.c:785: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `path_append`.
  783. 			/* If directory specified, append filename */
  784. 			if (dst_is_dir)
  785. 				abs_dst = path_append(tmp_dst, filename);
                     ^
  786. 			else
  787. 				abs_dst = xstrdup(tmp_dst);

#561
sftp.c:749: error: Integer Overflow L2
  ([0, 9223372036854775807] - [0, 9223372036854775805]):unsigned64 by call to `_ssh__compat_glob`.
  747. 	memset(&g, 0, sizeof(g));
  748. 	debug3("Looking up %s", src);
  749. 	if (glob(src, GLOB_NOCHECK | GLOB_MARK, NULL, &g)) {
            ^
  750. 		error("File \"%s\" not found.", src);
  751. 		err = -1;

#562
misc.c:760: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `cleanhostname`.
  758. 	if ((cp = hpdelim(&tmp)) == NULL || *cp == '\0')
  759. 		goto out;
  760. 	host = xstrdup(cleanhostname(cp));
                       ^
  761. 	/* Convert and verify optional port */
  762. 	if (tmp != NULL && *tmp != '\0') {

#563
serverloop.c:749: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  747. 	    sshkey_type_from_name(ssh->kex->hostkey_alg));
  748. 	while (ssh_packet_remaining(ssh) > 0) {
  749. 		sshkey_free(key);
         ^
  750. 		key = NULL;
  751. 		if ((r = sshpkt_get_string_direct(ssh, &blob, &blen)) != 0 ||

#564
ssh-keygen.c:788: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  786. 	if (!ok)
  787. 		fatal("key write failed");
  788. 	sshkey_free(k);
        ^
  789. 	exit(0);
  790. }

#565
krl.c:764: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `revoked_certs_generate`.
  762. 	TAILQ_FOREACH(rc, &krl->revoked_certs, entry) {
  763. 		sshbuf_reset(sect);
  764. 		if ((r = revoked_certs_generate(rc, sect)) != 0)
                  ^
  765. 			goto out;
  766. 		if ((r = sshbuf_put_u8(buf, KRL_SECTION_CERTIFICATES)) != 0 ||

#566
krl.c:738: error: Dead Store
  The value written to &r (type int) is never used.
  736.     struct sshkey **sign_keys, u_int nsign_keys)
  737. {
  738. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  739. 	struct revoked_certs *rc;
  740. 	struct revoked_blob *rb;

#567
krl.c:815: error: Inferbo Alloc May Be Big
  Length: [64, 1048640] by call to `sshkey_sign`.
  813. 			goto out;
  814. 
  815. 		if ((r = sshkey_sign(sign_keys[i], &sblob, &slen,
                  ^
  816. 		    sshbuf_ptr(buf), sshbuf_len(buf), NULL, NULL, 0)) != 0)
  817. 			goto out;

#568
krl.c:826: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  824.  out:
  825. 	free(sblob);
  826. 	sshbuf_free(sect);
        ^
  827. 	return r;
  828. }

#569
scp.c:799: error: Integer Overflow L2
  ([-2147483646, 4294967291] + `pattern->strlen`):signed32 by call to `emit_expansion`.
  797. 			/* Adjust end index for last selection */
  798. 			sel_end = (i == brace_end - 1) ? brace_end : i;
  799. 			if (emit_expansion(pattern, brace_start, brace_end,
              ^
  800. 			    sel_start, sel_end, patternsp, npatternsp) != 0)
  801. 				return -1;

#570
scp.c:799: error: Integer Overflow L2
  ([0, 2147483646] + [-2147483646, 2147483645]):signed32 by call to `emit_expansion`.
  797. 			/* Adjust end index for last selection */
  798. 			sel_end = (i == brace_end - 1) ? brace_end : i;
  799. 			if (emit_expansion(pattern, brace_start, brace_end,
              ^
  800. 			    sel_start, sel_end, patternsp, npatternsp) != 0)
  801. 				return -1;

#571
scp.c:799: error: Integer Overflow L2
  ([`pattern->strlen` - 2147483646, `pattern->strlen` + 4294967291] + 1):signed32 by call to `emit_expansion`.
  797. 			/* Adjust end index for last selection */
  798. 			sel_end = (i == brace_end - 1) ? brace_end : i;
  799. 			if (emit_expansion(pattern, brace_start, brace_end,
              ^
  800. 			    sel_start, sel_end, patternsp, npatternsp) != 0)
  801. 				return -1;

#572
ssh-agent.c:805: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `send_status`.
  803. 		default:
  804. 			/* send a fail message for all other request types */
  805. 			send_status(e, 0);
          ^
  806. 		}
  807. 		return 0;

#573
ssh-agent.c:801: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `no_identities`.
  799. 		case SSH2_AGENTC_REQUEST_IDENTITIES:
  800. 			/* send empty lists */
  801. 			no_identities(e);
          ^
  802. 			break;
  803. 		default:

#574
ssh-agent.c:772: error: Null Dereference
  pointer `cp` last assigned on line 771 could be null and is dereferenced at line 772, column 12.
  770. 		return 0;		/* Incomplete message header. */
  771. 	cp = sshbuf_ptr(e->input);
  772. 	msg_len = PEEK_U32(cp);
                  ^
  773. 	if (msg_len > AGENT_MAX_LEN) {
  774. 		debug("%s: socket %u (fd=%d) message too long %u > %u",

#575
sntrup4591761.c:775: error: Uninitialized Value
  The value read from fg[_] was never initialized.
  773. 
  774.   for (i = p + p - 2;i >= p;--i) {
  775.     fg[i - p] = modq_sum(fg[i - p],fg[i]);
                       ^
  776.     fg[i - p + 1] = modq_sum(fg[i - p + 1],fg[i]);
  777.   }

#576
sntrup4591761.c:780: error: Uninitialized Value
  The value read from fg[_] was never initialized.
  778. 
  779.   for (i = 0;i < p;++i)
  780.     h[i] = fg[i];
           ^
  781. }
  782. 

#577
auth-options.c:764: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 1]):unsigned64 by call to `sshbuf_get_cstring`.
  762. 	*sp = NULL;
  763. 	if ((r = sshbuf_get_u8(m, &flag)) != 0 ||
  764. 	    (r = sshbuf_get_cstring(m, flag ? NULL : sp, NULL)) != 0)
                 ^
  765. 		return r;
  766. 	return 0;

#578
sshd.c:804: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `sshkey_putb`.
  802. 		/* Append the key to the request */
  803. 		sshbuf_reset(buf);
  804. 		if ((r = sshkey_putb(key, buf)) != 0)
                  ^
  805. 			fatal("%s: couldn't put hostkey %d: %s",
  806. 			    __func__, i, ssh_err(r));

#579
sshd.c:800: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  798. 			    (r = sshpkt_put_cstring(ssh, "hostkeys-00@openssh.com")) != 0 ||
  799. 			    (r = sshpkt_put_u8(ssh, 0)) != 0) /* want reply */
  800. 				sshpkt_fatal(ssh, r, "%s: start request", __func__);
           ^
  801. 		}
  802. 		/* Append the key to the request */

#580
sshd.c:814: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  812. 	if (nkeys == 0)
  813. 		fatal("%s: no hostkeys", __func__);
  814. 	if ((r = sshpkt_send(ssh)) != 0)
                 ^
  815. 		sshpkt_fatal(ssh, r, "%s: send", __func__);
  816. 	sshbuf_free(buf);

#581
sshd.c:799: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  797. 			if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
  798. 			    (r = sshpkt_put_cstring(ssh, "hostkeys-00@openssh.com")) != 0 ||
  799. 			    (r = sshpkt_put_u8(ssh, 0)) != 0) /* want reply */
                   ^
  800. 				sshpkt_fatal(ssh, r, "%s: start request", __func__);
  801. 		}

#582
sshd.c:807: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_stringb`.
  805. 			fatal("%s: couldn't put hostkey %d: %s",
  806. 			    __func__, i, ssh_err(r));
  807. 		if ((r = sshpkt_put_stringb(ssh, buf)) != 0)
                  ^
  808. 			sshpkt_fatal(ssh, r, "%s: append key", __func__);
  809. 		nkeys++;

#583
auth-options.c:773: error: Dead Store
  The value written to &r (type int) is never used.
  771.     int untrusted)
  772. {
  773. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  774. 
  775. 	/* Flag options */

#584
sshsig.c:807: error: Uninitialized Value
  The value read from r was never initialized.
  805. 	fclose(f);
  806. 	free(line);
  807. 	return r == 0 ? SSH_ERR_KEY_NOT_FOUND : r;
               ^
  808. }

#585
clientloop.c:854: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_cancel_lport_listener`.
  852. 			ok = channel_request_rforward_cancel(ssh, &fwd) == 0;
  853. 		else if (dynamic)
  854. 			ok = channel_cancel_lport_listener(ssh, &fwd,
               ^
  855. 			    0, &options.fwd_opts) > 0;
  856. 		else

#586
misc.c:805: error: Uninitialized Value
  The value read from result[_] was never initialized.
  803. 			return -1;
  804. 	}
  805. 	return (result[0] << 4) | result[1];
        ^
  806. }
  807. 

#587
ssh-keygen.c:808: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshkey_free`.
  806. 	if ((r = sshkey_write(prv, stdout)) != 0)
  807. 		error("sshkey_write failed: %s", ssh_err(r));
  808. 	sshkey_free(prv);
        ^
  809. 	if (comment != NULL && *comment != '\0')
  810. 		fprintf(stdout, " %s", comment);

#588
openbsd-compat/glob.c:832: error: Integer Overflow L2
  ([0, min(9223372036854775806, `pglob->gl_offs`)] - 1):unsigned64.
  830. 		/* first time around -- clear initial gl_offs items */
  831. 		pathv += pglob->gl_offs;
  832. 		for (i = pglob->gl_offs; --i >= 0; )
                                  ^
  833. 			*--pathv = NULL;
  834. 	}

#589
sshkey.c:800: error: Dead Store
  The value written to &ret (type int) is never used.
  798.   enum sshkey_serialize_rep opts)
  799. {
  800. 	int type, ret = SSH_ERR_INTERNAL_ERROR;
        ^
  801. 	const char *typename;
  802. #ifdef WITH_OPENSSL

#590
openbsd-compat/sha2.c:829: error: Dead Store
  The value written to &usedspace (type unsigned long) is never used.
  827. 			ADDINC128(context->bitcount, len << 3);
  828. 			/* Clean up: */
  829. 			usedspace = freespace = 0;
          ^
  830. 			return;
  831. 		}

#591
openbsd-compat/sha2.c:846: error: Dead Store
  The value written to &usedspace (type unsigned long) is never used.
  844. 	}
  845. 	/* Clean up: */
  846. 	usedspace = freespace = 0;
        ^
  847. }
  848. DEF_WEAK(SHA512Update);

#592
ssh-pkcs11.c:872: error: Dead Store
  The value written to &rsa_n (type bignum_st*) is never used.
  870. 	if (!RSA_set0_key(rsa, rsa_n, rsa_e, NULL))
  871. 		fatal("%s: set key", __func__);
  872. 	rsa_n = rsa_e = NULL; /* transferred */
        ^
  873. 
  874. 	if (pkcs11_rsa_wrap(p, slotidx, &key_attr[0], rsa))

#593
serverloop.c:848: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_send_debug`.
  846. 		     !bind_permitted(fwd.listen_port, pw->pw_uid))) {
  847. 			success = 0;
  848. 			ssh_packet_send_debug(ssh, "Server has disabled port forwarding.");
          ^
  849. 		} else {
  850. 			/* Start listening on the port */

#594
serverloop.c:827: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  825. 	if ((r = sshpkt_get_cstring(ssh, &rtype, NULL)) != 0 ||
  826. 	    (r = sshpkt_get_u8(ssh, &want_reply)) != 0)
  827. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
         ^
  828. 	debug("%s: rtype %s want_reply %d", __func__, rtype, want_reply);
  829. 

#595
serverloop.c:907: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  905. 		    SSH2_MSG_REQUEST_SUCCESS : SSH2_MSG_REQUEST_FAILURE)) != 0 ||
  906. 		    (success && resp != NULL && (r = sshpkt_putb(ssh, resp)) != 0) ||
  907. 		    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  908. 		    (r = ssh_packet_write_wait(ssh)) != 0)
  909. 			sshpkt_fatal(ssh, r, "%s: send reply", __func__);

#596
serverloop.c:848: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssh_packet_send_debug`.
  846. 		     !bind_permitted(fwd.listen_port, pw->pw_uid))) {
  847. 			success = 0;
  848. 			ssh_packet_send_debug(ssh, "Server has disabled port forwarding.");
          ^
  849. 		} else {
  850. 			/* Start listening on the port */

#597
serverloop.c:848: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_send_debug`.
  846. 		     !bind_permitted(fwd.listen_port, pw->pw_uid))) {
  847. 			success = 0;
  848. 			ssh_packet_send_debug(ssh, "Server has disabled port forwarding.");
          ^
  849. 		} else {
  850. 			/* Start listening on the port */

#598
scp.c:837: error: Inferbo Alloc May Be Negative
  Length: [-2147483645, +oo] by call to `brace_expand_one`.
  835. 		cp = active[nactive - 1];
  836. 		nactive--;
  837. 		if (brace_expand_one(cp, &active, &nactive,
             ^
  838. 		    &expanded, &invalid) == -1) {
  839. 			free(cp);

#599
auth-options.c:824: error: Dead Store
  The value written to &r (type int) is never used.
  822. {
  823. 	struct sshauthopt *opts = NULL;
  824. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  825. 	u_char f;
  826. 	u_int tmp;

#600
auth-options.c:859: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 21]):unsigned64 by call to `deserialise_nullable_string`.
  857. 
  858. 	/* String options may be NULL */
  859. 	if ((r = deserialise_nullable_string(m, &opts->cert_principals)) != 0 ||
                 ^
  860. 	    (r = deserialise_nullable_string(m, &opts->force_command)) != 0 ||
  861. 	    (r = deserialise_nullable_string(m,

#601
sftp-server.c:828: error: Dead Store
  The value written to &status (type int) is never used.
  826. 	struct stat st;
  827. 	char *name;
  828. 	int r, status = SSH2_FX_FAILURE;
        ^
  829. 
  830. 	if ((r = sshbuf_get_cstring(iqueue, &name, NULL)) != 0)

#602
readconf.c:1578: error: Buffer Overrun L3
  Offset: [0, +oo] Size: [0, +oo] by call to `_ssh__compat_glob`.
  1576. 				arg2 = xstrdup(arg);
  1577. 			memset(&gl, 0, sizeof(gl));
  1578. 			r = glob(arg2, GLOB_TILDE, NULL, &gl);
               ^
  1579. 			if (r == GLOB_NOMATCH) {
  1580. 				debug("%.200s line %d: include %s matched no "

#603
readconf.c:1578: error: Inferbo Alloc May Be Negative
  Length: [-9223372036854775805, +oo] by call to `_ssh__compat_glob`.
  1576. 				arg2 = xstrdup(arg);
  1577. 			memset(&gl, 0, sizeof(gl));
  1578. 			r = glob(arg2, GLOB_TILDE, NULL, &gl);
               ^
  1579. 			if (r == GLOB_NOMATCH) {
  1580. 				debug("%.200s line %d: include %s matched no "

#604
readconf.c:1578: error: Integer Overflow L2
  ([0, 9223372036854775807] - [0, 9223372036854775805]):unsigned64 by call to `_ssh__compat_glob`.
  1576. 				arg2 = xstrdup(arg);
  1577. 			memset(&gl, 0, sizeof(gl));
  1578. 			r = glob(arg2, GLOB_TILDE, NULL, &gl);
               ^
  1579. 			if (r == GLOB_NOMATCH) {
  1580. 				debug("%.200s line %d: include %s matched no "

#605
krl.c:905: error: Buffer Overrun L2
  Offset: [-oo, 524287] Size: 1 by call to `bitmap_from_string`.
  903. 			    &blob, &blen)) != 0)
  904. 				goto out;
  905. 			if (bitmap_from_string(bitmap, blob, blen) != 0) {
              ^
  906. 				r = SSH_ERR_INVALID_FORMAT;
  907. 				goto out;

#606
krl.c:922: error: Buffer Overrun L3
  Offset added: [0, 2097156] Size: [0, +oo] by call to `bitmap_free`.
  920. 					goto out;
  921. 			}
  922. 			bitmap_free(bitmap);
          ^
  923. 			bitmap = NULL;
  924. 			break;

#607
krl.c:916: error: Buffer Overrun L3
  Offset: [0, 16777215] Size: [0, +oo] by call to `bitmap_test_bit`.
  914. 					goto out;
  915. 				}
  916. 				if (!bitmap_test_bit(bitmap, serial))
                ^
  917. 					continue;
  918. 				if ((r = ssh_krl_revoke_cert_by_serial(krl,

#608
krl.c:849: error: Dead Store
  The value written to &r (type int) is never used.
  847. parse_revoked_certs(struct sshbuf *buf, struct ssh_krl *krl)
  848. {
  849. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  850. 	u_char type;
  851. 	const u_char *blob;

#609
krl.c:954: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  952. 		bitmap_free(bitmap);
  953. 	free(key_id);
  954. 	sshkey_free(ca_key);
        ^
  955. 	sshbuf_free(subsect);
  956. 	return r;

#610
auth.c:929: error: Unreachable Code
  Unreachable code after statement.
  927. 			error("%s: open %s: %s", tag, _PATH_DEVNULL,
  928. 			    strerror(errno));
  929. 			_exit(1);
          ^
  930. 		}
  931. 		if (dup2(devnull, STDIN_FILENO) == -1) {

#611
auth.c:933: error: Unreachable Code
  Unreachable code after statement.
  931. 		if (dup2(devnull, STDIN_FILENO) == -1) {
  932. 			error("%s: dup2: %s", tag, strerror(errno));
  933. 			_exit(1);
          ^
  934. 		}
  935. 

#612
auth.c:944: error: Unreachable Code
  Unreachable code after statement.
  942. 		if (fd != -1 && dup2(fd, STDOUT_FILENO) == -1) {
  943. 			error("%s: dup2: %s", tag, strerror(errno));
  944. 			_exit(1);
          ^
  945. 		}
  946. 		closefrom(STDERR_FILENO + 1);

#613
auth.c:952: error: Unreachable Code
  Unreachable code after statement.
  950. 			error("%s: setresgid %u: %s", tag, (u_int)pw->pw_gid,
  951. 			    strerror(errno));
  952. 			_exit(1);
          ^
  953. 		}
  954. 		if (setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid) == -1) {

#614
auth.c:957: error: Unreachable Code
  Unreachable code after statement.
  955. 			error("%s: setresuid %u: %s", tag, (u_int)pw->pw_uid,
  956. 			    strerror(errno));
  957. 			_exit(1);
          ^
  958. 		}
  959. 		/* stdin is pointed to /dev/null at this point */

#615
auth.c:963: error: Unreachable Code
  Unreachable code after statement.
  961. 		    dup2(STDIN_FILENO, STDERR_FILENO) == -1) {
  962. 			error("%s: dup2: %s", tag, strerror(errno));
  963. 			_exit(1);
          ^
  964. 		}
  965. 

#616
auth.c:968: error: Unreachable Code
  Unreachable code after statement.
  966. 		execve(av[0], av, child_env);
  967. 		error("%s exec \"%s\": %s", tag, command, strerror(errno));
  968. 		_exit(127);
         ^
  969. 	default: /* parent */
  970. 		break;

#617
openbsd-compat/sha2.c:875: error: Buffer Overrun L3
  Offset added: 112 Size: [0, +oo].
  873. 	} else {
  874. 		/* Prepare for final transform: */
  875. 		memset(context->buffer, 0, SHA512_SHORT_BLOCK_LENGTH);
         ^
  876. 
  877. 		/* Begin padding with a 1 bit: */

#618
misc.c:903: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `cleanhostname`.
  901. 	if ((cp = hpdelim2(&tmp, &ch)) == NULL || *cp == '\0')
  902. 		goto out;
  903. 	host = xstrdup(cleanhostname(cp));
                       ^
  904. 	if (!valid_domain(host, 0, NULL))
  905. 		goto out;

#619
ssh-keygen.c:868: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_read`.
  866. 	if ((ret = sshkey_new(KEY_UNSPEC)) == NULL)
  867. 		fatal("sshkey_new failed");
  868. 	if ((r = sshkey_read(ret, cpp)) == 0)
                 ^
  869. 		return ret;
  870. 	/* Not a key */

#620
mux.c:948: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_cancel_lport_listener`.
  946. 	} else {	/* local and dynamic forwards */
  947. 		/* Ditto */
  948. 		if (channel_cancel_lport_listener(ssh, &fwd, fwd.connect_port,
             ^
  949. 		    &options.fwd_opts) == -1)
  950. 			error_reason = "port not found";

#621
mux.c:876: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 4]):unsigned64 by call to `sshbuf_get_cstring`.
  874. 
  875. 	if ((r = sshbuf_get_u32(m, &ftype)) != 0 ||
  876. 	    (r = sshbuf_get_cstring(m, &listen_addr, NULL)) != 0 ||
                 ^
  877. 	    (r = sshbuf_get_u32(m, &lport)) != 0 ||
  878. 	    (r = sshbuf_get_cstring(m, &connect_addr, NULL)) != 0 ||

#622
kex.c:982: error: Buffer Overrun L3
  Offset: [-1, 1] Size: 10 by call to `proposals_match`.
  980. 
  981. 	/* ignore the next message if the proposals do not match */
  982. 	if (first_kex_follows && !proposals_match(my, peer))
                                  ^
  983. 		ssh->dispatch_skip_packets = 1;
  984. 	r = 0;

#623
servconf.c:912: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `cleanhostname`.
  910. 		if (host == NULL || ch == '/')
  911. 			fatal("%s: missing host in %s", __func__, what);
  912. 		host = cleanhostname(host);
                ^
  913. 		if (arg == NULL || ((port = permitopen_port(arg)) < 0))
  914. 			fatal("%s: bad port number in %s", __func__, what);

#624
ssh-keygen.c:916: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshkey_free`.
  914. 
  915. 	fingerprint_one_key(public, comment);
  916. 	sshkey_free(public);
        ^
  917. 	free(comment);
  918. }

#625
sshd.c:915: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_string`.
  913. 	if (ver != 0)
  914. 		fatal("%s: rexec version mismatch", __func__);
  915. 	if ((r = sshbuf_get_string(m, &cp, &len)) != 0)
                 ^
  916. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  917. 	if (conf != NULL && (r = sshbuf_put(conf, cp, len)))

#626
sshkey.c:923: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `to_blob_buf`.
  921. 	if ((tmp = sshbuf_new()) == NULL)
  922. 		return SSH_ERR_ALLOC_FAIL;
  923. 	r = to_blob_buf(key, tmp, 0, opts);
            ^
  924. 	if (r == 0)
  925. 		r = sshbuf_put_stringb(b, tmp);

#627
openbsd-compat/sha2.c:920: error: Buffer Overrun L3
  Offset added: 128 Size: [0, +oo].
  918. 	memcpy(context->state.st64, sha384_initial_hash_value,
  919. 	    sizeof(sha384_initial_hash_value));
  920. 	memset(context->buffer, 0, sizeof(context->buffer));
        ^
  921. 	context->bitcount[0] = context->bitcount[1] = 0;
  922. }

#628
channels.c:925: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  923. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN)) != 0 ||
  924. 	    (r = sshpkt_put_cstring(ssh, type)) != 0 ||
  925. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||
                 ^
  926. 	    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||
  927. 	    (r = sshpkt_put_u32(ssh, c->local_maxpacket)) != 0) {

#629
channels.c:923: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  921. 	int r;
  922. 
  923. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN)) != 0 ||
                 ^
  924. 	    (r = sshpkt_put_cstring(ssh, type)) != 0 ||
  925. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||

#630
channels.c:924: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `type->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  922. 
  923. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN)) != 0 ||
  924. 	    (r = sshpkt_put_cstring(ssh, type)) != 0 ||
                 ^
  925. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||
  926. 	    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||

#631
serverloop.c:936: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  934. 
  935. 	if (id >= INT_MAX || (c = channel_lookup(ssh, (int)id)) == NULL) {
  936. 		ssh_packet_disconnect(ssh, "%s: unknown channel %d",
         ^
  937. 		    __func__, id);
  938. 	}

#632
serverloop.c:930: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  928. 	    (r = sshpkt_get_cstring(ssh, &rtype, NULL)) != 0 ||
  929. 	    (r = sshpkt_get_u8(ssh, &want_reply)) != 0)
  930. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
         ^
  931. 
  932. 	debug("server_input_channel_req: channel %u request %s reply %d",

#633
serverloop.c:953: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  951. 		    SSH2_MSG_CHANNEL_SUCCESS : SSH2_MSG_CHANNEL_FAILURE)) != 0 ||
  952. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  953. 		    (r = sshpkt_send(ssh)) != 0)
                  ^
  954. 			sshpkt_fatal(ssh, r, "%s: send reply", __func__);
  955. 	}

#634
serverloop.c:936: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  934. 
  935. 	if (id >= INT_MAX || (c = channel_lookup(ssh, (int)id)) == NULL) {
  936. 		ssh_packet_disconnect(ssh, "%s: unknown channel %d",
         ^
  937. 		    __func__, id);
  938. 	}

#635
clientloop.c:939: error: Integer Overflow L2
  ([-`b->off`, +oo] - 1):unsigned64 by call to `sshbuf_putf`.
  937. 		if (esc_txt[i].flags & suppress_flags)
  938. 			continue;
  939. 		if ((r = sshbuf_putf(b, " %c%-3s - %s\r\n",
                  ^
  940. 		    escape_char, esc_txt[i].cmd, esc_txt[i].text)) != 0)
  941. 			fatal("%s: buffer error: %s", __func__, ssh_err(r));

#636
ssh-keygen.c:1005: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1003. 
  1004. 		fingerprint_one_key(public, comment);
  1005. 		sshkey_free(public);
          ^
  1006. 		invalid = 0; /* One good key in the file is sufficient */
  1007. 	}

#637
sntrup4591761.c:956: error: Dead Store
  The value written to &c (type unsigned char*) is never used.
  954.   *c++ = f0; f0 >>= 8;
  955.   *c++ = f0; f0 >>= 8;
  956.   *c++ = f0;
          ^
  957. }
  958. 

#638
sntrup4591761.c:949: error: Dead Store
  The value written to &f (type short const *) is never used.
  947.   /* XXX: using p mod 3 = 2 */
  948.   f0 = *f++ + qshift;
  949.   f1 = *f++ + qshift;
               ^
  950.   f0 = (21846 * f0) >> 16;
  951.   f1 = (21846 * f1) >> 16;

#639
sshd.c:952: error: Resource Leak
  resource acquired by call to `open()` at line 947, column 12 is not released after line 952, column 7.
  950. 		if (!log_stderr)
  951. 			dup2(fd, STDERR_FILENO);
  952. 		if (fd > (log_stderr ? STDERR_FILENO : STDOUT_FILENO))
             ^
  953. 			close(fd);
  954. 	}

#640
channels.c:944: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  942. 	debug2("channel %d: send open", id);
  943. 	open_preamble(ssh, __func__, c, c->ctype);
  944. 	if ((r = sshpkt_send(ssh)) != 0)
                 ^
  945. 		fatal("%s: channel %i: %s", __func__, c->self, ssh_err(r));
  946. }

#641
sshkey.c:956: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `to_blob_buf`.
  954. 	if ((b = sshbuf_new()) == NULL)
  955. 		return SSH_ERR_ALLOC_FAIL;
  956. 	if ((ret = to_blob_buf(key, b, force_plain, opts)) != 0)
                   ^
  957. 		goto out;
  958. 	len = sshbuf_len(b);

#642
sshkey.c:946: error: Dead Store
  The value written to &ret (type int) is never used.
  944.     enum sshkey_serialize_rep opts)
  945. {
  946. 	int ret = SSH_ERR_INTERNAL_ERROR;
        ^
  947. 	size_t len;
  948. 	struct sshbuf *b = NULL;

#643
channels.c:965: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  963. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  964. 	    (r = sshpkt_put_cstring(ssh, service)) != 0 ||
  965. 	    (r = sshpkt_put_u8(ssh, wantconfirm)) != 0) {
                 ^
  966. 		fatal("%s: channel %i: %s", __func__, c->self, ssh_err(r));
  967. 	}

#644
channels.c:963: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  961. 	debug2("channel %d: request %s confirm %d", id, service, wantconfirm);
  962. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_REQUEST)) != 0 ||
  963. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
                 ^
  964. 	    (r = sshpkt_put_cstring(ssh, service)) != 0 ||
  965. 	    (r = sshpkt_put_u8(ssh, wantconfirm)) != 0) {

#645
channels.c:962: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  960. 
  961. 	debug2("channel %d: request %s confirm %d", id, service, wantconfirm);
  962. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_REQUEST)) != 0 ||
                 ^
  963. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  964. 	    (r = sshpkt_put_cstring(ssh, service)) != 0 ||

#646
channels.c:964: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `service->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  962. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_REQUEST)) != 0 ||
  963. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  964. 	    (r = sshpkt_put_cstring(ssh, service)) != 0 ||
                 ^
  965. 	    (r = sshpkt_put_u8(ssh, wantconfirm)) != 0) {
  966. 		fatal("%s: channel %i: %s", __func__, c->self, ssh_err(r));

#647
clientloop.c:1040: error: Buffer Overrun S2
  Offset: [max(0, `c->self`), `c->self`] Size: [0, +oo] by call to `channel_request_start`.
  1038. 					fatal("%s: buffer error: %s",
  1039. 					    __func__, ssh_err(r));
  1040. 				channel_request_start(ssh, c->self, "break", 0);
            ^
  1041. 				if ((r = sshpkt_put_u32(ssh, 1000)) != 0 ||
  1042. 				    (r = sshpkt_send(ssh)) != 0)

#648
clientloop.c:1095: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_stop_listening`.
  1093. 
  1094. 				/* Stop listening for new connections. */
  1095. 				channel_stop_listening(ssh);
            ^
  1096. 
  1097. 				if ((r = sshbuf_putf(berr,

#649
clientloop.c:1042: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1040. 				channel_request_start(ssh, c->self, "break", 0);
  1041. 				if ((r = sshpkt_put_u32(ssh, 1000)) != 0 ||
  1042. 				    (r = sshpkt_send(ssh)) != 0)
                     ^
  1043. 					fatal("%s: send packet: %s", __func__,
  1044. 					    ssh_err(r));

#650
clientloop.c:1041: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  1039. 					    __func__, ssh_err(r));
  1040. 				channel_request_start(ssh, c->self, "break", 0);
  1041. 				if ((r = sshpkt_put_u32(ssh, 1000)) != 0 ||
                     ^
  1042. 				    (r = sshpkt_send(ssh)) != 0)
  1043. 					fatal("%s: send packet: %s", __func__,

#651
clientloop.c:1042: error: Integer Overflow L2
  ([0, +oo] - 5):unsigned64 by call to `sshpkt_send`.
  1040. 				channel_request_start(ssh, c->self, "break", 0);
  1041. 				if ((r = sshpkt_put_u32(ssh, 1000)) != 0 ||
  1042. 				    (r = sshpkt_send(ssh)) != 0)
                     ^
  1043. 					fatal("%s: send packet: %s", __func__,
  1044. 					    ssh_err(r));

#652
sftp.c:968: error: Buffer Overrun L3
  Offset: [0, +oo] Size: [0, +oo] by call to `remote_glob`.
  966. 	memset(&g, 0, sizeof(g));
  967. 
  968. 	if ((r = remote_glob(conn, path,
                 ^
  969. 	    GLOB_MARK|GLOB_NOCHECK|GLOB_BRACE|GLOB_KEEPSTAT|GLOB_NOSORT,
  970. 	    NULL, &g)) != 0 ||

#653
sftp.c:968: error: Inferbo Alloc May Be Negative
  Length: [-9223372036854775805, +oo] by call to `remote_glob`.
  966. 	memset(&g, 0, sizeof(g));
  967. 
  968. 	if ((r = remote_glob(conn, path,
                 ^
  969. 	    GLOB_MARK|GLOB_NOCHECK|GLOB_BRACE|GLOB_KEEPSTAT|GLOB_NOSORT,
  970. 	    NULL, &g)) != 0 ||

#654
sftp.c:968: error: Integer Overflow L2
  ([0, 9223372036854775807] - [0, 9223372036854775805]):unsigned64 by call to `remote_glob`.
  966. 	memset(&g, 0, sizeof(g));
  967. 
  968. 	if ((r = remote_glob(conn, path,
                 ^
  969. 	    GLOB_MARK|GLOB_NOCHECK|GLOB_BRACE|GLOB_KEEPSTAT|GLOB_NOSORT,
  970. 	    NULL, &g)) != 0 ||

#655
sntrup4591761.c:1009: error: Dead Store
  The value written to &c (type unsigned char const *) is never used.
  1007.   c0 = *c++;
  1008.   c1 = *c++;
  1009.   c2 = *c++;
                ^
  1010. 
  1011.   f1 = (89478485*c2 + 349525*c1 + 1365*(c0+1)) >> 21;

#656
sntrup4591761.c:1020: error: Dead Store
  The value written to &f (type short*) is never used.
  1018. 
  1019.   *f++ = modq_freeze(f0 * 3 + q - qshift);
  1020.   *f++ = modq_freeze(f1 * 3 + q - qshift);
           ^
  1021. }
  1022. 

#657
sshconnect2.c:981: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  979. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  980. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||
  981. 	    (r = sshpkt_send(ssh)) != 0)
                 ^
  982. 		fatal("%s: %s", __func__, ssh_err(r));
  983. 	return 1;

#658
sshconnect2.c:978: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  976. 	/* initial userauth request */
  977. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||
  978. 	    (r = sshpkt_put_cstring(ssh, authctxt->server_user)) != 0 ||
                 ^
  979. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  980. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||

#659
ssh-agent.c:1015: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `close_socket`.
  1013. 				if (activefds == 0)
  1014. 					fatal("activefds == 0 at close_sock");
  1015. 				close_socket(&sockets[socknum]);
            ^
  1016. 				activefds--;
  1017. 				break;

#660
mux.c:1010: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1008. 	}
  1009. 
  1010. 	debug3("%s: got fds stdin %d, stdout %d", __func__,
         ^
  1011. 	    new_fd[0], new_fd[1]);
  1012. 

#661
mux.c:1019: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1017. 		    "Multiple sessions not supported");
  1018.  cleanup:
  1019. 		close(new_fd[0]);
          ^
  1020. 		close(new_fd[1]);
  1021. 		free(chost);

#662
mux.c:1020: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1018.  cleanup:
  1019. 		close(new_fd[0]);
  1020. 		close(new_fd[1]);
          ^
  1021. 		free(chost);
  1022. 		return 0;

#663
mux.c:1037: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1035. 
  1036. 	/* enable nonblocking unless tty */
  1037. 	if (!isatty(new_fd[0]))
              ^
  1038. 		set_nonblock(new_fd[0]);
  1039. 	if (!isatty(new_fd[1]))

#664
mux.c:1038: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1036. 	/* enable nonblocking unless tty */
  1037. 	if (!isatty(new_fd[0]))
  1038. 		set_nonblock(new_fd[0]);
          ^
  1039. 	if (!isatty(new_fd[1]))
  1040. 		set_nonblock(new_fd[1]);

#665
mux.c:1039: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1037. 	if (!isatty(new_fd[0]))
  1038. 		set_nonblock(new_fd[0]);
  1039. 	if (!isatty(new_fd[1]))
              ^
  1040. 		set_nonblock(new_fd[1]);
  1041. 

#666
mux.c:1040: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1038. 		set_nonblock(new_fd[0]);
  1039. 	if (!isatty(new_fd[1]))
  1040. 		set_nonblock(new_fd[1]);
          ^
  1041. 
  1042. 	nc = channel_connect_stdio_fwd(ssh, chost, cport, new_fd[0], new_fd[1]);

#667
mux.c:1042: error: Uninitialized Value
  The value read from new_fd[_] was never initialized.
  1040. 		set_nonblock(new_fd[1]);
  1041. 
  1042. 	nc = channel_connect_stdio_fwd(ssh, chost, cport, new_fd[0], new_fd[1]);
              ^
  1043. 	free(chost);
  1044. 

#668
krl.c:1172: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `ssh_krl_check_key`.
  1170. 	sig_seen = 0;
  1171. 	for (i = 0; i < nca_used; i++) {
  1172. 		if (ssh_krl_check_key(krl, ca_used[i]) == 0)
              ^
  1173. 			sig_seen = 1;
  1174. 		else {

#669
krl.c:1172: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `ssh_krl_check_key`.
  1170. 	sig_seen = 0;
  1171. 	for (i = 0; i < nca_used; i++) {
  1172. 		if (ssh_krl_check_key(krl, ca_used[i]) == 0)
              ^
  1173. 			sig_seen = 1;
  1174. 		else {

#670
krl.c:991: error: Dead Store
  The value written to &r (type int) is never used.
  989. 	struct ssh_krl *krl = NULL;
  990. 	char timestamp[64];
  991. 	int r = SSH_ERR_INTERNAL_ERROR, sig_seen;
        ^
  992. 	struct sshkey *key = NULL, **ca_used = NULL, **tmp_ca_used;
  993. 	u_char type;

#671
krl.c:1123: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  1121. 		goto out;
  1122. 	while (sshbuf_len(copy) > 0) {
  1123. 		sshbuf_free(sect);
          ^
  1124. 		sect = NULL;
  1125. 		if ((r = sshbuf_get_u8(copy, &type)) != 0 ||

#672
sshconnect2.c:1010: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1008. 	    (r = sshpkt_put_cstring(ssh, password)) != 0 ||
  1009. 	    (r = sshpkt_add_padding(ssh, 64)) != 0 ||
  1010. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  1011. 		fatal("%s: %s", __func__, ssh_err(r));
  1012. 

#673
sshconnect2.c:1007: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  1005. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  1006. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||
  1007. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 ||
                  ^
  1008. 	    (r = sshpkt_put_cstring(ssh, password)) != 0 ||
  1009. 	    (r = sshpkt_add_padding(ssh, 64)) != 0 ||

#674
sshconnect2.c:1004: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1002. 	password = read_passphrase(prompt, 0);
  1003. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||
  1004. 	    (r = sshpkt_put_cstring(ssh, authctxt->server_user)) != 0 ||
                  ^
  1005. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  1006. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||

#675
sshkey.c:992: error: Dead Store
  The value written to &r (type int) is never used.
  990. 	u_char *blob = NULL, *ret = NULL;
  991. 	size_t blob_len = 0;
  992. 	int r = SSH_ERR_INTERNAL_ERROR;
        ^
  993. 
  994. 	if (retp != NULL)

#676
auth2-pubkey.c:1020: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `auth_key_is_revoked`.
  1018. 		return 0;
  1019. 	if (sshkey_is_cert(key) &&
  1020. 	    auth_key_is_revoked(key->cert->signature_key))
             ^
  1021. 		return 0;
  1022. 

#677
ssh-keygen.c:1097: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sshkey_save_private`.
  1095. 		snprintf(comment, sizeof comment, "%s@%s", pw->pw_name,
  1096. 		    hostname);
  1097. 		if ((r = sshkey_save_private(private, prv_tmp, "",
                   ^
  1098. 		    comment, private_key_format, openssh_format_cipher,
  1099. 		    rounds)) != 0) {

#678
ssh-keygen.c:1097: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `sshkey_save_private`.
  1095. 		snprintf(comment, sizeof comment, "%s@%s", pw->pw_name,
  1096. 		    hostname);
  1097. 		if ((r = sshkey_save_private(private, prv_tmp, "",
                   ^
  1098. 		    comment, private_key_format, openssh_format_cipher,
  1099. 		    rounds)) != 0) {

#679
ssh-keygen.c:1097: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_save_private`.
  1095. 		snprintf(comment, sizeof comment, "%s@%s", pw->pw_name,
  1096. 		    hostname);
  1097. 		if ((r = sshkey_save_private(private, prv_tmp, "",
                   ^
  1098. 		    comment, private_key_format, openssh_format_cipher,
  1099. 		    rounds)) != 0) {

#680
ssh-keygen.c:1097: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_save_private`.
  1095. 		snprintf(comment, sizeof comment, "%s@%s", pw->pw_name,
  1096. 		    hostname);
  1097. 		if ((r = sshkey_save_private(private, prv_tmp, "",
                   ^
  1098. 		    comment, private_key_format, openssh_format_cipher,
  1099. 		    rounds)) != 0) {

#681
ssh-keygen.c:1146: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1144. 		}
  1145.  next:
  1146. 		sshkey_free(private);
          ^
  1147. 		sshkey_free(public);
  1148. 		free(prv_tmp);

#682
ssh-agent.c:1076: error: Integer Overflow L2
  ([0, +oo] - 262144):unsigned64 by call to `sshbuf_check_reserve`.
  1074. 			if ((r = sshbuf_check_reserve(sockets[i].input,
  1075. 			    AGENT_RBUF_LEN)) == 0 &&
  1076. 			    (r = sshbuf_check_reserve(sockets[i].output,
                    ^
  1077. 			     AGENT_MAX_LEN)) == 0)
  1078. 				pfd[j].events = POLLIN;

#683
ssh-agent.c:1074: error: Integer Overflow L2
  ([0, +oo] - 4096):unsigned64 by call to `sshbuf_check_reserve`.
  1072. 			 * input read buffer and enqueue a max size reply..
  1073. 			 */
  1074. 			if ((r = sshbuf_check_reserve(sockets[i].input,
                    ^
  1075. 			    AGENT_RBUF_LEN)) == 0 &&
  1076. 			    (r = sshbuf_check_reserve(sockets[i].output,

#684
sshconnect2.c:1087: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1085. 	if ((r = sshpkt_put_cstring(ssh, password)) != 0 ||
  1086. 	    (r = sshpkt_add_padding(ssh, 64)) != 0 ||
  1087. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  1088. 		goto out;
  1089. 

#685
sshconnect2.c:1052: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  1050. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  1051. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||
  1052. 	    (r = sshpkt_put_u8(ssh, 1)) != 0)	/* additional info */
                  ^
  1053. 		goto out;
  1054. 

#686
sshconnect2.c:1049: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1047. 		logit("%s", info);
  1048. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||
  1049. 	    (r = sshpkt_put_cstring(ssh, authctxt->server_user)) != 0 ||
                  ^
  1050. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  1051. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||

#687
sshkey.c:1042: error: Buffer Overrun S2
  Offset: [`alg->strlen` + 2, +oo] (<= [`alg->strlen` + 1, `alg->strlen` + 1] + [1, +oo]) Size: [`alg->strlen` + 2, 4.`dgst_raw_len` + `alg->strlen` + 10] by call to `__b64_ntop`.
  1040. 	if (dgst_raw_len == 0)
  1041. 		return ret;
  1042. 	if (b64_ntop(dgst_raw, dgst_raw_len, ret + plen, rlen - plen) == -1) {
             ^
  1043. 		freezero(ret, rlen);
  1044. 		return NULL;

#688
sshkey.c:1042: error: Buffer Overrun S2
  Offset: [`alg->strlen` + 3, +oo] (<= [`alg->strlen` + 1, `alg->strlen` + 1] + [2, +oo]) Size: [`alg->strlen` + 2, 4.`dgst_raw_len` + `alg->strlen` + 10] by call to `__b64_ntop`.
  1040. 	if (dgst_raw_len == 0)
  1041. 		return ret;
  1042. 	if (b64_ntop(dgst_raw, dgst_raw_len, ret + plen, rlen - plen) == -1) {
             ^
  1043. 		freezero(ret, rlen);
  1044. 		return NULL;

#689
sshkey.c:1042: error: Buffer Overrun S2
  Offset: [`alg->strlen` + 4, +oo] (<= [`alg->strlen` + 1, `alg->strlen` + 1] + [3, +oo]) Size: [`alg->strlen` + 2, 4.`dgst_raw_len` + `alg->strlen` + 10] by call to `__b64_ntop`.
  1040. 	if (dgst_raw_len == 0)
  1041. 		return ret;
  1042. 	if (b64_ntop(dgst_raw, dgst_raw_len, ret + plen, rlen - plen) == -1) {
             ^
  1043. 		freezero(ret, rlen);
  1044. 		return NULL;

#690
sntrup4591761.c:1043: error: Dead Store
  The value written to &c (type unsigned char*) is never used.
  1041.   }
  1042.   c0 = *f++ + 1;
  1043.   *c++ = c0;
           ^
  1044. }
  1045. 

#691
sntrup4591761.c:1042: error: Dead Store
  The value written to &f (type signed char const *) is never used.
  1040.     *c++ = c0;
  1041.   }
  1042.   c0 = *f++ + 1;
                ^
  1043.   *c++ = c0;
  1044. }

#692
packet.c:1066: error: Dead Store
  The value written to &len (type unsigned int) is never used.
  1064. 
  1065. 	if (comp && comp->enabled) {
  1066. 		len = sshbuf_len(state->outgoing_packet);
          ^
  1067. 		/* skip header, compress only payload */
  1068. 		if ((r = sshbuf_consume(state->outgoing_packet, 5)) != 0)

#693
packet.c:1071: error: Integer Overflow L2
  ([0, `ssh->state->outgoing_packet->size`] - [0, `ssh->state->outgoing_packet->off` + 5]):unsigned64 by call to `compress_buffer`.
  1069. 			goto out;
  1070. 		sshbuf_reset(state->compression_buffer);
  1071. 		if ((r = compress_buffer(ssh, state->outgoing_packet,
                   ^
  1072. 		    state->compression_buffer)) != 0)
  1073. 			goto out;

#694
channels.c:1063: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1061. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1062. 	    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||
  1063. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  1064. 		fatal("%s: channel %i: %s", __func__, c->self, ssh_err(r));
  1065. }

#695
channels.c:1061: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  1059. 
  1060. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_WINDOW_ADJUST)) != 0 ||
  1061. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
                  ^
  1062. 	    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||
  1063. 	    (r = sshpkt_send(ssh)) != 0)

#696
channels.c:1060: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  1058. 	c->local_window = c->local_window_max = window_max;
  1059. 
  1060. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_WINDOW_ADJUST)) != 0 ||
                  ^
  1061. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1062. 	    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||

#697
sntrup4591761.c:1058: error: Dead Store
  The value written to &c (type unsigned char const *) is never used.
  1056.     *f++ = ((small) (c0 & 3)) - 1;
  1057.   }
  1058.   c0 = *c++;
                ^
  1059.   *f++ = ((small) (c0 & 3)) - 1;
  1060. }

#698
sntrup4591761.c:1059: error: Dead Store
  The value written to &f (type signed char*) is never used.
  1057.   }
  1058.   c0 = *c++;
  1059.   *f++ = ((small) (c0 & 3)) - 1;
           ^
  1060. }
  1061. 

#699
kex.c:1085: error: Uninitialized Value
  The value read from keys[_] was never initialized.
  1083. 		ctos = (!kex->server && mode == MODE_OUT) ||
  1084. 		    (kex->server && mode == MODE_IN);
  1085. 		kex->newkeys[mode]->enc.iv  = keys[ctos ? 0 : 1];
          ^
  1086. 		kex->newkeys[mode]->enc.key = keys[ctos ? 2 : 3];
  1087. 		kex->newkeys[mode]->mac.key = keys[ctos ? 4 : 5];

#700
kex.c:1086: error: Uninitialized Value
  The value read from keys[_] was never initialized.
  1084. 		    (kex->server && mode == MODE_IN);
  1085. 		kex->newkeys[mode]->enc.iv  = keys[ctos ? 0 : 1];
  1086. 		kex->newkeys[mode]->enc.key = keys[ctos ? 2 : 3];
          ^
  1087. 		kex->newkeys[mode]->mac.key = keys[ctos ? 4 : 5];
  1088. 	}

#701
kex.c:1087: error: Uninitialized Value
  The value read from keys[_] was never initialized.
  1085. 		kex->newkeys[mode]->enc.iv  = keys[ctos ? 0 : 1];
  1086. 		kex->newkeys[mode]->enc.key = keys[ctos ? 2 : 3];
  1087. 		kex->newkeys[mode]->mac.key = keys[ctos ? 4 : 5];
          ^
  1088. 	}
  1089. 	return 0;

#702
sshd.c:1229: error: Dead Store
  The value written to &pid (type int) is never used.
  1227. 				close(startup_p[1]);
  1228. 				startup_pipe = -1;
  1229. 				pid = getpid();
            ^
  1230. 				if (rexec_flag) {
  1231. 					send_rexec_state(config_s[0], cfg);

#703
misc.c:1120: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [0, +oo] + [1, 18446744073709551615]) Size: [0, +oo] by call to `sshbuf_dup_string`.
  1118. 			fatal("%s: unknown key %%%c", __func__, *string);
  1119. 	}
  1120. 	if ((ret = sshbuf_dup_string(buf)) == NULL)
                    ^
  1121. 		fatal("%s: sshbuf_dup_string failed", __func__);
  1122. 	sshbuf_free(buf);

#704
scp.c:1083: error: Buffer Overrun L2
  Offset: [0, 4098] Size: 4096 by call to `strnvis`.
  1081. 			goto syserr;
  1082. 		if (strchr(name, '\n') != NULL) {
  1083. 			strnvis(encname, name, sizeof(encname), VIS_NL);
           ^
  1084. 			name = encname;
  1085. 		}

#705
scp.c:1070: error: Dead Store
  The value written to &fd (type int) is never used.
  1068. 	off_t i, statbytes;
  1069. 	size_t amt, nr;
  1070. 	int fd = -1, haderr, indx;
         ^
  1071. 	char *last, *name, buf[PATH_MAX + 128], encname[PATH_MAX];
  1072. 	int len;

#706
scp.c:1129: error: Dead Store
  The value written to &fd (type int) is never used.
  1127. next:			if (fd != -1) {
  1128. 				(void) close(fd);
  1129. 				fd = -1;
            ^
  1130. 			}
  1131. 			continue;

#707
scp.c:1162: error: Dead Store
  The value written to &fd (type int) is never used.
  1160. 			if (close(fd) == -1 && !haderr)
  1161. 				haderr = errno;
  1162. 			fd = -1;
           ^
  1163. 		}
  1164. 		if (!haderr)

#708
mux.c:1085: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `reply_error`.
  1083. 	if (!success) {
  1084. 		debug3("%s: sending failure reply", __func__);
  1085. 		reply_error(reply, MUX_S_FAILURE, cctx->rid,
          ^
  1086. 		    "Session open refused by peer");
  1087. 		/* prepare reply */

#709
sntrup4591761.c:1074: error: Null Dereference
  pointer `i` last assigned on line 1073 could be null and is dereferenced at line 1074, column 10.
  1072.   
  1073.   for (i = 0;i < bytes;++i) {
  1074.     xi = i[(char *) x];
                 ^
  1075.     yi = i[(char *) y];
  1076.     t = c & (xi ^ yi);

#710
sshkey.c:1113: error: Dead Store
  The value written to &j (type unsigned int) is never used.
  1111. 	}
  1112. 	retval[j++] = 'x';
  1113. 	retval[j++] = '\0';
                ^
  1114. 	return retval;
  1115. }

#711
auth.c:1088: error: Null Dereference
  pointer `restricted` last assigned on line 1087 could be null and is dereferenced at line 1088, column 2.
  1086. 	/* A blank sshauthopt defaults to permitting nothing */
  1087. 	restricted = sshauthopt_new();
  1088. 	restricted->permit_pty_flag = 1;
         ^
  1089. 	restricted->restricted = 1;
  1090. 

#712
sftp-server.c:1112: error: Dead Store
  The value written to &status (type int) is never used.
  1110. {
  1111. 	char *name;
  1112. 	int r, status = SSH2_FX_FAILURE;
         ^
  1113. 
  1114. 	if ((r = sshbuf_get_cstring(iqueue, &name, NULL)) != 0)

#713
mux.c:1129: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_free`.
  1127. 
  1128. 	if (mux_listener_channel != NULL) {
  1129. 		channel_free(ssh, mux_listener_channel);
          ^
  1130. 		client_stop_mux();
  1131. 		free(options.control_path);

#714
sftp-server.c:1130: error: Dead Store
  The value written to &status (type int) is never used.
  1128. 	Attrib a;
  1129. 	char *name;
  1130. 	int r, mode, status = SSH2_FX_FAILURE;
         ^
  1131. 
  1132. 	if ((r = sshbuf_get_cstring(iqueue, &name, NULL)) != 0 ||

#715
ssh-agent.c:1133: error: Unreachable Code
  Unreachable code after statement.
  1131. 	pkcs11_terminate();
  1132. #endif
  1133. 	_exit(2);
         ^
  1134. }
  1135. 

#716
channels.c:1149: error: Null Dereference
  pointer `ucp` last assigned on line 1148 could be null and is dereferenced at line 1149, column 6.
  1147. 	/* Parse the lengths of variable-length fields. */
  1148. 	ucp = sshbuf_mutable_ptr(b);
  1149. 	if (ucp[0] == 0x42) {	/* Byte order MSB first. */
             ^
  1150. 		proto_len = 256 * ucp[6] + ucp[7];
  1151. 		data_len = 256 * ucp[8] + ucp[9];

#717
ssh-agent.c:1146: error: Unreachable Code
  Unreachable code after statement.
  1144. 		/* printf("Parent has died - Authentication agent exiting.\n"); */
  1145. 		cleanup_socket();
  1146. 		_exit(2);
          ^
  1147. 	}
  1148. }

#718
sftp-client.c:1164: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `encode_attrib`.
  1162. 	    (r = sshbuf_put_cstring(msg, "lsetstat@openssh.com")) != 0 ||
  1163. 	    (r = sshbuf_put_cstring(msg, path)) != 0 ||
  1164. 	    (r = encode_attrib(msg, a)) != 0)
                  ^
  1165. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  1166. 	send_msg(conn, msg);

#719
sshconnect2.c:1204: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_check_sigtype`.
  1202. 	 * so check what we get back.
  1203. 	 */
  1204. 	if ((r = sshkey_check_sigtype(*sigp, *lenp, alg)) != 0) {
                  ^
  1205. 		debug("%s: sshkey_check_sigtype: %s", __func__, ssh_err(r));
  1206. 		goto out;

#720
sshconnect2.c:1152: error: Dead Store
  The value written to &r (type int) is never used.
  1150. {
  1151. 	struct sshkey *sign_key = NULL, *prv = NULL;
  1152. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  1153. 	struct notifier_ctx *notifier = NULL;
  1154. 	char *fp = NULL;

#721
sshconnect2.c:1212: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1210.  out:
  1211. 	notify_complete(notifier);
  1212. 	sshkey_free(prv);
         ^
  1213. 	return r;
  1214. }

#722
sshkey.c:1242: error: Dead Store
  The value written to &p (type char*) is never used.
  1240. 	for (i += hlen; i < FLDSIZE_X; i++)
  1241. 		*p++ = '-';
  1242. 	*p++ = '+';
          ^
  1243. 
  1244. 	return retval;

#723
monitor.c:1187: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `user_key_allowed`.
  1185. 			    options.pubkey_key_types))
  1186. 				break;
  1187. 			allowed = user_key_allowed(ssh, authctxt->pw, key,
                     ^
  1188. 			    pubkey_auth_attempt, &opts);
  1189. 			break;

#724
monitor.c:1240: error: Buffer Overrun L3
  Offset: [0, 2147483646] Size: [0, +oo] by call to `sshauthopt_serialise`.
  1238. 	if ((r = sshbuf_put_u32(m, allowed)) != 0)
  1239. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  1240. 	if (opts != NULL && (r = sshauthopt_serialise(opts, m, 1)) != 0)
                                  ^
  1241. 		fatal("%s: sshauthopt_serialise: %s", __func__, ssh_err(r));
  1242. 	mm_request_send(sock, MONITOR_ANS_KEYALLOWED, m);

#725
monitor.c:1187: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `user_key_allowed`.
  1185. 			    options.pubkey_key_types))
  1186. 				break;
  1187. 			allowed = user_key_allowed(ssh, authctxt->pw, key,
                     ^
  1188. 			    pubkey_auth_attempt, &opts);
  1189. 			break;

#726
monitor.c:1216: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `auth2_record_key`.
  1214. 	    allowed ? "allowed" : "not allowed");
  1215. 
  1216. 	auth2_record_key(authctxt, 0, key);
         ^
  1217. 
  1218. 	/* clear temporarily storage (used by verify) */

#727
monitor.c:1163: error: Integer Overflow L2
  ([0, `m->size`] - [0, `m->off` + 4]):unsigned64 by call to `sshbuf_get_cstring`.
  1161. 	debug3("%s entering", __func__);
  1162. 	if ((r = sshbuf_get_u32(m, &type)) != 0 ||
  1163. 	    (r = sshbuf_get_cstring(m, &cuser, NULL)) != 0 ||
                  ^
  1164. 	    (r = sshbuf_get_cstring(m, &chost, NULL)) != 0 ||
  1165. 	    (r = sshkey_froms(m, &key)) != 0 ||

#728
sshconnect.c:1259: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `sshkey_from_private`.
  1257. 	if (r == 0 && host_key != NULL) {
  1258. 		sshkey_free(previous_host_key);
  1259. 		r = sshkey_from_private(host_key, &previous_host_key);
              ^
  1260. 	}
  1261. 

#729
sshconnect.c:1254: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1252. 
  1253. out:
  1254. 	sshkey_free(plain);
         ^
  1255. 	free(fp);
  1256. 	free(cafp);

#730
sshconnect.c:1258: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1256. 	free(cafp);
  1257. 	if (r == 0 && host_key != NULL) {
  1258. 		sshkey_free(previous_host_key);
          ^
  1259. 		r = sshkey_from_private(host_key, &previous_host_key);
  1260. 	}

#731
mux.c:1222: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `reply_error`.
  1220. 	if (mux_master_handlers[i].handler == NULL) {
  1221. 		error("%s: unsupported mux message 0x%08x", __func__, type);
  1222. 		reply_error(out, MUX_S_FAILURE, rid, "unsupported request");
          ^
  1223. 		ret = 0;
  1224. 	}

#732
mux.c:1232: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  1230. 	}
  1231.  out:
  1232. 	sshbuf_free(in);
         ^
  1233. 	sshbuf_free(out);
  1234. 	return ret;

#733
kex.c:1265: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshbuf_put_u8`.
  1263. 				goto invalid;
  1264. 			}
  1265. 			if ((r = sshbuf_put_u8(peer_version, c)) != 0) {
                    ^
  1266. 				error("%s: sshbuf_put: %s",
  1267. 				    __func__, ssh_err(r));

#734
kex.c:1198: error: Integer Overflow L2
  ([0, +oo] - 2):unsigned64 by call to `sshbuf_consume_end`.
  1196. 		goto out;
  1197. 	}
  1198. 	if ((r = sshbuf_consume_end(our_version, 2)) != 0) { /* trim \r\n */
                  ^
  1199. 		error("%s: sshbuf_consume_end: %s", __func__, ssh_err(r));
  1200. 		goto out;

#735
sftp-client.c:1255: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `encode_attrib`.
  1253. 	    (r = sshbuf_put_cstring(msg, remote_path)) != 0 ||
  1254. 	    (r = sshbuf_put_u32(msg, SSH2_FXF_READ)) != 0 ||
  1255. 	    (r = encode_attrib(msg, &junk)) != 0)
                  ^
  1256. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  1257. 	send_msg(conn, msg);

#736
sftp-client.c:1204: error: Dead Store
  The value written to &local_fd (type int) is never used.
  1202. 	struct sshbuf *msg;
  1203. 	u_char *handle;
  1204. 	int local_fd = -1, write_error;
         ^
  1205. 	int read_error, write_errno, lmodified = 0, reordered = 0, r;
  1206. 	u_int64_t offset = 0, size, highwater;

#737
sftp-client.c:1363: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32.
  1361. 			TAILQ_REMOVE(&requests, req, tq);
  1362. 			free(req);
  1363. 			num_req--;
           ^
  1364. 			break;
  1365. 		case SSH2_FXP_DATA:

#738
packet.c:1263: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_need_rekeying`.
  1261. 			 * NB. re-enters this function via kex_start_rekex.
  1262. 			 */
  1263. 			if (ssh_packet_need_rekeying(ssh,
               ^
  1264. 			    sshbuf_len(p->payload))) {
  1265. 				debug3("%s: queued packet triggered rekex",

#739
packet.c:1270: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  1268. 			}
  1269. 			debug("dequeue packet: %u", type);
  1270. 			sshbuf_free(state->outgoing_packet);
           ^
  1271. 			state->outgoing_packet = p->payload;
  1272. 			TAILQ_REMOVE(&state->outgoing, p, next);

#740
packet.c:1275: error: Integer Overflow L2
  ([0, +oo] - 5):unsigned64 by call to `ssh_packet_send2_wrapped`.
  1273. 			memset(p, 0, sizeof(*p));
  1274. 			free(p);
  1275. 			if ((r = ssh_packet_send2_wrapped(ssh)) != 0)
                    ^
  1276. 				return r;
  1277. 		}

#741
servconf.c:1791: error: Dead Store
  The value written to &arg (type char*) is never used.
  1789. 			    filename, linenum);
  1790. 		if (!*activep) {
  1791. 			arg = strdelim(&cp);
           ^
  1792. 			break;
  1793. 		}

#742
servconf.c:1989: error: Dead Store
  The value written to &p (type char*) is never used.
  1987. 					    lookup_opcode_name(opcode));
  1988. 				}
  1989. 				p = cleanhostname(p);
            ^
  1990. 			}
  1991. 			if (arg == NULL ||

#743
servconf.c:1335: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `cleanhostname`.
  1333. 				fatal("%s line %d: bad address:port usage",
  1334. 				    filename, linenum);
  1335. 			p = cleanhostname(p);
               ^
  1336. 			if (arg == NULL)
  1337. 				port = 0;

#744
sshconnect2.c:1345: error: Inferbo Alloc May Be Big
  Length: [64, 1048640] by call to `identity_sign`.
  1343. 
  1344. 		/* generate signature */
  1345. 		r = identity_sign(sign_id, &signature, &slen,
              ^
  1346. 		    sshbuf_ptr(b), sshbuf_len(b), datafellows, alg);
  1347. 		if (r == 0)

#745
sshconnect2.c:1316: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  1314. 		debug3("%s: signing using %s", __func__, alg);
  1315. 
  1316. 		sshbuf_free(b);
          ^
  1317. 		if ((b = sshbuf_new()) == NULL)
  1318. 			fatal("%s: sshbuf_new failed", __func__);

#746
sshconnect2.c:1381: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1379. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||
  1380. 	    (r = sshpkt_putb(ssh, b)) != 0 ||
  1381. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  1382. 		fatal("%s: enqueue request: %s", __func__, ssh_err(r));
  1383. 

#747
sshconnect2.c:1368: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_string`.
  1366. 
  1367. 	/* append signature */
  1368. 	if ((r = sshbuf_put_string(b, signature, slen)) != 0)
                  ^
  1369. 		fatal("%s: append signature: %s", __func__, ssh_err(r));
  1370. 

#748
channels.c:1307: error: Integer Overflow L2
  ([0, `input->size`] - [0, `input->off` + 8]):unsigned64 by call to `sshbuf_consume`.
  1305. 	len++; /* trailing '\0' */
  1306. 	strlcpy(username, p, sizeof(username));
  1307. 	if ((r = sshbuf_consume(input, len)) != 0) {
                  ^
  1308. 		fatal("%s: channel %d: consume: %s", __func__,
  1309. 		    c->self, ssh_err(r));

#749
channels.c:1296: error: Integer Overflow L2
  ([0, `input->size`] - [0, `input->off` + 8]):unsigned64 by call to `sshbuf_len`.
  1294. 		return -1;
  1295. 	}
  1296. 	have = sshbuf_len(input);
                ^
  1297. 	p = sshbuf_ptr(input);
  1298. 	if (memchr(p, '\0', have) == NULL) {

#750
channels.c:1334: error: Integer Overflow L2
  ([0, `input->size`] - [0, `input->off` + `input->cd->strlen` + 9]):unsigned64 by call to `sshbuf_consume`.
  1332. 		}
  1333. 		c->path = xstrdup(p);
  1334. 		if ((r = sshbuf_consume(input, len)) != 0) {
                   ^
  1335. 			fatal("%s: channel %d: consume: %s", __func__,
  1336. 			    c->self, ssh_err(r));

#751
channels.c:1317: error: Integer Overflow L2
  ([0, `input->size`] - [0, `input->off` + `input->cd->strlen` + 9]):unsigned64 by call to `sshbuf_len`.
  1315. 		c->path = xstrdup(host);
  1316. 	} else {				/* SOCKS4A: two strings */
  1317. 		have = sshbuf_len(input);
                 ^
  1318. 		p = sshbuf_ptr(input);
  1319. 		if (memchr(p, '\0', have) == NULL) {

#752
channels.c:1268: error: Null Dereference
  pointer `p` last assigned on line 1264 could be null and is dereferenced at line 1268, column 6.
  1266. 	need = 1;
  1267. 	/* SOCKS4A uses an invalid IP address 0.0.0.x */
  1268. 	if (p[4] == 0 && p[5] == 0 && p[6] == 0 && p[7] != 0) {
             ^
  1269. 		debug2("channel %d: socks4a request", c->self);
  1270. 		/* ... and needs an extra string (the hostname) */

#753
clientloop.c:1422: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_send`.
  1420. 	    (r = sshpkt_put_cstring(ssh, "disconnected by user")) != 0 ||
  1421. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||	/* language tag */
  1422. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  1423. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  1424. 		fatal("%s: send disconnect: %s", __func__, ssh_err(r));

#754
clientloop.c:1383: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_after_select`.
  1381. 		/* Do channel operations unless rekeying in progress. */
  1382. 		if (!ssh_packet_is_rekeying(ssh))
  1383. 			channel_after_select(ssh, readset, writeset);
           ^
  1384. 
  1385. 		/* Buffer input from the connection.  */

#755
clientloop.c:1422: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1420. 	    (r = sshpkt_put_cstring(ssh, "disconnected by user")) != 0 ||
  1421. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||	/* language tag */
  1422. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  1423. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  1424. 		fatal("%s: send disconnect: %s", __func__, ssh_err(r));

#756
sshkey.c:1260: error: Buffer Overrun L2
  Offset: [0, 65535] Size: 64 by call to `fingerprint_hex`.
  1258. 	case SSH_FP_DEFAULT:
  1259. 		if (dgst_alg == SSH_DIGEST_MD5) {
  1260. 			retval = fingerprint_hex(ssh_digest_alg_name(dgst_alg),
                    ^
  1261. 			    dgst_raw, dgst_raw_len);
  1262. 		} else {

#757
sshkey.c:1268: error: Buffer Overrun L2
  Offset: [0, 65535] Size: 64 by call to `fingerprint_hex`.
  1266. 		break;
  1267. 	case SSH_FP_HEX:
  1268. 		retval = fingerprint_hex(ssh_digest_alg_name(dgst_alg),
                   ^
  1269. 		    dgst_raw, dgst_raw_len);
  1270. 		break;

#758
sshkey.c:1263: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, 7] + [2, +oo]) Size: [5, +oo] by call to `fingerprint_b64`.
  1261. 			    dgst_raw, dgst_raw_len);
  1262. 		} else {
  1263. 			retval = fingerprint_b64(ssh_digest_alg_name(dgst_alg),
                    ^
  1264. 			    dgst_raw, dgst_raw_len);
  1265. 		}

#759
sshkey.c:1272: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, 7] + [2, +oo]) Size: [5, +oo] by call to `fingerprint_b64`.
  1270. 		break;
  1271. 	case SSH_FP_BASE64:
  1272. 		retval = fingerprint_b64(ssh_digest_alg_name(dgst_alg),
                   ^
  1273. 		    dgst_raw, dgst_raw_len);
  1274. 		break;

#760
sshkey.c:1263: error: Integer Overflow L2
  ([5, +oo] - [4, 7]):unsigned64 by call to `fingerprint_b64`.
  1261. 			    dgst_raw, dgst_raw_len);
  1262. 		} else {
  1263. 			retval = fingerprint_b64(ssh_digest_alg_name(dgst_alg),
                    ^
  1264. 			    dgst_raw, dgst_raw_len);
  1265. 		}

#761
sshkey.c:1272: error: Integer Overflow L2
  ([5, +oo] - [4, 7]):unsigned64 by call to `fingerprint_b64`.
  1270. 		break;
  1271. 	case SSH_FP_BASE64:
  1272. 		retval = fingerprint_b64(ssh_digest_alg_name(dgst_alg),
                   ^
  1273. 		    dgst_raw, dgst_raw_len);
  1274. 		break;

#762
krl.c:1298: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `revoked_certs_for_ca_key`.
  1296. 
  1297. 	/* Check cert revocation for the specified CA */
  1298. 	if ((r = revoked_certs_for_ca_key(krl, key->cert->signature_key,
                  ^
  1299. 	    &rc, 0)) != 0)
  1300. 		return r;

#763
sshconnect.c:1296: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_kex2`.
  1294. 	/* authenticate user */
  1295. 	debug("Authenticating to %s:%d as '%s'", host, port, server_user);
  1296. 	ssh_kex2(ssh, host, hostaddr, port);
         ^
  1297. 	ssh_userauth2(ssh, local_user, server_user, host, sensitive);
  1298. 	free(local_user);

#764
packet.c:1335: error: Uninitialized Value
  The value read from ms_remain was never initialized.
  1333. 		for (;;) {
  1334. 			if (state->packet_timeout_ms != -1) {
  1335. 				ms_to_timeval(&timeout, ms_remain);
            ^
  1336. 				monotime_tv(&start);
  1337. 			}

#765
sshkey.c:1376: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_fromb`.
  1374. 	}
  1375. 	free(blobcopy);
  1376. 	if ((r = sshkey_fromb(blob, &k)) != 0) {
                  ^
  1377. 		sshbuf_free(blob);
  1378. 		return r;

#766
sshkey.c:1376: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: [0, +oo] by call to `sshkey_fromb`.
  1374. 	}
  1375. 	free(blobcopy);
  1376. 	if ((r = sshkey_fromb(blob, &k)) != 0) {
                  ^
  1377. 		sshbuf_free(blob);
  1378. 		return r;

#767
sshkey.c:1388: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1386. 	/* ensure type of blob matches type at start of line */
  1387. 	if (k->type != type) {
  1388. 		sshkey_free(k);
          ^
  1389. 		return SSH_ERR_KEY_TYPE_MISMATCH;
  1390. 	}

#768
krl.c:1327: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `is_key_revoked`.
  1325. 	if (sshkey_is_cert(key)) {
  1326. 		debug2("%s: checking CA key", __func__);
  1327. 		if ((r = is_key_revoked(krl, key->cert->signature_key)) != 0)
                   ^
  1328. 			return r;
  1329. 	}

#769
sftp.c:1385: error: Dead Store
  The value written to &optidx (type int) is never used.
  1383. 	*rflag = *sflag = 0;
  1384. 	*path1 = *path2 = NULL;
  1385. 	optidx = 1;
         ^
  1386. 	switch (cmdnum) {
  1387. 	case I_GET:

#770
krl.c:1362: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  1360. 	if (fd != -1)
  1361. 		close(fd);
  1362. 	sshbuf_free(krlbuf);
         ^
  1363. 	ssh_krl_free(krl);
  1364. 	if (r != 0)

#771
session.c:1397: error: Buffer Overrun L3
  Offset: 0 Size: [0, 18446744073709551616] by call to `safely_chroot`.
  1395. 			chroot_path = percent_expand(tmp, "h", pw->pw_dir,
  1396. 			    "u", pw->pw_name, "U", uidstr, (char *)NULL);
  1397. 			safely_chroot(chroot_path, pw->pw_uid);
           ^
  1398. 			free(tmp);
  1399. 			free(chroot_path);

#772
channels.c:1461: error: Integer Overflow L2
  ([0, `input->size`] - [0, `input->off` + 4]):unsigned64 by call to `sshbuf_consume`.
  1459. 	if (s5_req.atyp == SSH_SOCKS5_DOMAIN) {
  1460. 		/* host string length */
  1461. 		if ((r = sshbuf_consume(input, 1)) != 0) {
                   ^
  1462. 			fatal("%s: channel %d: consume: %s", __func__,
  1463. 			    c->self, ssh_err(r));

#773
channels.c:1466: error: Integer Overflow L2
  ([0, `input->size`] - [0, `input->off` + 5]):unsigned64 by call to `sshbuf_get`.
  1464. 		}
  1465. 	}
  1466. 	if ((r = sshbuf_get(input, &dest_addr, addrlen)) != 0 ||
                  ^
  1467. 	    (r = sshbuf_get(input, &dest_port, 2)) != 0) {
  1468. 		debug("channel %d: parse addr/port: %s", c->self, ssh_err(r));

#774
channels.c:1387: error: Null Dereference
  pointer `p` last assigned on line 1386 could be null and is dereferenced at line 1387, column 6.
  1385. 	debug2("channel %d: decode socks5", c->self);
  1386. 	p = sshbuf_ptr(input);
  1387. 	if (p[0] != 0x05)
             ^
  1388. 		return -1;
  1389. 	have = sshbuf_len(input);

#775
mux.c:1391: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `reply_error`.
  1389. 	if (!success) {
  1390. 		debug3("%s: sending failure reply", __func__);
  1391. 		reply_error(reply, MUX_S_FAILURE, cctx->rid,
          ^
  1392. 		    "Session open refused by peer");
  1393. 		goto done;

#776
mux.c:1418: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `sshpkt_send`.
  1416. 		debug("Requesting authentication agent forwarding.");
  1417. 		channel_request_start(ssh, id, "auth-agent-req@openssh.com", 0);
  1418. 		if ((r = sshpkt_send(ssh)) != 0)
                   ^
  1419. 			fatal("%s: packet error: %s", __func__, ssh_err(r));
  1420. 	}

#777
mux.c:1442: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `sshbuf_free`.
  1440. 	cc->mux_pause = 0; /* start processing messages again */
  1441. 	c->open_confirm_ctx = NULL;
  1442. 	sshbuf_free(cctx->cmd);
         ^
  1443. 	free(cctx->term);
  1444. 	if (cctx->env != NULL) {

#778
mux.c:1418: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1416. 		debug("Requesting authentication agent forwarding.");
  1417. 		channel_request_start(ssh, id, "auth-agent-req@openssh.com", 0);
  1418. 		if ((r = sshpkt_send(ssh)) != 0)
                   ^
  1419. 			fatal("%s: packet error: %s", __func__, ssh_err(r));
  1420. 	}

#779
sshconnect.c:1393: error: Unreachable Code
  Unreachable code after statement.
  1391. 		error("Couldn't execute %s -c \"%s\": %s",
  1392. 		    shell, args, strerror(errno));
  1393. 		_exit(1);
          ^
  1394. 	} else if (pid == -1)
  1395. 		fatal("fork failed: %.100s", strerror(errno));

#780
monitor.c:1456: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `auth2_record_key`.
  1454. 		}
  1455. 	}
  1456. 	auth2_record_key(authctxt, ret == 0, key);
         ^
  1457. 
  1458. 	if (key_blobtype == MM_USERKEY)

#781
monitor.c:1456: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `auth2_record_key`.
  1454. 		}
  1455. 	}
  1456. 	auth2_record_key(authctxt, ret == 0, key);
         ^
  1457. 
  1458. 	if (key_blobtype == MM_USERKEY)

#782
monitor.c:1456: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `auth2_record_key`.
  1454. 		}
  1455. 	}
  1456. 	auth2_record_key(authctxt, ret == 0, key);
         ^
  1457. 
  1458. 	if (key_blobtype == MM_USERKEY)

#783
ssh-keygen.c:1449: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sshkey_save_private`.
  1447. 
  1448. 	/* Save the file using the new passphrase. */
  1449. 	if ((r = sshkey_save_private(private, identity_file, passphrase1,
                  ^
  1450. 	    comment, private_key_format, openssh_format_cipher, rounds)) != 0) {
  1451. 		error("Saving key \"%s\" failed: %s.",

#784
ssh-keygen.c:1449: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `sshkey_save_private`.
  1447. 
  1448. 	/* Save the file using the new passphrase. */
  1449. 	if ((r = sshkey_save_private(private, identity_file, passphrase1,
                  ^
  1450. 	    comment, private_key_format, openssh_format_cipher, rounds)) != 0) {
  1451. 		error("Saving key \"%s\" failed: %s.",

#785
ssh-keygen.c:1455: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1453. 		explicit_bzero(passphrase1, strlen(passphrase1));
  1454. 		free(passphrase1);
  1455. 		sshkey_free(private);
          ^
  1456. 		free(comment);
  1457. 		exit(1);

#786
sshd.c:1427: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  1425. 		fatal("%s: ssh_digest_update", __func__);
  1426. 	sshbuf_reset(buf);
  1427. 	sshbuf_free(buf);
         ^
  1428. }
  1429. 

#787
packet.c:1403: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_disconnect`.
  1401. 		return r;
  1402. 	if (type != expected_type) {
  1403. 		if ((r = sshpkt_disconnect(ssh,
                   ^
  1404. 		    "Protocol error: expected packet type %d, got %d",
  1405. 		    expected_type, type)) != 0)

#788
packet.c:1403: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_disconnect`.
  1401. 		return r;
  1402. 	if (type != expected_type) {
  1403. 		if ((r = sshpkt_disconnect(ssh,
                   ^
  1404. 		    "Protocol error: expected packet type %d, got %d",
  1405. 		    expected_type, type)) != 0)

#789
sshconnect2.c:1425: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1423. 	    (r = sshpkt_put_cstring(ssh, alg)) != 0 ||
  1424. 	    (r = sshpkt_put_string(ssh, blob, bloblen)) != 0 ||
  1425. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  1426. 		fatal("%s: %s", __func__, ssh_err(r));
  1427. 	sent = 1;

#790
sshconnect2.c:1422: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  1420. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  1421. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||
  1422. 	    (r = sshpkt_put_u8(ssh, have_sig)) != 0 ||
                  ^
  1423. 	    (r = sshpkt_put_cstring(ssh, alg)) != 0 ||
  1424. 	    (r = sshpkt_put_string(ssh, blob, bloblen)) != 0 ||

#791
sshconnect2.c:1419: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1417. 
  1418. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||
  1419. 	    (r = sshpkt_put_cstring(ssh, authctxt->server_user)) != 0 ||
                  ^
  1420. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  1421. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||

#792
packet.c:1440: error: Integer Overflow L2
  ([0, +oo] - [0, `ssh->state->incoming_packet->size` + 1]):unsigned64 by call to `sshbuf_get_u8`.
  1438. 	    (r = sshbuf_consume(state->input, need)) != 0 ||
  1439. 	    (r = sshbuf_get_u8(state->incoming_packet, NULL)) != 0 ||
  1440. 	    (r = sshbuf_get_u8(state->incoming_packet, typep)) != 0)
                  ^
  1441. 		return r;
  1442. 	if (ssh_packet_log_type(*typep))

#793
packet.c:1427: error: Null Dereference
  pointer `cp` last assigned on line 1423 could be null and is dereferenced at line 1427, column 20.
  1425. 		if (sshbuf_len(state->input) < 4 + 1)
  1426. 			return 0; /* packet is incomplete */
  1427. 		state->packlen = PEEK_U32(cp);
                           ^
  1428. 		if (state->packlen < 4 + 1 ||
  1429. 		    state->packlen > PACKET_MAX_SIZE)

#794
sshd.c:1650: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [0, +oo] + [1, 18446744073709551615]) Size: [0, +oo] by call to `parse_server_config`.
  1648. 		load_server_config(config_file_name, cfg);
  1649. 
  1650. 	parse_server_config(&options, rexeced_flag ? "rexec" : config_file_name,
         ^
  1651. 	    cfg, NULL);
  1652. 

#795
sshd.c:1750: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `sshkey_shield_private`.
  1748. 		}
  1749. 		if (r == 0 && key != NULL &&
  1750. 		    (r = sshkey_shield_private(key)) != 0) {
                   ^
  1751. 			do_log2(ll, "Unable to shield host key \"%s\": %s",
  1752. 			    options.host_key_files[i], ssh_err(r));

#796
sshd.c:1750: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_shield_private`.
  1748. 		}
  1749. 		if (r == 0 && key != NULL &&
  1750. 		    (r = sshkey_shield_private(key)) != 0) {
                   ^
  1751. 			do_log2(ll, "Unable to shield host key \"%s\": %s",
  1752. 			    options.host_key_files[i], ssh_err(r));

#797
sshd.c:1750: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `sshkey_shield_private`.
  1748. 		}
  1749. 		if (r == 0 && key != NULL &&
  1750. 		    (r = sshkey_shield_private(key)) != 0) {
                   ^
  1751. 			do_log2(ll, "Unable to shield host key \"%s\": %s",
  1752. 			    options.host_key_files[i], ssh_err(r));

#798
sshd.c:1801: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `accumulate_host_timing_secret`.
  1799. 		free(fp);
  1800. 	}
  1801. 	accumulate_host_timing_secret(cfg, NULL);
         ^
  1802. 	if (!sensitive_data.have_ssh2_key) {
  1803. 		logit("sshd: no hostkeys available -- exiting.");

#799
sshd.c:1801: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `accumulate_host_timing_secret`.
  1799. 		free(fp);
  1800. 	}
  1801. 	accumulate_host_timing_secret(cfg, NULL);
         ^
  1802. 	if (!sensitive_data.have_ssh2_key) {
  1803. 		logit("sshd: no hostkeys available -- exiting.");

#800
sshd.c:1753: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshkey_free`.
  1751. 			do_log2(ll, "Unable to shield host key \"%s\": %s",
  1752. 			    options.host_key_files[i], ssh_err(r));
  1753. 			sshkey_free(key);
           ^
  1754. 			key = NULL;
  1755. 		}

#801
sshconnect2.c:1496: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `maybe_add_key_to_agent`.
  1494. 		if (!quit && private != NULL && id->agent_fd == -1 &&
  1495. 		    !(id->key && id->isprivate))
  1496. 			maybe_add_key_to_agent(id->filename, private, comment,
           ^
  1497. 			    passphrase);
  1498. 		if (i > 0)

#802
sshconnect2.c:1496: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `maybe_add_key_to_agent`.
  1494. 		if (!quit && private != NULL && id->agent_fd == -1 &&
  1495. 		    !(id->key && id->isprivate))
  1496. 			maybe_add_key_to_agent(id->filename, private, comment,
           ^
  1497. 			    passphrase);
  1498. 		if (i > 0)

#803
sshconnect2.c:1496: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `maybe_add_key_to_agent`.
  1494. 		if (!quit && private != NULL && id->agent_fd == -1 &&
  1495. 		    !(id->key && id->isprivate))
  1496. 			maybe_add_key_to_agent(id->filename, private, comment,
           ^
  1497. 			    passphrase);
  1498. 		if (i > 0)

#804
sshconnect2.c:1496: error: Buffer Overrun L3
  Offset: [6, +oo] (<= [4, +oo] + 2) Size: [0, +oo] by call to `maybe_add_key_to_agent`.
  1494. 		if (!quit && private != NULL && id->agent_fd == -1 &&
  1495. 		    !(id->key && id->isprivate))
  1496. 			maybe_add_key_to_agent(id->filename, private, comment,
           ^
  1497. 			    passphrase);
  1498. 		if (i > 0)

#805
sshconnect2.c:1490: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshkey_free`.
  1488. 			debug("key \"%s\" is a security key, but no "
  1489. 			    "provider specified", id->filename);
  1490. 			sshkey_free(private);
           ^
  1491. 			private = NULL;
  1492. 			quit = 1;

#806
packet.c:1539: error: Integer Overflow L2
  ([5, 4+max(262144, `ssh->state->packlen`)] - [min(8, `ssh->state->newkeys[*]->enc.block_size`), max(8, `ssh->state->newkeys[*]->enc.block_size`)]):unsigned32.
  1537. 		 * have a partial packet of block_size bytes
  1538. 		 */
  1539. 		need = 4 + state->packlen - block_size;
          ^
  1540. 	}
  1541. 	DBG(debug("partial packet: block %d, need %d, maclen %d, authlen %d,"

#807
sftp-server.c:1480: error: Null Dereference
  pointer `cp` last assigned on line 1479 could be null and is dereferenced by call to `get_u32()` at line 1480, column 12.
  1478. 		return;		/* Incomplete message. */
  1479. 	cp = sshbuf_ptr(iqueue);
  1480. 	msg_len = get_u32(cp);
                   ^
  1481. 	if (msg_len > SFTP_MAX_MSG_LENGTH) {
  1482. 		error("bad message from %s local user %s",

#808
ssh-keygen.c:1492: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1490. 		    fname, ssh_err(r));
  1491. 	export_dns_rr(hname, public, stdout, print_generic);
  1492. 	sshkey_free(public);
         ^
  1493. 	free(comment);
  1494. 	return 1;

#809
clientloop.c:1541: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_stringb`.
  1539. 		    (r = sshbuf_put_cstring(b, originator_address)) != 0 ||
  1540. 		    (r = sshbuf_put_u32(b, originator_port)) != 0 ||
  1541. 		    (r = sshbuf_put_stringb(c->output, b)) != 0) {
                   ^
  1542. 			error("%s: compose for muxclient %s", __func__,
  1543. 			    ssh_err(r));

#810
sshkey.c:1509: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `sshkey_putb`.
  1507. 	if ((b = sshbuf_new()) == NULL)
  1508. 		return SSH_ERR_ALLOC_FAIL;
  1509. 	if ((r = sshkey_putb(key, b)) != 0)
                  ^
  1510. 		goto out;
  1511. 	if ((uu = sshbuf_dtob64_string(b, 0)) == NULL) {

#811
sshkey.c:1511: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, +oo] by call to `sshbuf_dtob64_string`.
  1509. 	if ((r = sshkey_putb(key, b)) != 0)
  1510. 		goto out;
  1511. 	if ((uu = sshbuf_dtob64_string(b, 0)) == NULL) {
                   ^
  1512. 		r = SSH_ERR_ALLOC_FAIL;
  1513. 		goto out;

#812
sshkey.c:1501: error: Dead Store
  The value written to &r (type int) is never used.
  1499. sshkey_to_base64(const struct sshkey *key, char **b64p)
  1500. {
  1501. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  1502. 	struct sshbuf *b = NULL;
  1503. 	char *uu = NULL;

#813
ssh-keygen.c:1572: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sshkey_save_private`.
  1570. 
  1571. 	/* Save the file using the new passphrase. */
  1572. 	if ((r = sshkey_save_private(private, identity_file, passphrase,
                  ^
  1573. 	    new_comment, private_key_format, openssh_format_cipher,
  1574. 	    rounds)) != 0) {

#814
ssh-keygen.c:1572: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `sshkey_save_private`.
  1570. 
  1571. 	/* Save the file using the new passphrase. */
  1572. 	if ((r = sshkey_save_private(private, identity_file, passphrase,
                  ^
  1573. 	    new_comment, private_key_format, openssh_format_cipher,
  1574. 	    rounds)) != 0) {

#815
ssh-keygen.c:1579: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1577. 		explicit_bzero(passphrase, strlen(passphrase));
  1578. 		free(passphrase);
  1579. 		sshkey_free(private);
          ^
  1580. 		free(comment);
  1581. 		exit(1);

#816
session.c:1524: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_clear_keys`.
  1522. 	/* remove hostkey from the child's memory */
  1523. 	destroy_sensitive_data();
  1524. 	ssh_packet_clear_keys(ssh);
         ^
  1525. 
  1526. 	/* Force a password change */

#817
sshkey.c:1530: error: Dead Store
  The value written to &r (type int) is never used.
  1528. sshkey_format_text(const struct sshkey *key, struct sshbuf *b)
  1529. {
  1530. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  1531. 	char *uu = NULL;
  1532. 

#818
sftp.c:1595: error: Buffer Overrun L3
  Offset: [0, +oo] Size: [0, +oo] by call to `remote_glob`.
  1593. 	case I_RM:
  1594. 		path1 = make_absolute(path1, *pwd);
  1595. 		remote_glob(conn, path1, GLOB_NOCHECK, NULL, &g);
          ^
  1596. 		for (i = 0; g.gl_pathv[i] && !interrupted; i++) {
  1597. 			if (!quiet)

#819
sftp.c:1595: error: Inferbo Alloc May Be Negative
  Length: [-9223372036854775805, +oo] by call to `remote_glob`.
  1593. 	case I_RM:
  1594. 		path1 = make_absolute(path1, *pwd);
  1595. 		remote_glob(conn, path1, GLOB_NOCHECK, NULL, &g);
          ^
  1596. 		for (i = 0; g.gl_pathv[i] && !interrupted; i++) {
  1597. 			if (!quiet)

#820
sftp.c:1569: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `process_get`.
  1567. 		/* FALLTHROUGH */
  1568. 	case I_GET:
  1569. 		err = process_get(conn, path1, path2, *pwd, pflag,
                ^
  1570. 		    rflag, aflag, fflag);
  1571. 		break;

#821
sftp.c:1595: error: Integer Overflow L2
  ([0, 9223372036854775807] - [0, 9223372036854775805]):unsigned64 by call to `remote_glob`.
  1593. 	case I_RM:
  1594. 		path1 = make_absolute(path1, *pwd);
  1595. 		remote_glob(conn, path1, GLOB_NOCHECK, NULL, &g);
          ^
  1596. 		for (i = 0; g.gl_pathv[i] && !interrupted; i++) {
  1597. 			if (!quiet)

#822
channels.c:1549: error: Null Dereference
  pointer `p` last assigned on line 1547 could be null and is dereferenced at line 1549, column 10.
  1547. 	p = sshbuf_ptr(c->input);
  1548. 	/* XXX sshbuf_peek_u8? */
  1549. 	switch (p[0]) {
                 ^
  1550. 	case 0x04:
  1551. 		ret = channel_decode_socks4(c, c->input, c->output);

#823
sftp-server.c:1549: error: Unreachable Code
  Unreachable code after statement.
  1547. 		    pw->pw_name, client_addr);
  1548. 	}
  1549. 	_exit(i);
         ^
  1550. }
  1551. 

#824
sshkey.c:1548: error: Dead Store
  The value written to &r (type int) is never used.
  1546. {
  1547. 	struct sshbuf *b = NULL;
  1548. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  1549. 
  1550. 	if ((b = sshbuf_new()) == NULL)

#825
sshconnect2.c:1645: error: Buffer Overrun L3
  Offset: [0, 2047] Size: [0, 2048] by call to `ssh_free_identitylist`.
  1643. 			}
  1644. 		}
  1645. 		ssh_free_identitylist(idlist);
          ^
  1646. 		/* append remaining agent keys */
  1647. 		for (id = TAILQ_FIRST(&agent); id; id = TAILQ_FIRST(&agent)) {

#826
sshconnect2.c:1687: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1685. 			    sshkey_ssh_name(id->key), id->filename);
  1686. 			TAILQ_REMOVE(preferred, id, next);
  1687. 			sshkey_free(id->key);
           ^
  1688. 			free(id->filename);
  1689. 			memset(id, 0, sizeof(*id));

#827
mux.c:1590: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo].
  1588. 		return -1;
  1589. 	}
  1590. 	need = PEEK_U32(sshbuf_ptr(queue));
                ^
  1591. 	if (mux_client_read(fd, queue, need) != 0) {
  1592. 		oerrno = errno;

#828
sshkey.c:1586: error: Dead Store
  The value written to &ret (type int) is never used.
  1584. 	RSA *private = NULL;
  1585. 	BIGNUM *f4 = NULL;
  1586. 	int ret = SSH_ERR_INTERNAL_ERROR;
         ^
  1587. 
  1588. 	if (rsap == NULL)

#829
channels.c:1634: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1632. 			    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1633. 			    (r = sshpkt_put_stringb(ssh, c->input)) != 0 ||
  1634. 			    (r = sshpkt_send(ssh)) != 0) {
                    ^
  1635. 				fatal("%s: channel %i: rdynamic: %s", __func__,
  1636. 				    c->self, ssh_err(r));

#830
channels.c:1631: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  1629. 		len = sshbuf_len(c->input);
  1630. 		if (len > 0 && len < c->remote_window) {
  1631. 			if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_DATA)) != 0 ||
                    ^
  1632. 			    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1633. 			    (r = sshpkt_put_stringb(ssh, c->input)) != 0 ||

#831
channels.c:1633: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_stringb`.
  1631. 			if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_DATA)) != 0 ||
  1632. 			    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1633. 			    (r = sshpkt_put_stringb(ssh, c->input)) != 0 ||
                    ^
  1634. 			    (r = sshpkt_send(ssh)) != 0) {
  1635. 				fatal("%s: channel %i: rdynamic: %s", __func__,

#832
channels.c:1625: error: Integer Overflow L2
  ([0, `c->input->size` + 10] - [0, `c->input->size` + 10]):unsigned64 by call to `rdynamic_close`.
  1623. 	}
  1624. 	if (ret < 0) {
  1625. 		rdynamic_close(ssh, c);
          ^
  1626. 	} else if (ret == 0) {
  1627. 		debug2("channel %d: pre_rdynamic: need more", c->self);

#833
channels.c:1612: error: Null Dereference
  pointer `p` last assigned on line 1611 could be null and is dereferenced at line 1612, column 10.
  1610. 	/* try to guess the protocol */
  1611. 	p = sshbuf_ptr(c->output);
  1612. 	switch (p[0]) {
                 ^
  1613. 	case 0x04:
  1614. 		/* switch input/output for reverse forwarding */

#834
sftp-client.c:1602: error: Buffer Overrun L3
  Offset: [-1, +oo] Size: [0, +oo] by call to `download_dir_internal`.
  1600. 	}
  1601. 
  1602. 	ret = download_dir_internal(conn, src_canon, dst, 0,
               ^
  1603. 	    dirattrib, preserve_flag, print_flag, resume_flag, fsync_flag);
  1604. 	free(src_canon);

#835
sftp-client.c:1602: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `download_dir_internal`.
  1600. 	}
  1601. 
  1602. 	ret = download_dir_internal(conn, src_canon, dst, 0,
               ^
  1603. 	    dirattrib, preserve_flag, print_flag, resume_flag, fsync_flag);
  1604. 	free(src_canon);

#836
ssh.c:1630: error: Resource Leak
  resource acquired by call to `open()` at line 1621, column 17 is not released after line 1630, column 7.
  1628. 		    (!keep_stderr && dup2(devnull, STDERR_FILENO) == -1))
  1629. 			error("%s: dup2: %s", __func__, strerror(errno));
  1630. 		if (devnull > STDERR_FILENO)
              ^
  1631. 			close(devnull);
  1632. 	}

#837
mux.c:1632: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  1630. 	}
  1631. 
  1632. 	if ((r = sshbuf_get_u32(m, &type)) != 0)
                  ^
  1633. 		fatal("%s: decode type: %s", __func__, ssh_err(r));
  1634. 	if (type != MUX_MSG_HELLO) {

#838
sftp-client.c:1689: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `encode_attrib`.
  1687. 	    (r = sshbuf_put_u32(msg, SSH2_FXF_WRITE|SSH2_FXF_CREAT|
  1688. 	    (resume ? SSH2_FXF_APPEND : SSH2_FXF_TRUNC))) != 0 ||
  1689. 	    (r = encode_attrib(msg, &a)) != 0)
                  ^
  1690. 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
  1691. 	send_msg(conn, msg);

#839
sshkey.c:1616: error: Dead Store
  The value written to &ret (type int) is never used.
  1614. {
  1615. 	DSA *private;
  1616. 	int ret = SSH_ERR_INTERNAL_ERROR;
         ^
  1617. 
  1618. 	if (dsap == NULL)

#840
clientloop.c:1677: error: Integer Overflow L2
  ([-3, 134217735] - [0, 7]):unsigned64 by call to `sshpkt_put_cstring`.
  1675. 
  1676. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN)) != 0 ||
  1677. 	    (r = sshpkt_put_cstring(ssh, "tun@openssh.com")) != 0 ||
                  ^
  1678. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||
  1679. 	    (r = sshpkt_put_u32(ssh, c->local_window_max)) != 0 ||

#841
clientloop.c:1677: error: Integer Overflow L2
  ([-7, 7] - [0, 7]):unsigned64 by call to `sshpkt_put_cstring`.
  1675. 
  1676. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN)) != 0 ||
  1677. 	    (r = sshpkt_put_cstring(ssh, "tun@openssh.com")) != 0 ||
                  ^
  1678. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||
  1679. 	    (r = sshpkt_put_u32(ssh, c->local_window_max)) != 0 ||

#842
clientloop.c:1684: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1682. 	    (r = sshpkt_put_u32(ssh, remote_tun)) != 0 ||
  1683. 	    (r = sshpkt_send(ssh)) != 0)
  1684. 		sshpkt_fatal(ssh, r, "%s: send reply", __func__);
          ^
  1685. 
  1686. 	return ifname;

#843
clientloop.c:1683: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1681. 	    (r = sshpkt_put_u32(ssh, tun_mode)) != 0 ||
  1682. 	    (r = sshpkt_put_u32(ssh, remote_tun)) != 0 ||
  1683. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  1684. 		sshpkt_fatal(ssh, r, "%s: send reply", __func__);
  1685. 

#844
clientloop.c:1678: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  1676. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN)) != 0 ||
  1677. 	    (r = sshpkt_put_cstring(ssh, "tun@openssh.com")) != 0 ||
  1678. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||
                  ^
  1679. 	    (r = sshpkt_put_u32(ssh, c->local_window_max)) != 0 ||
  1680. 	    (r = sshpkt_put_u32(ssh, c->local_maxpacket)) != 0 ||

#845
clientloop.c:1677: error: Integer Overflow L2
  ([0, 7] - [4, 19]):unsigned64 by call to `sshpkt_put_cstring`.
  1675. 
  1676. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN)) != 0 ||
  1677. 	    (r = sshpkt_put_cstring(ssh, "tun@openssh.com")) != 0 ||
                  ^
  1678. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||
  1679. 	    (r = sshpkt_put_u32(ssh, c->local_window_max)) != 0 ||

#846
channels.c:1697: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1695. 		    c->self, ssh_err(r));
  1696. 	}
  1697. 	if ((r = sshpkt_send(ssh)) != 0)
                  ^
  1698. 		fatal("%s: channel %i: send %s", __func__, c->self, ssh_err(r));
  1699. 	free(remote_ipaddr);

#847
channels.c:1692: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1690. 	    c->local_window_max, c->local_maxpacket, 0, buf, 1);
  1691. 	open_preamble(ssh, __func__, nc, "x11");
  1692. 	if ((r = sshpkt_put_cstring(ssh, remote_ipaddr)) != 0 ||
                  ^
  1693. 	    (r = sshpkt_put_u32(ssh, remote_port)) != 0) {
  1694. 		fatal("%s: channel %i: reply %s", __func__,

#848
mux.c:1694: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  1692. 	}
  1693. 
  1694. 	if ((r = sshbuf_get_u32(m, &type)) != 0)
                  ^
  1695. 		fatal("%s: decode type: %s", __func__, ssh_err(r));
  1696. 	if (type != MUX_S_ALIVE) {

#849
mux.c:1707: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  1705. 		fatal("%s: out of sequence reply: my id %u theirs %u",
  1706. 		    __func__, muxclient_request_id, rid);
  1707. 	if ((r = sshbuf_get_u32(m, &pid)) != 0)
                  ^
  1708. 		fatal("%s: decode PID: %s", __func__, ssh_err(r));
  1709. 	sshbuf_free(m);

#850
monitor.c:1686: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  1684. 	ssh_clear_newkeys(ssh, MODE_IN);
  1685. 	ssh_clear_newkeys(ssh, MODE_OUT);
  1686. 	sshbuf_free(child_state);
         ^
  1687. 	child_state = NULL;
  1688. }

#851
packet.c:1692: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_read_poll2`.
  1690. 	for (;;) {
  1691. 		msg = NULL;
  1692. 		r = ssh_packet_read_poll2(ssh, typep, seqnr_p);
              ^
  1693. 		if (r != 0)
  1694. 			return r;

#852
packet.c:1692: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_read_poll2`.
  1690. 	for (;;) {
  1691. 		msg = NULL;
  1692. 		r = ssh_packet_read_poll2(ssh, typep, seqnr_p);
              ^
  1693. 		if (r != 0)
  1694. 			return r;

#853
sshkey.c:1689: error: Dead Store
  The value written to &ret (type int) is never used.
  1687. {
  1688. 	EC_KEY *private;
  1689. 	int ret = SSH_ERR_INTERNAL_ERROR;
         ^
  1690. 
  1691. 	if (nid == NULL || ecdsap == NULL)

#854
clientloop.c:1734: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1732. 			    (r = sshpkt_put_u32(ssh, c->local_maxpacket)) != 0 ||
  1733. 			    (r = sshpkt_send(ssh)) != 0)
  1734. 				sshpkt_fatal(ssh, r, "%s: send reply", __func__);
            ^
  1735. 		}
  1736. 	} else {

#855
clientloop.c:1733: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1731. 			    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||
  1732. 			    (r = sshpkt_put_u32(ssh, c->local_maxpacket)) != 0 ||
  1733. 			    (r = sshpkt_send(ssh)) != 0)
                    ^
  1734. 				sshpkt_fatal(ssh, r, "%s: send reply", __func__);
  1735. 		}

#856
clientloop.c:1741: error: Integer Overflow L2
  ([0, +oo] - [4, 15]):unsigned64 by call to `sshpkt_put_cstring`.
  1739. 		    (r = sshpkt_put_u32(ssh, rchan)) != 0 ||
  1740. 		    (r = sshpkt_put_u32(ssh, SSH2_OPEN_ADMINISTRATIVELY_PROHIBITED)) != 0 ||
  1741. 		    (r = sshpkt_put_cstring(ssh, "open failed")) != 0 ||
                   ^
  1742. 		    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  1743. 		    (r = sshpkt_send(ssh)) != 0)

#857
monitor.c:1699: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  1697. 	if ((r = ssh_packet_set_state(ssh, child_state)) != 0)
  1698.                 fatal("%s: packet_set_state: %s", __func__, ssh_err(r));
  1699. 	sshbuf_free(child_state);
         ^
  1700. 	child_state = NULL;
  1701. 

#858
channels.c:1767: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1765. 		}
  1766. 	}
  1767. 	if ((r = sshpkt_send(ssh)) != 0)
                  ^
  1768. 		fatal("%s: channel %i: send %s", __func__, c->self, ssh_err(r));
  1769. 	free(remote_ipaddr);

#859
channels.c:1761: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1759. 	} else {
  1760. 		/* originator host and port */
  1761. 		if ((r = sshpkt_put_cstring(ssh, remote_ipaddr)) != 0 ||
                   ^
  1762. 		    (r = sshpkt_put_u32(ssh, (u_int)remote_port)) != 0) {
  1763. 			fatal("%s: channel %i: reply %s", __func__,

#860
channels.c:1728: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `c->path->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  1726. 	if (strcmp(rtype, "direct-tcpip") == 0) {
  1727. 		/* target host, port */
  1728. 		if ((r = sshpkt_put_cstring(ssh, c->path)) != 0 ||
                   ^
  1729. 		    (r = sshpkt_put_u32(ssh, c->host_port)) != 0) {
  1730. 			fatal("%s: channel %i: reply %s", __func__,

#861
misc.c:1705: error: Dead Store
  The value written to &r (type int) is never used.
  1703. argv_split(const char *s, int *argcp, char ***argvp)
  1704. {
  1705. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  1706. 	int argc = 0, quote, i, j;
  1707. 	char *arg, **argv = xcalloc(1, sizeof(*argv));

#862
sshconnect2.c:1715: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1713. 	    id = TAILQ_FIRST(&authctxt->keys)) {
  1714. 		TAILQ_REMOVE(&authctxt->keys, id, next);
  1715. 		sshkey_free(id->key);
          ^
  1716. 		free(id->filename);
  1717. 		free(id);

#863
scp.c:1709: error: Unreachable Code
  Unreachable code after statement.
  1707. 		(void)write(STDERR_FILENO, "lost connection\n", 16);
  1708. 	if (signo)
  1709. 		_exit(1);
          ^
  1710. 	else
  1711. 		exit(1);

#864
sshkey.c:1719: error: Dead Store
  The value written to &ret (type int) is never used.
  1717. {
  1718. 	struct sshkey *k;
  1719. 	int ret = SSH_ERR_INTERNAL_ERROR;
         ^
  1720. 
  1721. 	if (keyp == NULL)

#865
sshkey.c:1762: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1760. 		*keyp = k;
  1761. 	} else
  1762. 		sshkey_free(k);
          ^
  1763. 	return ret;
  1764. }

#866
mux.c:1750: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  1748. 	}
  1749. 
  1750. 	if ((r = sshbuf_get_u32(m, &type)) != 0 ||
                  ^
  1751. 	    (r = sshbuf_get_u32(m, &rid)) != 0)
  1752. 		fatal("%s: decode: %s", __func__, ssh_err(r));

#867
ssh-keygen.c:1826: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sshkey_from_private`.
  1824. 		prepare_options_buf(public->cert->extensions,
  1825. 		    OPTIONS_EXTENSIONS);
  1826. 		if ((r = sshkey_from_private(ca,
                   ^
  1827. 		    &public->cert->signature_key)) != 0)
  1828. 			fatal("sshkey_from_private (ca key): %s", ssh_err(r));

#868
ssh-keygen.c:1823: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `prepare_options_buf`.
  1821. 		public->cert->valid_after = cert_valid_from;
  1822. 		public->cert->valid_before = cert_valid_to;
  1823. 		prepare_options_buf(public->cert->critical, OPTIONS_CRITICAL);
          ^
  1824. 		prepare_options_buf(public->cert->extensions,
  1825. 		    OPTIONS_EXTENSIONS);

#869
ssh-keygen.c:1773: error: Buffer Overrun L3
  Offset: [0, 2047] Size: [0, 2048] by call to `ssh_free_identitylist`.
  1771. 		if (!found)
  1772. 			fatal("CA key %s not found in agent", tmp);
  1773. 		ssh_free_identitylist(agent_ids);
          ^
  1774. 		ca->flags |= SSHKEY_FLAG_EXT;
  1775. 	} else {

#870
ssh-keygen.c:1879: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_free`.
  1877. 		}
  1878. 
  1879. 		sshkey_free(public);
          ^
  1880. 		free(out);
  1881. 		if (cert_serial_autoinc)

#871
sshconnect2.c:1778: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1776. 					sent = sign_and_send_pubkey(ssh, id);
  1777. 				}
  1778. 				sshkey_free(id->key);
            ^
  1779. 				id->key = NULL;
  1780. 				id->isprivate = 0;

#872
clientloop.c:1806: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_send`.
  1804. 		    SSH2_MSG_CHANNEL_SUCCESS : SSH2_MSG_CHANNEL_FAILURE)) != 0 ||
  1805. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1806. 		    (r = sshpkt_send(ssh)) != 0)
                   ^
  1807. 			sshpkt_fatal(ssh, r, "%s: send failure", __func__);
  1808. 	}

#873
clientloop.c:1765: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `channel_proxy_upstream`.
  1763. 	if (id <= INT_MAX)
  1764. 		c = channel_lookup(ssh, id);
  1765. 	if (channel_proxy_upstream(c, type, seq, ssh))
             ^
  1766. 		return 0;
  1767. 	if ((r = sshpkt_get_cstring(ssh, &rtype, NULL)) != 0 ||

#874
clientloop.c:1807: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1805. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1806. 		    (r = sshpkt_send(ssh)) != 0)
  1807. 			sshpkt_fatal(ssh, r, "%s: send failure", __func__);
           ^
  1808. 	}
  1809. 	r = 0;

#875
clientloop.c:1806: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1804. 		    SSH2_MSG_CHANNEL_SUCCESS : SSH2_MSG_CHANNEL_FAILURE)) != 0 ||
  1805. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  1806. 		    (r = sshpkt_send(ssh)) != 0)
                   ^
  1807. 			sshpkt_fatal(ssh, r, "%s: send failure", __func__);
  1808. 	}

#876
sshkey.c:1772: error: Dead Store
  The value written to &r (type int) is never used.
  1770. 	const struct sshkey_cert *from;
  1771. 	struct sshkey_cert *to;
  1772. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  1773. 
  1774. 	if (to_key == NULL || (from = from_key->cert) == NULL)

#877
sshkey.c:1832: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `cert_free`.
  1830. 	r = 0;
  1831.  out:
  1832. 	cert_free(to);
         ^
  1833. 	return r;
  1834. }

#878
mux.c:1828: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  1826. 	}
  1827. 
  1828. 	if ((r = sshbuf_get_u32(m, &type)) != 0 ||
                  ^
  1829. 	    (r = sshbuf_get_u32(m, &rid)) != 0)
  1830. 		fatal("%s: decode: %s", __func__, ssh_err(r));

#879
mux.c:1841: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  1839. 		if (cancel_flag)
  1840. 			fatal("%s: got MUX_S_REMOTE_PORT for cancel", __func__);
  1841. 		if ((r = sshbuf_get_u32(m, &fwd->allocated_port)) != 0)
                   ^
  1842. 			fatal("%s: decode port: %s", __func__, ssh_err(r));
  1843. 		verbose("Allocated port %u for remote forward to %s:%d",

#880
misc.c:1823: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  1821. 	ret[sshbuf_len(buf)] = '\0';
  1822. 	sshbuf_free(buf);
  1823. 	sshbuf_free(arg);
         ^
  1824. 	return ret;
  1825. }

#881
packet.c:1798: error: Integer Overflow L2
  ([-`ssh->state->outgoing_packet->size` - 268435463, `ssh->state->outgoing_packet->size` + 268435463] - [0, `ssh->state->outgoing_packet->size` + 268435463]):unsigned64 by call to `sshpkt_send`.
  1796. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  1797. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  1798. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  1799. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  1800. 		fatal("%s: %s", __func__, ssh_err(r));

#882
packet.c:1798: error: Integer Overflow L2
  ([-`ssh->state->outgoing_packet->size` - 268435463, `ssh->state->outgoing_packet->size` + 268435468] - [0, `ssh->state->outgoing_packet->size` + 268435463]):unsigned64 by call to `sshpkt_send`.
  1796. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  1797. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  1798. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  1799. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  1800. 		fatal("%s: %s", __func__, ssh_err(r));

#883
packet.c:1798: error: Integer Overflow L2
  ([0, `ssh->state->outgoing_packet->size` + 268435463] - [0, `ssh->state->outgoing_packet->size` + 268435463]):unsigned64 by call to `sshpkt_send`.
  1796. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  1797. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  1798. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  1799. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  1800. 		fatal("%s: %s", __func__, ssh_err(r));

#884
packet.c:1798: error: Integer Overflow L2
  ([0, `ssh->state->outgoing_packet->size` + 268435468] - [0, `ssh->state->outgoing_packet->size` + 268435463]):unsigned64 by call to `sshpkt_send`.
  1796. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  1797. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  1798. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  1799. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  1800. 		fatal("%s: %s", __func__, ssh_err(r));

#885
packet.c:1798: error: Integer Overflow L2
  ([0, `ssh->state->outgoing_packet->size` + 268435468] - [1, `ssh->state->outgoing_packet->size` + 268435463]):unsigned64 by call to `sshpkt_send`.
  1796. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  1797. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  1798. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  1799. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  1800. 		fatal("%s: %s", __func__, ssh_err(r));

#886
sshconnect2.c:1815: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1813. 	    (r = sshpkt_put_cstring(ssh, options.kbd_interactive_devices ?
  1814. 	    options.kbd_interactive_devices : "")) != 0 ||
  1815. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  1816. 		fatal("%s: %s", __func__, ssh_err(r));
  1817. 

#887
sshconnect2.c:1809: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1807. 	debug2("userauth_kbdint");
  1808. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||
  1809. 	    (r = sshpkt_put_cstring(ssh, authctxt->server_user)) != 0 ||
                  ^
  1810. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  1811. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||

#888
sshconnect2.c:1813: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `infer intermediate variable[*].strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  1811. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||
  1812. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||		/* lang */
  1813. 	    (r = sshpkt_put_cstring(ssh, options.kbd_interactive_devices ?
                  ^
  1814. 	    options.kbd_interactive_devices : "")) != 0 ||
  1815. 	    (r = sshpkt_send(ssh)) != 0)

#889
sshconnect2.c:1879: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1877. 	    (r = sshpkt_add_padding(ssh, 64)) != 0)
  1878. 		goto out;
  1879. 	r = sshpkt_send(ssh);
             ^
  1880.  out:
  1881. 	if (response)

#890
sshconnect2.c:1869: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1867. 			goto out;
  1868. 		response = read_passphrase(prompt, echo ? RP_ECHO : 0);
  1869. 		if ((r = sshpkt_put_cstring(ssh, response)) != 0)
                   ^
  1870. 			goto out;
  1871. 		freezero(response, strlen(response));

#891
sshkey.c:1970: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  1968. 	r = 0;
  1969.  out:
  1970. 	sshkey_free(n);
         ^
  1971. #ifdef WITH_OPENSSL
  1972. 	BN_clear_free(rsa_n_dup);

#892
sshkey.c:1963: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_cert_copy`.
  1961. 		goto out;
  1962. 	}
  1963. 	if (sshkey_is_cert(k) && (r = sshkey_cert_copy(k, n)) != 0)
                                       ^
  1964. 		goto out;
  1965. 	/* success */

#893
ssh.c:1868: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `sshpkt_send`.
  1866. 		debug("Requesting authentication agent forwarding.");
  1867. 		channel_request_start(ssh, id, "auth-agent-req@openssh.com", 0);
  1868. 		if ((r = sshpkt_send(ssh)) != 0)
                   ^
  1869. 			fatal("%s: %s", __func__, ssh_err(r));
  1870. 	}

#894
ssh.c:1868: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1866. 		debug("Requesting authentication agent forwarding.");
  1867. 		channel_request_start(ssh, id, "auth-agent-req@openssh.com", 0);
  1868. 		if ((r = sshpkt_send(ssh)) != 0)
                   ^
  1869. 			fatal("%s: %s", __func__, ssh_err(r));
  1870. 	}

#895
ssh.c:1851: error: Null Dereference
  pointer `display` last assigned on line 1848 could be null and is dereferenced by call to `client_x11_get_proto()` at line 1851, column 29.
  1849. 	if (display == NULL && options.forward_x11)
  1850. 		debug("X11 forwarding requested but DISPLAY not set");
  1851. 	if (options.forward_x11 && client_x11_get_proto(ssh, display,
                                    ^
  1852. 	    options.xauth_location, options.forward_x11_trusted,
  1853. 	    options.forward_x11_timeout, &proto, &data) == 0) {

#896
clientloop.c:1846: error: Integer Overflow L2
  ([0, `ctx->keys->cert->certblob->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1844. 		return;
  1845. 	for (i = 0; i < ctx->nkeys; i++)
  1846. 		sshkey_free(ctx->keys[i]);
          ^
  1847. 	free(ctx->keys);
  1848. 	free(ctx->keys_seen);

#897
clientloop.c:1846: error: Integer Overflow L2
  ([0, `ctx->keys->cert->critical->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1844. 		return;
  1845. 	for (i = 0; i < ctx->nkeys; i++)
  1846. 		sshkey_free(ctx->keys[i]);
          ^
  1847. 	free(ctx->keys);
  1848. 	free(ctx->keys_seen);

#898
clientloop.c:1846: error: Integer Overflow L2
  ([0, `ctx->keys->cert->extensions->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1844. 		return;
  1845. 	for (i = 0; i < ctx->nkeys; i++)
  1846. 		sshkey_free(ctx->keys[i]);
          ^
  1847. 	free(ctx->keys);
  1848. 	free(ctx->keys_seen);

#899
clientloop.c:1846: error: Integer Overflow L2
  ([0, `ctx->keys->sk_key_handle->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1844. 		return;
  1845. 	for (i = 0; i < ctx->nkeys; i++)
  1846. 		sshkey_free(ctx->keys[i]);
          ^
  1847. 	free(ctx->keys);
  1848. 	free(ctx->keys_seen);

#900
clientloop.c:1846: error: Integer Overflow L2
  ([0, `ctx->keys->sk_reserved->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1844. 		return;
  1845. 	for (i = 0; i < ctx->nkeys; i++)
  1846. 		sshkey_free(ctx->keys[i]);
          ^
  1847. 	free(ctx->keys);
  1848. 	free(ctx->keys_seen);

#901
clientloop.c:1850: error: Integer Overflow L2
  ([0, `ctx->old_keys->cert->certblob->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1848. 	free(ctx->keys_seen);
  1849. 	for (i = 0; i < ctx->nold; i++)
  1850. 		sshkey_free(ctx->old_keys[i]);
          ^
  1851. 	free(ctx->old_keys);
  1852. 	free(ctx->host_str);

#902
clientloop.c:1850: error: Integer Overflow L2
  ([0, `ctx->old_keys->cert->critical->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1848. 	free(ctx->keys_seen);
  1849. 	for (i = 0; i < ctx->nold; i++)
  1850. 		sshkey_free(ctx->old_keys[i]);
          ^
  1851. 	free(ctx->old_keys);
  1852. 	free(ctx->host_str);

#903
clientloop.c:1850: error: Integer Overflow L2
  ([0, `ctx->old_keys->cert->extensions->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1848. 	free(ctx->keys_seen);
  1849. 	for (i = 0; i < ctx->nold; i++)
  1850. 		sshkey_free(ctx->old_keys[i]);
          ^
  1851. 	free(ctx->old_keys);
  1852. 	free(ctx->host_str);

#904
clientloop.c:1850: error: Integer Overflow L2
  ([0, `ctx->old_keys->sk_key_handle->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1848. 	free(ctx->keys_seen);
  1849. 	for (i = 0; i < ctx->nold; i++)
  1850. 		sshkey_free(ctx->old_keys[i]);
          ^
  1851. 	free(ctx->old_keys);
  1852. 	free(ctx->host_str);

#905
clientloop.c:1850: error: Integer Overflow L2
  ([0, `ctx->old_keys->sk_reserved->refcount`] - 1):unsigned32 by call to `sshkey_free`.
  1848. 	free(ctx->keys_seen);
  1849. 	for (i = 0; i < ctx->nold; i++)
  1850. 		sshkey_free(ctx->old_keys[i]);
          ^
  1851. 	free(ctx->old_keys);
  1852. 	free(ctx->host_str);

#906
channels.c:1867: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1865. 	    0, "accepted auth socket", 1);
  1866. 	open_preamble(ssh, __func__, nc, "auth-agent@openssh.com");
  1867. 	if ((r = sshpkt_send(ssh)) != 0)
                  ^
  1868. 		fatal("%s: channel %i: %s", __func__, c->self, ssh_err(r));
  1869. }

#907
channels.c:1905: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  1903. 				fatal("%s: channel %i: confirm: %s", __func__,
  1904. 				    c->self, ssh_err(r));
  1905. 			if ((r = sshpkt_send(ssh)) != 0)
                    ^
  1906. 				fatal("%s: channel %i: %s", __func__, c->self,
  1907. 				    ssh_err(r));

#908
channels.c:1931: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  1929. 			    (r = sshpkt_put_u32(ssh,
  1930. 			    SSH2_OPEN_CONNECT_FAILED)) != 0 ||
  1931. 			    (r = sshpkt_put_cstring(ssh, strerror(err))) != 0 ||
                    ^
  1932. 			    (r = sshpkt_put_cstring(ssh, "")) != 0) {
  1933. 				fatal("%s: channel %i: failure: %s", __func__,

#909
ssh.c:1912: error: Resource Leak
  resource acquired by call to `open()` at line 1888, column 8 is not released after line 1912, column 2.
  1910. 		packetmax >>= 1;
  1911. 	}
  1912. 	c = channel_new(ssh,
         ^
  1913. 	    "session", SSH_CHANNEL_OPENING, in, out, err,
  1914. 	    window, packetmax, CHAN_EXTENDED_WRITE,

#910
packet.c:1912: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1910. 	 */
  1911. 	if ((r = sshpkt_disconnect(ssh, "%s", buf)) != 0)
  1912. 		sshpkt_fatal(ssh, r, "%s", __func__);
          ^
  1913. 
  1914. 	if ((r = ssh_packet_write_wait(ssh)) != 0)

#911
packet.c:1915: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1913. 
  1914. 	if ((r = ssh_packet_write_wait(ssh)) != 0)
  1915. 		sshpkt_fatal(ssh, r, "%s", __func__);
          ^
  1916. 
  1917. 	/* Close the connection. */

#912
packet.c:1915: error: Integer Overflow L2
  ([0, `ssh->state->incoming_packet->refcount`] - 1):unsigned32 by call to `sshpkt_fatal`.
  1913. 
  1914. 	if ((r = ssh_packet_write_wait(ssh)) != 0)
  1915. 		sshpkt_fatal(ssh, r, "%s", __func__);
          ^
  1916. 
  1917. 	/* Close the connection. */

#913
packet.c:1915: error: Integer Overflow L2
  ([0, `ssh->state->input->refcount`] - 1):unsigned32 by call to `sshpkt_fatal`.
  1913. 
  1914. 	if ((r = ssh_packet_write_wait(ssh)) != 0)
  1915. 		sshpkt_fatal(ssh, r, "%s", __func__);
          ^
  1916. 
  1917. 	/* Close the connection. */

#914
packet.c:1915: error: Integer Overflow L2
  ([0, `ssh->state->output->refcount`] - 1):unsigned32 by call to `sshpkt_fatal`.
  1913. 
  1914. 	if ((r = ssh_packet_write_wait(ssh)) != 0)
  1915. 		sshpkt_fatal(ssh, r, "%s", __func__);
          ^
  1916. 
  1917. 	/* Close the connection. */

#915
session.c:1895: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1893. 	    (r = sshpkt_get_u32(ssh, &s->ypixel)) != 0 ||
  1894. 	    (r = sshpkt_get_end(ssh)) != 0)
  1895. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  1896. 	pty_change_window_size(s->ptyfd, s->row, s->col, s->xpixel, s->ypixel);
  1897. 	return 1;

#916
sshconnect2.c:1994: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_string`.
  1992. 		goto fail;
  1993. 	}
  1994. 	if ((r = sshbuf_get_string(b, sigp, lenp)) != 0) {
                  ^
  1995. 		error("%s: buffer error: %s", __func__, ssh_err(r));
  1996.  fail:

#917
mux.c:1979: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  1977. 	}
  1978. 
  1979. 	if ((r = sshbuf_get_u32(m, &type)) != 0 ||
                  ^
  1980. 	    (r = sshbuf_get_u32(m, &rid)) != 0)
  1981. 		fatal("%s: decode: %s", __func__, ssh_err(r));

#918
mux.c:1921: error: Resource Leak
  resource acquired by call to `open()` at line 1917, column 18 is not released after line 1921, column 7.
  1919. 		if (dup2(devnull, STDIN_FILENO) == -1)
  1920. 			fatal("dup2: %s", strerror(errno));
  1921. 		if (devnull > STDERR_FILENO)
              ^
  1922. 			close(devnull);
  1923. 	}

#919
session.c:1910: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  1908. 	}
  1909. 	if (s->ttyfd != -1) {
  1910. 		ssh_packet_disconnect(ssh, "Protocol error: you already have a pty.");
          ^
  1911. 		return 0;
  1912. 	}

#920
session.c:1919: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1917. 	    (r = sshpkt_get_u32(ssh, &s->xpixel)) != 0 ||
  1918. 	    (r = sshpkt_get_u32(ssh, &s->ypixel)) != 0)
  1919. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  1920. 
  1921. 	if (strcmp(s->term, "") == 0) {

#921
session.c:1910: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  1908. 	}
  1909. 	if (s->ttyfd != -1) {
  1910. 		ssh_packet_disconnect(ssh, "Protocol error: you already have a pty.");
          ^
  1911. 		return 0;
  1912. 	}

#922
sftp-client.c:1937: error: Buffer Overrun L3
  Offset: [-1, +oo] Size: [0, +oo] by call to `upload_dir_internal`.
  1935. 	}
  1936. 
  1937. 	ret = upload_dir_internal(conn, src, dst_canon, 0, preserve_flag,
               ^
  1938. 	    print_flag, resume, fsync_flag);
  1939. 

#923
sftp-client.c:1937: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `upload_dir_internal`.
  1935. 	}
  1936. 
  1937. 	ret = upload_dir_internal(conn, src, dst_canon, 0, preserve_flag,
               ^
  1938. 	    print_flag, resume, fsync_flag);
  1939. 

#924
ssh.c:2014: error: Buffer Overrun L3
  Offset: 0 Size: [0, 18446744073709551616] by call to `ssh_local_cmd`.
  2012. 	if (options.local_command != NULL &&
  2013. 	    options.permit_local_command)
  2014. 		ssh_local_cmd(options.local_command);
          ^
  2015. 
  2016. 	/*

#925
ssh.c:2007: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2005. 		    "no-more-sessions@openssh.com")) != 0 ||
  2006. 		    (r = sshpkt_put_u8(ssh, 0)) != 0 ||
  2007. 		    (r = sshpkt_send(ssh)) != 0)
                   ^
  2008. 			fatal("%s: %s", __func__, ssh_err(r));
  2009. 	}

#926
ssh.c:2006: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  2004. 		    (r = sshpkt_put_cstring(ssh,
  2005. 		    "no-more-sessions@openssh.com")) != 0 ||
  2006. 		    (r = sshpkt_put_u8(ssh, 0)) != 0 ||
                   ^
  2007. 		    (r = sshpkt_send(ssh)) != 0)
  2008. 			fatal("%s: %s", __func__, ssh_err(r));

#927
ssh.c:2004: error: Integer Overflow L2
  ([0, +oo] - [4, 32]):unsigned64 by call to `sshpkt_put_cstring`.
  2002. 		debug("Requesting no-more-sessions@openssh.com");
  2003. 		if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
  2004. 		    (r = sshpkt_put_cstring(ssh,
                   ^
  2005. 		    "no-more-sessions@openssh.com")) != 0 ||
  2006. 		    (r = sshpkt_put_u8(ssh, 0)) != 0 ||

#928
packet.c:1998: error: Uninitialized Value
  The value read from ret was never initialized.
  1996. 			}
  1997. 		}
  1998. 		if (ret == 0) {
              ^
  1999. 			free(setp);
  2000. 			return SSH_ERR_CONN_TIMEOUT;

#929
session.c:1964: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  1962. 	if ((r = sshpkt_get_cstring(ssh, &s->subsys, NULL)) != 0 ||
  1963. 	    (r = sshpkt_get_end(ssh)) != 0)
  1964. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  1965. 	debug2("subsystem request for %.100s by user %s", s->subsys,
  1966. 	    s->pw->pw_name);

#930
sshkey.c:2067: error: Buffer Overrun L3
  Offset: [0, 255] Size: [1, 256] by call to `sshkey_from_private`.
  2065. 
  2066. 	/* Make a scrubbed, public-only copy of our private key argument */
  2067. 	if ((r = sshkey_from_private(k, &kswap)) != 0)
                  ^
  2068. 		goto out;
  2069. 

#931
sshkey.c:2058: error: Buffer Overrun L3
  Offset: [12, +oo] (<= [0, +oo] + 12) Size: [0, +oo] by call to `cipher_crypt`.
  2056. 		goto out;
  2057. 	}
  2058. 	if ((r = cipher_crypt(cctx, 0, enc,
                  ^
  2059. 	    sshbuf_ptr(prvbuf), sshbuf_len(prvbuf), 0, 0)) != 0)
  2060. 		goto out;

#932
sshkey.c:2058: error: Buffer Overrun L3
  Offset: [7, +oo] (<= [4, +oo] + 3) Size: [0, +oo] by call to `cipher_crypt`.
  2056. 		goto out;
  2057. 	}
  2058. 	if ((r = cipher_crypt(cctx, 0, enc,
                  ^
  2059. 	    sshbuf_ptr(prvbuf), sshbuf_len(prvbuf), 0, 0)) != 0)
  2060. 		goto out;

#933
sshkey.c:1998: error: Dead Store
  The value written to &r (type int) is never used.
  1996. 	size_t i, enclen = 0;
  1997. 	struct sshkey *kswap = NULL, tmp;
  1998. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  1999. 
  2000. #ifdef DEBUG_PK

#934
sshkey.c:2093: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2091. 	freezero(enc, enclen);
  2092. 	freezero(prekey, SSHKEY_SHIELD_PREKEY_LEN);
  2093. 	sshkey_free(kswap);
         ^
  2094. 	sshbuf_free(prvbuf);
  2095. 	return r;

#935
sshkey.c:2093: error: Integer Overflow L2
  ([0, max(1, `k->cert->extensions->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  2091. 	freezero(enc, enclen);
  2092. 	freezero(prekey, SSHKEY_SHIELD_PREKEY_LEN);
  2093. 	sshkey_free(kswap);
         ^
  2094. 	sshbuf_free(prvbuf);
  2095. 	return r;

#936
session.c:2010: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  2008. 	    (r = sshpkt_get_u32(ssh, &s->screen)) != 0 ||
  2009. 	    (r = sshpkt_get_end(ssh)) != 0)
  2010. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  2011. 
  2012. 	s->single_connection = single_connection;

#937
channels.c:2073: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2071. 			 */
  2072. 			if ((r = sshpkt_msg_ignore(ssh, 4+len)) != 0 ||
  2073. 			    (r = sshpkt_send(ssh)) != 0)
                    ^
  2074. 				fatal("%s: channel %d: ignore: %s",
  2075. 				    __func__, c->self, ssh_err(r));

#938
channels.c:2072: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_msg_ignore`.
  2070. 			 * (4 byte channel id + buf)
  2071. 			 */
  2072. 			if ((r = sshpkt_msg_ignore(ssh, 4+len)) != 0 ||
                    ^
  2073. 			    (r = sshpkt_send(ssh)) != 0)
  2074. 				fatal("%s: channel %d: ignore: %s",

#939
channels.c:2072: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_msg_ignore`.
  2070. 			 * (4 byte channel id + buf)
  2071. 			 */
  2072. 			if ((r = sshpkt_msg_ignore(ssh, 4+len)) != 0 ||
                    ^
  2073. 			    (r = sshpkt_send(ssh)) != 0)
  2074. 				fatal("%s: channel %d: ignore: %s",

#940
channels.c:2072: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_msg_ignore`.
  2070. 			 * (4 byte channel id + buf)
  2071. 			 */
  2072. 			if ((r = sshpkt_msg_ignore(ssh, 4+len)) != 0 ||
                    ^
  2073. 			    (r = sshpkt_send(ssh)) != 0)
  2074. 				fatal("%s: channel %d: ignore: %s",

#941
sshconnect2.c:2137: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2135. 	free(fp);
  2136. 	free(chost);
  2137. 	sshkey_free(private);
         ^
  2138. 	sshbuf_free(b);
  2139. 

#942
sshconnect2.c:2124: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2122. 	    (r = sshpkt_put_cstring(ssh, authctxt->local_user)) != 0 ||
  2123. 	    (r = sshpkt_put_string(ssh, sig, siglen)) != 0 ||
  2124. 	    (r = sshpkt_send(ssh)) != 0) {
                  ^
  2125. 		error("%s: packet error: %s", __func__, ssh_err(r));
  2126. 		goto out;

#943
sshconnect2.c:2116: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  2114. 	}
  2115. 	if ((r = sshpkt_start(ssh, SSH2_MSG_USERAUTH_REQUEST)) != 0 ||
  2116. 	    (r = sshpkt_put_cstring(ssh, authctxt->server_user)) != 0 ||
                  ^
  2117. 	    (r = sshpkt_put_cstring(ssh, authctxt->service)) != 0 ||
  2118. 	    (r = sshpkt_put_cstring(ssh, authctxt->method->name)) != 0 ||

#944
ssh-keygen.c:2029: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  2027. 		fatal("%s: sshbuf_fromb failed", __func__);
  2028. 	while (sshbuf_len(options) != 0) {
  2029. 		sshbuf_free(option);
          ^
  2030. 		option = NULL;
  2031. 		if ((r = sshbuf_get_cstring(options, &name, NULL)) != 0 ||

#945
session.c:2036: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  2034. 
  2035. 	if ((r = sshpkt_get_end(ssh)) != 0)
  2036. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  2037. 	return do_exec(ssh, s, NULL) == 0;
  2038. }

#946
session.c:2051: error: Buffer Overrun L3
  Offset: 13 Size: [0, +oo] by call to `do_exec`.
  2049. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
  2050. 
  2051. 	success = do_exec(ssh, s, command) == 0;
                   ^
  2052. 	free(command);
  2053. 	return success;

#947
session.c:2049: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  2047. 	if ((r = sshpkt_get_cstring(ssh, &command, NULL)) != 0 ||
  2048. 	    (r = sshpkt_get_end(ssh)) != 0)
  2049. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  2050. 
  2051. 	success = do_exec(ssh, s, command) == 0;

#948
ssh.c:2139: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2137. 			debug("%s: key %s type %s is not a certificate",
  2138. 			    __func__, cp, sshkey_type(public));
  2139. 			sshkey_free(public);
           ^
  2140. 			free(cp);
  2141. 			continue;

#949
ssh.c:2144: error: Integer Overflow L2
  ([0, 18446744073709551615] + 1):unsigned64 by call to `xstrdup`.
  2142. 		}
  2143. 		/* NB. leave filename pointing to private key */
  2144. 		identity_files[n_ids] = xstrdup(filename);
                                  ^
  2145. 		identity_keys[n_ids] = public;
  2146. 		identity_file_userprovided[n_ids] =

#950
session.c:2063: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  2061. 	if ((r = sshpkt_get_u32(ssh, NULL)) != 0 || /* ignore */
  2062. 	    (r = sshpkt_get_end(ssh)) != 0)
  2063. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  2064. 
  2065. 	if (s->ptymaster == -1 || tcsendbreak(s->ptymaster, 0) == -1)

#951
clientloop.c:2189: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `sshkey_putb`.
  2187. 				continue;
  2188. 			sshbuf_reset(buf);
  2189. 			if ((r = sshkey_putb(ctx->keys[i], buf)) != 0)
                    ^
  2190. 				fatal("%s: sshkey_putb: %s",
  2191. 				    __func__, ssh_err(r));

#952
clientloop.c:2089: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2087. 	ctx = xcalloc(1, sizeof(*ctx));
  2088. 	while (ssh_packet_remaining(ssh) > 0) {
  2089. 		sshkey_free(key);
          ^
  2090. 		key = NULL;
  2091. 		if ((r = sshpkt_get_string_direct(ssh, &blob, &len)) != 0) {

#953
clientloop.c:2196: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2194. 				    __func__, ssh_err(r));
  2195. 		}
  2196. 		if ((r = sshpkt_send(ssh)) != 0)
                   ^
  2197. 			fatal("%s: sshpkt_send: %s", __func__, ssh_err(r));
  2198. 		client_register_global_confirm(

#954
clientloop.c:2180: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  2178. 		    (r = sshpkt_put_cstring(ssh,
  2179. 		    "hostkeys-prove-00@openssh.com")) != 0 ||
  2180. 		    (r = sshpkt_put_u8(ssh, 1)) != 0) /* bool: want reply */
                   ^
  2181. 			fatal("%s: cannot prepare packet: %s",
  2182. 			    __func__, ssh_err(r));

#955
clientloop.c:2192: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_stringb`.
  2190. 				fatal("%s: sshkey_putb: %s",
  2191. 				    __func__, ssh_err(r));
  2192. 			if ((r = sshpkt_put_stringb(ssh, buf)) != 0)
                    ^
  2193. 				fatal("%s: sshpkt_put_string: %s",
  2194. 				    __func__, ssh_err(r));

#956
session.c:2080: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  2078. 	    (r = sshpkt_get_cstring(ssh, &val, NULL)) != 0 ||
  2079. 	    (r = sshpkt_get_end(ssh)) != 0)
  2080. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  2081. 
  2082. 	/* Don't set too many environment variables */

#957
mux.c:2115: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  2113. 		return 0;
  2114. 	}
  2115. 	if ((r = sshbuf_get_u32(m, &type)) != 0 ||
                  ^
  2116. 	    (r = sshbuf_get_u32(m, &rid)) != 0)
  2117. 		fatal("%s: decode: %s", __func__, ssh_err(r));

#958
sshkey.c:2165: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [0, +oo] + [1, +oo]) Size: [0, +oo] by call to `sshkey_private_deserialize`.
  2163. #endif
  2164. 	/* Parse private key */
  2165. 	if ((r = sshkey_private_deserialize(prvbuf, &kswap)) != 0)
                  ^
  2166. 		goto out;
  2167. 	/* Check deterministic padding */

#959
sshkey.c:2165: error: Buffer Overrun L3
  Offset: [11, +oo] (<= [4, +oo] + 7) Size: [0, +oo] by call to `sshkey_private_deserialize`.
  2163. #endif
  2164. 	/* Parse private key */
  2165. 	if ((r = sshkey_private_deserialize(prvbuf, &kswap)) != 0)
                  ^
  2166. 		goto out;
  2167. 	/* Check deterministic padding */

#960
sshkey.c:2165: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_private_deserialize`.
  2163. #endif
  2164. 	/* Parse private key */
  2165. 	if ((r = sshkey_private_deserialize(prvbuf, &kswap)) != 0)
                  ^
  2166. 		goto out;
  2167. 	/* Check deterministic padding */

#961
sshkey.c:2107: error: Dead Store
  The value written to &r (type int) is never used.
  2105. 	size_t i;
  2106. 	struct sshkey *kswap = NULL, tmp;
  2107. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  2108. 
  2109. #ifdef DEBUG_PK

#962
sshkey.c:2190: error: Integer Overflow L2
  ([0, max(1, `k->cert->certblob->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  2188. 	explicit_bzero(keyiv, sizeof(keyiv));
  2189. 	explicit_bzero(&tmp, sizeof(tmp));
  2190. 	sshkey_free(kswap);
         ^
  2191. 	sshbuf_free(prvbuf);
  2192. 	return r;

#963
sshkey.c:2190: error: Integer Overflow L2
  ([0, max(1, `k->cert->critical->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  2188. 	explicit_bzero(keyiv, sizeof(keyiv));
  2189. 	explicit_bzero(&tmp, sizeof(tmp));
  2190. 	sshkey_free(kswap);
         ^
  2191. 	sshbuf_free(prvbuf);
  2192. 	return r;

#964
sshkey.c:2190: error: Integer Overflow L2
  ([0, max(1, `k->cert->extensions->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  2188. 	explicit_bzero(keyiv, sizeof(keyiv));
  2189. 	explicit_bzero(&tmp, sizeof(tmp));
  2190. 	sshkey_free(kswap);
         ^
  2191. 	sshbuf_free(prvbuf);
  2192. 	return r;

#965
sshkey.c:2190: error: Integer Overflow L2
  ([0, max(1, `k->sk_key_handle->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  2188. 	explicit_bzero(keyiv, sizeof(keyiv));
  2189. 	explicit_bzero(&tmp, sizeof(tmp));
  2190. 	sshkey_free(kswap);
         ^
  2191. 	sshbuf_free(prvbuf);
  2192. 	return r;

#966
sshkey.c:2190: error: Integer Overflow L2
  ([0, max(1, `k->sk_reserved->refcount`)] - 1):unsigned32 by call to `sshkey_free`.
  2188. 	explicit_bzero(keyiv, sizeof(keyiv));
  2189. 	explicit_bzero(&tmp, sizeof(tmp));
  2190. 	sshkey_free(kswap);
         ^
  2191. 	sshbuf_free(prvbuf);
  2192. 	return r;

#967
ssh-keygen.c:2138: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2136. 	while (getline(&line, &linesize, f) != -1) {
  2137. 		lnum++;
  2138. 		sshkey_free(key);
          ^
  2139. 		key = NULL;
  2140. 		/* Trim leading space and comments */

#968
mux.c:2192: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  2190. 	}
  2191. 
  2192. 	if ((r = sshbuf_get_u32(m, &type)) != 0 ||
                  ^
  2193. 	    (r = sshbuf_get_u32(m, &rid)) != 0)
  2194. 		fatal("%s: decode: %s", __func__, ssh_err(r));

#969
mux.c:2155: error: Resource Leak
  resource acquired by call to `open()` at line 2151, column 18 is not released after line 2155, column 7.
  2153. 		if (dup2(devnull, STDIN_FILENO) == -1)
  2154. 			fatal("dup2: %s", strerror(errno));
  2155. 		if (devnull > STDERR_FILENO)
              ^
  2156. 			close(devnull);
  2157. 	}

#970
sftp.c:2209: error: Buffer Overrun L3
  Offset: [-1, +oo] Size: [0, +oo] by call to `make_absolute`.
  2207. 	if (file1 != NULL) {
  2208. 		dir = xstrdup(file1);
  2209. 		dir = make_absolute(dir, remote_path);
                ^
  2210. 
  2211. 		if (remote_is_dir(conn, dir) && file2 == NULL) {

#971
sftp.c:2215: error: Buffer Overrun L3
  Offset: [-1, +oo] Size: [0, +oo] by call to `parse_dispatch_command`.
  2213. 				mprintf("Changing to: %s\n", dir);
  2214. 			snprintf(cmd, sizeof cmd, "cd \"%s\"", dir);
  2215. 			if (parse_dispatch_command(conn, cmd,
               ^
  2216. 			    &remote_path, startdir, 1, 0) != 0) {
  2217. 				free(dir);

#972
sftp.c:2209: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `make_absolute`.
  2207. 	if (file1 != NULL) {
  2208. 		dir = xstrdup(file1);
  2209. 		dir = make_absolute(dir, remote_path);
                ^
  2210. 
  2211. 		if (remote_is_dir(conn, dir) && file2 == NULL) {

#973
sftp.c:2215: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `parse_dispatch_command`.
  2213. 				mprintf("Changing to: %s\n", dir);
  2214. 			snprintf(cmd, sizeof cmd, "cd \"%s\"", dir);
  2215. 			if (parse_dispatch_command(conn, cmd,
               ^
  2216. 			    &remote_path, startdir, 1, 0) != 0) {
  2217. 				free(dir);

#974
ssh-keygen.c:2185: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  2183. 	    *krlp == NULL)
  2184. 		fatal("Invalid KRL file: %s", ssh_err(r));
  2185. 	sshbuf_free(krlbuf);
         ^
  2186. }
  2187. 

#975
channels.c:2188: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2186. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  2187. 		    (r = sshpkt_put_u32(ssh, c->local_consumed)) != 0 ||
  2188. 		    (r = sshpkt_send(ssh)) != 0) {
                   ^
  2189. 			fatal("%s: channel %i: %s", __func__,
  2190. 			    c->self, ssh_err(r));

#976
channels.c:2186: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  2184. 		if ((r = sshpkt_start(ssh,
  2185. 		    SSH2_MSG_CHANNEL_WINDOW_ADJUST)) != 0 ||
  2186. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
                   ^
  2187. 		    (r = sshpkt_put_u32(ssh, c->local_consumed)) != 0 ||
  2188. 		    (r = sshpkt_send(ssh)) != 0) {

#977
channels.c:2184: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  2182. 			fatal(":%s: channel %d: no remote id",
  2183. 			    __func__, c->self);
  2184. 		if ((r = sshpkt_start(ssh,
                   ^
  2185. 		    SSH2_MSG_CHANNEL_WINDOW_ADJUST)) != 0 ||
  2186. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||

#978
session.c:2186: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  2184. 
  2185. 	if ((r = sshpkt_get_end(ssh)) != 0)
  2186. 		sshpkt_fatal(ssh, r, "%s: parse packet", __func__);
          ^
  2187. 	if (!auth_opts->permit_agent_forwarding_flag ||
  2188. 	    !options.allow_agent_forwarding) {

#979
sshkey.c:2303: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshkey_verify`.
  2301. 		goto out;
  2302. 	}
  2303. 	if ((ret = sshkey_verify(key->cert->signature_key, sig, slen,
                    ^
  2304. 	    sshbuf_ptr(key->cert->certblob), signed_len, NULL, 0, NULL)) != 0)
  2305. 		goto out;

#980
sshkey.c:2303: error: Buffer Overrun L3
  Offset: [4, +oo] Size: [0, +oo] by call to `sshkey_verify`.
  2301. 		goto out;
  2302. 	}
  2303. 	if ((ret = sshkey_verify(key->cert->signature_key, sig, slen,
                    ^
  2304. 	    sshbuf_ptr(key->cert->certblob), signed_len, NULL, 0, NULL)) != 0)
  2305. 		goto out;

#981
sshkey.c:2303: error: Buffer Overrun L3
  Offset: [8, +oo] Size: [0, +oo] by call to `sshkey_verify`.
  2301. 		goto out;
  2302. 	}
  2303. 	if ((ret = sshkey_verify(key->cert->signature_key, sig, slen,
                    ^
  2304. 	    sshbuf_ptr(key->cert->certblob), signed_len, NULL, 0, NULL)) != 0)
  2305. 		goto out;

#982
sshkey.c:2202: error: Dead Store
  The value written to &ret (type int) is never used.
  2200. 	u_char *sig = NULL;
  2201. 	size_t signed_len = 0, slen = 0, kidlen = 0;
  2202. 	int ret = SSH_ERR_INTERNAL_ERROR;
         ^
  2203. 
  2204. 	/* Copy the entire key blob for verification and later serialisation */

#983
sshkey.c:2313: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  2311. 	ret = 0;
  2312.  out:
  2313. 	sshbuf_free(ca);
         ^
  2314. 	sshbuf_free(crit);
  2315. 	sshbuf_free(exts);

#984
sshkey.c:2211: error: Integer Overflow L2
  ([0, `b->size`] - [0, `b->off` + 12]):unsigned64 by call to `sshbuf_get_cstring`.
  2209. 	if ((ret = sshbuf_get_u64(b, &key->cert->serial)) != 0 ||
  2210. 	    (ret = sshbuf_get_u32(b, &key->cert->type)) != 0 ||
  2211. 	    (ret = sshbuf_get_cstring(b, &key->cert->key_id, &kidlen)) != 0 ||
                    ^
  2212. 	    (ret = sshbuf_froms(b, &principals)) != 0 ||
  2213. 	    (ret = sshbuf_get_u64(b, &key->cert->valid_after)) != 0 ||

#985
clientloop.c:2232: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_send`.
  2230. 		if ((r = sshpkt_start(ssh, success ? SSH2_MSG_REQUEST_SUCCESS :
  2231. 		    SSH2_MSG_REQUEST_FAILURE)) != 0 ||
  2232. 		    (r = sshpkt_send(ssh)) != 0 ||
                   ^
  2233. 		    (r = ssh_packet_write_wait(ssh)) != 0)
  2234. 			goto out;

#986
clientloop.c:2232: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2230. 		if ((r = sshpkt_start(ssh, success ? SSH2_MSG_REQUEST_SUCCESS :
  2231. 		    SSH2_MSG_REQUEST_FAILURE)) != 0 ||
  2232. 		    (r = sshpkt_send(ssh)) != 0 ||
                   ^
  2233. 		    (r = ssh_packet_write_wait(ssh)) != 0)
  2234. 			goto out;

#987
ssh-keygen.c:2342: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `ssh_krl_revoke_key_explicit`.
  2340. 				    path, lnum, ssh_err(r));
  2341. 			if (was_explicit_key)
  2342. 				r = ssh_krl_revoke_key_explicit(krl, key);
                ^
  2343. 			else if (was_sha1) {
  2344. 				if (sshkey_fingerprint_raw(key,

#988
ssh-keygen.c:2342: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `ssh_krl_revoke_key_explicit`.
  2340. 				    path, lnum, ssh_err(r));
  2341. 			if (was_explicit_key)
  2342. 				r = ssh_krl_revoke_key_explicit(krl, key);
                ^
  2343. 			else if (was_sha1) {
  2344. 				if (sshkey_fingerprint_raw(key,

#989
ssh-keygen.c:2317: error: Dead Store
  The value written to &r (type int) is never used.
  2315. 			cp = cp + strspn(cp, " \t");
  2316. 			hash_to_blob(cp, &blob, &blen, file, lnum);
  2317. 			r = ssh_krl_revoke_key_sha256(krl, blob, blen);
           ^
  2318. 		} else {
  2319. 			if (strncasecmp(cp, "key:", 4) == 0) {

#990
ssh-keygen.c:2365: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2363. 			blob = NULL;
  2364. 			blen = 0;
  2365. 			sshkey_free(key);
           ^
  2366. 		}
  2367. 	}

#991
mux.c:2267: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_u32`.
  2265. 		    __func__, strerror(errno));
  2266. 
  2267. 	if ((r = sshbuf_get_u32(m, &type)) != 0 ||
                  ^
  2268. 	    (r = sshbuf_get_u32(m, &rid)) != 0)
  2269. 		fatal("%s: decode: %s", __func__, ssh_err(r));

#992
clientloop.c:2313: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_send`.
  2311. 			if ((r = sshpkt_put_cstring(ssh, name)) != 0 ||
  2312. 			    (r = sshpkt_put_cstring(ssh, val)) != 0 ||
  2313. 			    (r = sshpkt_send(ssh)) != 0) {
                    ^
  2314. 				fatal("%s: send packet: %s",
  2315. 				    __func__, ssh_err(r));

#993
clientloop.c:2278: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2276. 			tiop = get_saved_tio();
  2277. 		ssh_tty_make_modes(ssh, -1, tiop);
  2278. 		if ((r = sshpkt_send(ssh)) != 0)
                   ^
  2279. 			fatal("%s: send packet: %s", __func__, ssh_err(r));
  2280. 		/* XXX wait for reply */

#994
clientloop.c:2313: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2311. 			if ((r = sshpkt_put_cstring(ssh, name)) != 0 ||
  2312. 			    (r = sshpkt_put_cstring(ssh, val)) != 0 ||
  2313. 			    (r = sshpkt_send(ssh)) != 0) {
                    ^
  2314. 				fatal("%s: send packet: %s",
  2315. 				    __func__, ssh_err(r));

#995
clientloop.c:2270: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  2268. 		if ((r = sshpkt_put_cstring(ssh, term != NULL ? term : ""))
  2269. 		    != 0 ||
  2270. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_col)) != 0 ||
                   ^
  2271. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_row)) != 0 ||
  2272. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_xpixel)) != 0 ||

#996
clientloop.c:2268: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `term->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  2266. 		channel_request_start(ssh, id, "pty-req", 1);
  2267. 		client_expect_confirm(ssh, id, "PTY allocation", CONFIRM_TTY);
  2268. 		if ((r = sshpkt_put_cstring(ssh, term != NULL ? term : ""))
                   ^
  2269. 		    != 0 ||
  2270. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_col)) != 0 ||

#997
sshd.c:2293: error: Inferbo Alloc May Be Big
  Length: [1, 18446744073709551616] by call to `compat_pkalg_proposal`.
  2291. 		    options.rekey_interval);
  2292. 
  2293. 	myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = compat_pkalg_proposal(
                                                     ^
  2294. 	    list_hostkey_types());
  2295. 

#998
sshd.c:2293: error: Integer Overflow L2
  ([0, 18446744073709551615] + 1):unsigned64 by call to `compat_pkalg_proposal`.
  2291. 		    options.rekey_interval);
  2292. 
  2293. 	myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] = compat_pkalg_proposal(
                                                     ^
  2294. 	    list_hostkey_types());
  2295. 

#999
servconf.c:2284: error: Buffer Overrun L3
  Offset: [0, 2147483646] Size: [0, +oo] by call to `copy_set_server_options`.
  2282. 	initialize_server_options(&mo);
  2283. 	parse_server_config(&mo, "reprocess config", cfg, connectinfo);
  2284. 	copy_set_server_options(options, &mo, 0);
         ^
  2285. }
  2286. 

#1000
packet.c:2344: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshbuf_free`.
  2342.  out:
  2343. 	free(newkey);
  2344. 	sshbuf_free(b);
         ^
  2345. 	return r;
  2346. }

#1001
sftp.c:2328: error: Unreachable Code
  Unreachable code after statement.
  2326. 		    (dup2(c_out, STDOUT_FILENO) == -1)) {
  2327. 			fprintf(stderr, "dup2: %s\n", strerror(errno));
  2328. 			_exit(1);
           ^
  2329. 		}
  2330. 		close(*in);

#1002
sftp.c:2346: error: Unreachable Code
  Unreachable code after statement.
  2344. 		execvp(path, args);
  2345. 		fprintf(stderr, "exec: %s: %s\n", path, strerror(errno));
  2346. 		_exit(1);
          ^
  2347. 	}
  2348. 

#1003
sshkey.c:2338: error: Dead Store
  The value written to &ret (type int) is never used.
  2336.     int allow_cert)
  2337. {
  2338. 	int type, ret = SSH_ERR_INTERNAL_ERROR;
         ^
  2339. 	char *ktype = NULL, *curve = NULL, *xmss_name = NULL;
  2340. 	struct sshkey *key = NULL;

#1004
sshkey.c:2584: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2582.  out:
  2583. 	sshbuf_free(copy);
  2584. 	sshkey_free(key);
         ^
  2585. 	free(xmss_name);
  2586. 	free(ktype);

#1005
sshd.c:2354: error: Unreachable Code
  Unreachable code after statement.
  2352. 		audit_event(the_active_state, SSH_CONNECTION_ABANDON);
  2353. #endif
  2354. 	_exit(i);
         ^
  2355. }

#1006
packet.c:2374: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `kex_free`.
  2372.  out:
  2373. 	if (r != 0 || kexp == NULL) {
  2374. 		kex_free(kex);
          ^
  2375. 		if (kexp != NULL)
  2376. 			*kexp = NULL;

#1007
session.c:2388: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_fatal`.
  2386. 		if ((r = sshpkt_put_u32(ssh, WEXITSTATUS(status))) != 0 ||
  2387. 		    (r = sshpkt_send(ssh)) != 0)
  2388. 			sshpkt_fatal(ssh, r, "%s: exit reply", __func__);
           ^
  2389. 	} else if (WIFSIGNALED(status)) {
  2390. 		channel_request_start(ssh, s->chanid, "exit-signal", 0);

#1008
session.c:2387: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2385. 		channel_request_start(ssh, s->chanid, "exit-status", 0);
  2386. 		if ((r = sshpkt_put_u32(ssh, WEXITSTATUS(status))) != 0 ||
  2387. 		    (r = sshpkt_send(ssh)) != 0)
                   ^
  2388. 			sshpkt_fatal(ssh, r, "%s: exit reply", __func__);
  2389. 	} else if (WIFSIGNALED(status)) {

#1009
session.c:2395: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  2393. #endif
  2394. 		if ((r = sshpkt_put_cstring(ssh, sig2name(WTERMSIG(status)))) != 0 ||
  2395. 		    (r = sshpkt_put_u8(ssh, WCOREDUMP(status)? 1 : 0)) != 0 ||
                   ^
  2396. 		    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  2397. 		    (r = sshpkt_put_cstring(ssh, "")) != 0 ||

#1010
session.c:2394: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  2392. # define WCOREDUMP(x) (0)
  2393. #endif
  2394. 		if ((r = sshpkt_put_cstring(ssh, sig2name(WTERMSIG(status)))) != 0 ||
                   ^
  2395. 		    (r = sshpkt_put_u8(ssh, WCOREDUMP(status)? 1 : 0)) != 0 ||
  2396. 		    (r = sshpkt_put_cstring(ssh, "")) != 0 ||

#1011
ssh-keygen.c:2418: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `update_krl_from_file`.
  2416. 
  2417. 	for (i = 0; i < argc; i++)
  2418. 		update_krl_from_file(pw, argv[i], wild_ca, ca, krl);
          ^
  2419. 
  2420. 	if ((kbuf = sshbuf_new()) == NULL)

#1012
ssh-keygen.c:2422: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [1, +oo] + [0, +oo]) Size: [0, +oo] by call to `ssh_krl_to_blob`.
  2420. 	if ((kbuf = sshbuf_new()) == NULL)
  2421. 		fatal("sshbuf_new failed");
  2422. 	if (ssh_krl_to_blob(krl, kbuf, NULL, 0) != 0)
             ^
  2423. 		fatal("Couldn't generate KRL");
  2424. 	if ((fd = open(identity_file, O_WRONLY|O_CREAT|O_TRUNC, 0644)) == -1)

#1013
ssh-keygen.c:2418: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `update_krl_from_file`.
  2416. 
  2417. 	for (i = 0; i < argc; i++)
  2418. 		update_krl_from_file(pw, argv[i], wild_ca, ca, krl);
          ^
  2419. 
  2420. 	if ((kbuf = sshbuf_new()) == NULL)

#1014
ssh-keygen.c:2430: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  2428. 		fatal("write %s: %s", identity_file, strerror(errno));
  2429. 	close(fd);
  2430. 	sshbuf_free(kbuf);
         ^
  2431. 	ssh_krl_free(krl);
  2432. 	sshkey_free(ca);

#1015
ssh-keygen.c:2450: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `ssh_krl_check_key`.
  2448. 			fatal("Cannot load public key %s: %s",
  2449. 			    argv[i], ssh_err(r));
  2450. 		r = ssh_krl_check_key(krl, k);
              ^
  2451. 		printf("%s%s%s%s: %s\n", argv[i],
  2452. 		    *comment ? " (" : "", comment, *comment ? ")" : "",

#1016
ssh-keygen.c:2450: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `ssh_krl_check_key`.
  2448. 			fatal("Cannot load public key %s: %s",
  2449. 			    argv[i], ssh_err(r));
  2450. 		r = ssh_krl_check_key(krl, k);
              ^
  2451. 		printf("%s%s%s%s: %s\n", argv[i],
  2452. 		    *comment ? " (" : "", comment, *comment ? ")" : "",

#1017
ssh-keygen.c:2456: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2454. 		if (r != 0)
  2455. 			ret = 1;
  2456. 		sshkey_free(k);
          ^
  2457. 		free(comment);
  2458. 	}

#1018
ssh-keygen.c:2505: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_cert_copy`.
  2503. 			goto done;
  2504. 		}
  2505. 		if ((r = sshkey_cert_copy(pubkey, privkey)) != 0) {
                   ^
  2506. 			error("%s: sshkey_cert_copy: %s", __func__, ssh_err(r));
  2507. 			goto done;

#1019
ssh-keygen.c:2514: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshkey_free`.
  2512. 	privkey = NULL;
  2513.  done:
  2514. 	sshkey_free(privkey);
         ^
  2515. 	free(privpath);
  2516. 	return ret;

#1020
ssh-keygen.c:2551: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [0, +oo] + [1, 18446744073709551615]) Size: [0, +oo] by call to `sshbuf_dup_string`.
  2549. 		goto out;
  2550. 	}
  2551. 	if ((asig = sshbuf_dup_string(abuf)) == NULL) {
                     ^
  2552. 		error("%s: buffer error", __func__);
  2553. 		r = SSH_ERR_ALLOC_FAIL;

#1021
ssh-keygen.c:2524: error: Dead Store
  The value written to &r (type int) is never used.
  2522. {
  2523. 	struct sshbuf *sigbuf = NULL, *abuf = NULL;
  2524. 	int r = SSH_ERR_INTERNAL_ERROR, wfd = -1, oerrno;
         ^
  2525. 	char *wfile = NULL, *asig = NULL, *fp = NULL;
  2526. 

#1022
ssh-keygen.c:2592: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  2590. 	free(wfile);
  2591. 	free(asig);
  2592. 	sshbuf_free(abuf);
         ^
  2593. 	sshbuf_free(sigbuf);
  2594. 	if (wfd != -1)

#1023
channels.c:2587: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2585. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  2586. 		    (r = sshpkt_put_string(ssh, pkt, plen)) != 0 ||
  2587. 		    (r = sshpkt_send(ssh)) != 0) {
                   ^
  2588. 			fatal("%s: channel %i: datagram: %s", __func__,
  2589. 			    c->self, ssh_err(r));

#1024
channels.c:2584: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  2582. 		}
  2583. 		/* Enqueue it */
  2584. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_DATA)) != 0 ||
                   ^
  2585. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  2586. 		    (r = sshpkt_put_string(ssh, pkt, plen)) != 0 ||

#1025
channels.c:2604: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_string`.
  2602. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_DATA)) != 0 ||
  2603. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  2604. 	    (r = sshpkt_put_string(ssh, sshbuf_ptr(c->input), len)) != 0 ||
                  ^
  2605. 	    (r = sshpkt_send(ssh)) != 0) {
  2606. 		fatal("%s: channel %i: data: %s", __func__,

#1026
channels.c:2586: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `c->remote_window`)]):unsigned64 by call to `sshpkt_put_string`.
  2584. 		if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_DATA)) != 0 ||
  2585. 		    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  2586. 		    (r = sshpkt_put_string(ssh, pkt, plen)) != 0 ||
                   ^
  2587. 		    (r = sshpkt_send(ssh)) != 0) {
  2588. 			fatal("%s: channel %i: datagram: %s", __func__,

#1027
session.c:2596: error: Buffer Overrun S2
  Offset: [max(0, `s->x11_chanids`), `s->x11_chanids`] Size: [0, +oo] by call to `channel_register_cleanup`.
  2594. 	}
  2595. 	for (i = 0; s->x11_chanids[i] != -1; i++) {
  2596. 		channel_register_cleanup(ssh, s->x11_chanids[i],
          ^
  2597. 		    session_close_single_x11, 0);
  2598. 	}

#1028
session.c:2573: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_send_debug`.
  2571. 
  2572. 	if (!auth_opts->permit_x11_forwarding_flag) {
  2573. 		ssh_packet_send_debug(ssh, "X11 forwarding disabled by key options.");
          ^
  2574. 		return 0;
  2575. 	}

#1029
session.c:2573: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssh_packet_send_debug`.
  2571. 
  2572. 	if (!auth_opts->permit_x11_forwarding_flag) {
  2573. 		ssh_packet_send_debug(ssh, "X11 forwarding disabled by key options.");
          ^
  2574. 		return 0;
  2575. 	}

#1030
session.c:2573: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_send_debug`.
  2571. 
  2572. 	if (!auth_opts->permit_x11_forwarding_flag) {
  2573. 		ssh_packet_send_debug(ssh, "X11 forwarding disabled by key options.");
          ^
  2574. 		return 0;
  2575. 	}

#1031
ssh-keygen.c:2640: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sign_one`.
  2638. 
  2639. 	if (argc == 0) {
  2640. 		if ((r = sign_one(signkey, "(stdin)", STDIN_FILENO,
                   ^
  2641. 		    sig_namespace, signer, &agent_fd)) != 0)
  2642. 			goto done;

#1032
ssh-keygen.c:2631: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `load_sign_key`.
  2629. 	if (signer == NULL) {
  2630. 		/* Not using agent - try to load private key */
  2631. 		if ((privkey = load_sign_key(keypath, pubkey)) == NULL)
                         ^
  2632. 			goto done;
  2633. 		signkey = privkey;

#1033
ssh-keygen.c:2652: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sign_one`.
  2650. 				goto done;
  2651. 			}
  2652. 			if ((r = sign_one(signkey, argv[i], fd, sig_namespace,
                    ^
  2653. 			    signer, &agent_fd)) != 0)
  2654. 				goto done;

#1034
ssh-keygen.c:2640: error: Buffer Overrun L3
  Offset: [32, 63] (<= 32 + [0, 31]) Size: [0, +oo] by call to `sign_one`.
  2638. 
  2639. 	if (argc == 0) {
  2640. 		if ((r = sign_one(signkey, "(stdin)", STDIN_FILENO,
                   ^
  2641. 		    sig_namespace, signer, &agent_fd)) != 0)
  2642. 			goto done;

#1035
ssh-keygen.c:2665: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2663. 	if (fd != -1 && fd != STDIN_FILENO)
  2664. 		close(fd);
  2665. 	sshkey_free(pubkey);
         ^
  2666. 	sshkey_free(privkey);
  2667. 	return ret;

#1036
packet.c:2622: error: Null Dereference
  pointer `cp` last assigned on line 2621 could be null and is dereferenced at line 2622, column 9.
  2620. 		return SSH_ERR_INTERNAL_ERROR;
  2621. 	cp = sshbuf_mutable_ptr(state->outgoing_packet);
  2622. 	type = cp[5];
                ^
  2623. 	if (ssh_packet_log_type(type))
  2624. 		debug3("%s: type %u", __func__, type);

#1037
channels.c:2641: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2639. 	    (r = sshpkt_put_u32(ssh, SSH2_EXTENDED_DATA_STDERR)) != 0 ||
  2640. 	    (r = sshpkt_put_string(ssh, sshbuf_ptr(c->extended), len)) != 0 ||
  2641. 	    (r = sshpkt_send(ssh)) != 0) {
                  ^
  2642. 		fatal("%s: channel %i: data: %s", __func__,
  2643. 		    c->self, ssh_err(r));

#1038
channels.c:2637: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  2635. 	if (!c->have_remote_id)
  2636. 		fatal(":%s: channel %d: no remote id", __func__, c->self);
  2637. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_EXTENDED_DATA)) != 0 ||
                  ^
  2638. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  2639. 	    (r = sshpkt_put_u32(ssh, SSH2_EXTENDED_DATA_STDERR)) != 0 ||

#1039
channels.c:2640: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_string`.
  2638. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  2639. 	    (r = sshpkt_put_u32(ssh, SSH2_EXTENDED_DATA_STDERR)) != 0 ||
  2640. 	    (r = sshpkt_put_string(ssh, sshbuf_ptr(c->extended), len)) != 0 ||
                  ^
  2641. 	    (r = sshpkt_send(ssh)) != 0) {
  2642. 		fatal("%s: channel %i: data: %s", __func__,

#1040
sshkey.c:2631: error: Integer Overflow L2
  ([0, 6] - 1):unsigned32 by call to `sshbuf_free`.
  2629. 		return r;
  2630. 	r = sshkey_from_blob_internal(b, keyp, 1);
  2631. 	sshbuf_free(b);
         ^
  2632. 	return r;
  2633. }

#1041
ssh-keygen.c:2713: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo] by call to `sshkey_check_revoked`.
  2711. 
  2712. 	if (revoked_keys != NULL) {
  2713. 		if ((r = sshkey_check_revoked(sign_key, revoked_keys)) != 0) {
                   ^
  2714. 			debug3("sshkey_check_revoked failed: %s", ssh_err(r));
  2715. 			goto done;

#1042
ssh-keygen.c:2713: error: Buffer Overrun L3
  Offset: [0, 255] Size: [0, +oo] by call to `sshkey_check_revoked`.
  2711. 
  2712. 	if (revoked_keys != NULL) {
  2713. 		if ((r = sshkey_check_revoked(sign_key, revoked_keys)) != 0) {
                   ^
  2714. 			debug3("sshkey_check_revoked failed: %s", ssh_err(r));
  2715. 			goto done;

#1043
ssh-keygen.c:2697: error: Buffer Overrun L3
  Offset: [10, +oo] (<= [8, +oo] + 2) Size: [0, +oo] by call to `sshsig_verify_fd`.
  2695. 		return r;
  2696. 	}
  2697. 	if ((r = sshsig_verify_fd(sigbuf, STDIN_FILENO, sig_namespace,
                  ^
  2698. 	    &sign_key, &sig_details)) != 0)
  2699. 		goto done; /* sshsig_verify() prints error */

#1044
ssh-keygen.c:2697: error: Buffer Overrun L3
  Offset: [11, +oo] (<= [4, +oo] + 7) Size: [0, +oo] by call to `sshsig_verify_fd`.
  2695. 		return r;
  2696. 	}
  2697. 	if ((r = sshsig_verify_fd(sigbuf, STDIN_FILENO, sig_namespace,
                  ^
  2698. 	    &sign_key, &sig_details)) != 0)
  2699. 		goto done; /* sshsig_verify() prints error */

#1045
ssh-keygen.c:2697: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshsig_verify_fd`.
  2695. 		return r;
  2696. 	}
  2697. 	if ((r = sshsig_verify_fd(sigbuf, STDIN_FILENO, sig_namespace,
                  ^
  2698. 	    &sign_key, &sig_details)) != 0)
  2699. 		goto done; /* sshsig_verify() prints error */

#1046
ssh-keygen.c:2674: error: Dead Store
  The value written to &sigfd (type int) is never used.
  2672.     const char *allowed_keys, const char *revoked_keys)
  2673. {
  2674. 	int r, ret = -1, sigfd = -1;
         ^
  2675. 	struct sshbuf *sigbuf = NULL, *abuf = NULL;
  2676. 	struct sshkey *sign_key = NULL;

#1047
ssh-keygen.c:2752: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  2750. 	sshbuf_free(sigbuf);
  2751. 	sshbuf_free(abuf);
  2752. 	sshkey_free(sign_key);
         ^
  2753. 	sshkey_sig_details_free(sig_details);
  2754. 	free(fp);

#1048
ssh-keygen.c:2694: error: Resource Leak
  resource acquired by call to `open()` at line 2684, column 15 is not released after line 2694, column 51.
  2692. 	}
  2693. 	if ((r = sshsig_dearmor(abuf, &sigbuf)) != 0) {
  2694. 		error("%s: sshsig_armor: %s", __func__, ssh_err(r));
                                                          ^
  2695. 		return r;
  2696. 	}

#1049
packet.c:2694: error: Integer Overflow L2
  ([-`ssh->state->outgoing_packet->size` - 268435466, `ssh->state->outgoing_packet->size` + 268435466] - [0, `ssh->state->outgoing_packet->size` + 268435466]):unsigned64 by call to `sshpkt_send`.
  2692. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  2693. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  2694. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  2695. 		return r;
  2696. 	return 0;

#1050
packet.c:2694: error: Integer Overflow L2
  ([-`ssh->state->outgoing_packet->size` - 268435466, `ssh->state->outgoing_packet->size` + 268435471] - [0, `ssh->state->outgoing_packet->size` + 268435466]):unsigned64 by call to `sshpkt_send`.
  2692. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  2693. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  2694. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  2695. 		return r;
  2696. 	return 0;

#1051
packet.c:2694: error: Integer Overflow L2
  ([0, `ssh->state->outgoing_packet->size` + 268435466] - [0, `ssh->state->outgoing_packet->size` + 268435466]):unsigned64 by call to `sshpkt_send`.
  2692. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  2693. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  2694. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  2695. 		return r;
  2696. 	return 0;

#1052
packet.c:2694: error: Integer Overflow L2
  ([0, `ssh->state->outgoing_packet->size` + 268435471] - [0, `ssh->state->outgoing_packet->size` + 268435466]):unsigned64 by call to `sshpkt_send`.
  2692. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  2693. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  2694. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  2695. 		return r;
  2696. 	return 0;

#1053
packet.c:2694: error: Integer Overflow L2
  ([0, `ssh->state->outgoing_packet->size` + 268435471] - [1, `ssh->state->outgoing_packet->size` + 268435466]):unsigned64 by call to `sshpkt_send`.
  2692. 	    (r = sshpkt_put_cstring(ssh, buf)) != 0 ||
  2693. 	    (r = sshpkt_put_cstring(ssh, "")) != 0 ||
  2694. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  2695. 		return r;
  2696. 	return 0;

#1054
sshkey.c:2732: error: Dead Store
  The value written to &r (type int) is never used.
  2730. {
  2731. 	int was_shielded = sshkey_is_shielded(key);
  2732. 	int r2, r = SSH_ERR_INTERNAL_ERROR;
         ^
  2733. 
  2734. 	if (sigp != NULL)

#1055
sshkey.c:2780: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshkey_shield_private`.
  2778. 		break;
  2779. 	}
  2780. 	if (was_shielded && (r2 = sshkey_shield_private(key)) != 0)
                                   ^
  2781. 		return r2;
  2782. 	return r;

#1056
channels.c:2856: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_send`.
  2854. 		if ((r = sshpkt_start(ssh, type)) != 0 ||
  2855. 		    (r = sshpkt_putb(ssh, modified)) != 0 ||
  2856. 		    (r = sshpkt_send(ssh)) != 0) {
                   ^
  2857. 			error("%s: send %s", __func__, ssh_err(r));
  2858. 			goto out;

#1057
channels.c:2856: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  2854. 		if ((r = sshpkt_start(ssh, type)) != 0 ||
  2855. 		    (r = sshpkt_putb(ssh, modified)) != 0 ||
  2856. 		    (r = sshpkt_send(ssh)) != 0) {
                   ^
  2857. 			error("%s: send %s", __func__, ssh_err(r));
  2858. 			goto out;

#1058
channels.c:2934: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_stringb`.
  2932. 	    (r = sshbuf_put_u32(b, c->mux_downstream_id)) != 0 ||
  2933. 	    (r = sshbuf_put(b, cp, len)) != 0 ||
  2934. 	    (r = sshbuf_put_stringb(downstream->output, b)) != 0) {
                  ^
  2935. 		error("%s: compose for muxclient %s", __func__, ssh_err(r));
  2936. 		goto out;

#1059
channels.c:2947: error: Uninitialized Value
  The value read from len was never initialized.
  2945. 	case SSH2_MSG_CHANNEL_OPEN_CONFIRMATION:
  2946. 		/* record remote_id for SSH2_MSG_CHANNEL_CLOSE */
  2947. 		if (cp && len > 4) {
                    ^
  2948. 			c->remote_id = PEEK_U32(cp);
  2949. 			c->have_remote_id = 1;

#1060
sshkey.c:2895: error: Dead Store
  The value written to &ret (type int) is never used.
  2893. 	u_char *ca_blob = NULL, *sig_blob = NULL, nonce[32];
  2894. 	size_t i, ca_len, sig_len;
  2895. 	int ret = SSH_ERR_INTERNAL_ERROR;
         ^
  2896. 	struct sshbuf *cert = NULL;
  2897. 	char *sigtype = NULL;

#1061
channels.c:2974: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  2972. 	if ((r = sshpkt_get_u32(ssh, &id)) != 0) {
  2973. 		error("%s: parse id: %s", where, ssh_err(r));
  2974. 		ssh_packet_disconnect(ssh, "Invalid %s message", what);
          ^
  2975. 	}
  2976. 	if (id > INT_MAX) {

#1062
channels.c:2974: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  2972. 	if ((r = sshpkt_get_u32(ssh, &id)) != 0) {
  2973. 		error("%s: parse id: %s", where, ssh_err(r));
  2974. 		ssh_packet_disconnect(ssh, "Invalid %s message", what);
          ^
  2975. 	}
  2976. 	if (id > INT_MAX) {

#1063
channels.c:2991: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  2989. 
  2990. 	if ((c = channel_lookup(ssh, id)) == NULL) {
  2991. 		ssh_packet_disconnect(ssh,
          ^
  2992. 		    "%s packet referred to nonexistent channel %d", what, id);
  2993. 	}

#1064
channels.c:2991: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  2989. 
  2990. 	if ((c = channel_lookup(ssh, id)) == NULL) {
  2991. 		ssh_packet_disconnect(ssh,
          ^
  2992. 		    "%s packet referred to nonexistent channel %d", what, id);
  2993. 	}

#1065
channels.c:3079: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3077. 			    c->self);
  3078. 		else
  3079. 			ssh_packet_disconnect(ssh, "Received extended_data "
           ^
  3080. 			    "after EOF on channel %d.", c->self);
  3081. 	}

#1066
channels.c:3079: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3077. 			    c->self);
  3078. 		else
  3079. 			ssh_packet_disconnect(ssh, "Received extended_data "
           ^
  3080. 			    "after EOF on channel %d.", c->self);
  3081. 	}

#1067
channels.c:3079: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3077. 			    c->self);
  3078. 		else
  3079. 			ssh_packet_disconnect(ssh, "Received extended_data "
           ^
  3080. 			    "after EOF on channel %d.", c->self);
  3081. 	}

#1068
channels.c:3120: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3118.         if ((r = sshpkt_get_end(ssh)) != 0) {
  3119. 		error("%s: parse data: %s", __func__, ssh_err(r));
  3120. 		ssh_packet_disconnect(ssh, "Invalid ieof message");
          ^
  3121. 	}
  3122. 

#1069
channels.c:3120: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_disconnect`.
  3118.         if ((r = sshpkt_get_end(ssh)) != 0) {
  3119. 		error("%s: parse data: %s", __func__, ssh_err(r));
  3120. 		ssh_packet_disconnect(ssh, "Invalid ieof message");
          ^
  3121. 	}
  3122. 

#1070
channels.c:3147: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3145.         if ((r = sshpkt_get_end(ssh)) != 0) {
  3146. 		error("%s: parse data: %s", __func__, ssh_err(r));
  3147. 		ssh_packet_disconnect(ssh, "Invalid oclose message");
          ^
  3148. 	}
  3149. 	chan_rcvd_oclose(ssh, c);

#1071
channels.c:3147: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3145.         if ((r = sshpkt_get_end(ssh)) != 0) {
  3146. 		error("%s: parse data: %s", __func__, ssh_err(r));
  3147. 		ssh_packet_disconnect(ssh, "Invalid oclose message");
          ^
  3148. 	}
  3149. 	chan_rcvd_oclose(ssh, c);

#1072
channels.c:3147: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3145.         if ((r = sshpkt_get_end(ssh)) != 0) {
  3146. 		error("%s: parse data: %s", __func__, ssh_err(r));
  3147. 		ssh_packet_disconnect(ssh, "Invalid oclose message");
          ^
  3148. 	}
  3149. 	chan_rcvd_oclose(ssh, c);

#1073
channels.c:3163: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3161. 		return 0;
  3162. 	if (c->type != SSH_CHANNEL_OPENING)
  3163. 		ssh_packet_disconnect(ssh, "Received open confirmation for "
          ^
  3164. 		    "non-opening channel %d.", c->self);
  3165. 	/*

#1074
channels.c:3174: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3172.             (r = sshpkt_get_end(ssh)) != 0) {
  3173. 		error("%s: window/maxpacket: %s", __func__, ssh_err(r));
  3174. 		ssh_packet_disconnect(ssh, "Invalid open confirmation message");
          ^
  3175. 	}
  3176. 

#1075
channels.c:3163: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3161. 		return 0;
  3162. 	if (c->type != SSH_CHANNEL_OPENING)
  3163. 		ssh_packet_disconnect(ssh, "Received open confirmation for "
          ^
  3164. 		    "non-opening channel %d.", c->self);
  3165. 	/*

#1076
channels.c:3174: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3172.             (r = sshpkt_get_end(ssh)) != 0) {
  3173. 		error("%s: window/maxpacket: %s", __func__, ssh_err(r));
  3174. 		ssh_packet_disconnect(ssh, "Invalid open confirmation message");
          ^
  3175. 	}
  3176. 

#1077
channels.c:3163: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3161. 		return 0;
  3162. 	if (c->type != SSH_CHANNEL_OPENING)
  3163. 		ssh_packet_disconnect(ssh, "Received open confirmation for "
          ^
  3164. 		    "non-opening channel %d.", c->self);
  3165. 	/*

#1078
channels.c:3174: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3172.             (r = sshpkt_get_end(ssh)) != 0) {
  3173. 		error("%s: window/maxpacket: %s", __func__, ssh_err(r));
  3174. 		ssh_packet_disconnect(ssh, "Invalid open confirmation message");
          ^
  3175. 	}
  3176. 

#1079
sshkey.c:3172: error: Dead Store
  The value written to &r (type int) is never used.
  3170.     enum sshkey_serialize_rep opts)
  3171. {
  3172. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  3173. 	int was_shielded = sshkey_is_shielded(key);
  3174. 	struct sshbuf *b = NULL;

#1080
sshkey.c:3364: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  3362. 	if (r == 0)
  3363. 		r = sshbuf_putb(buf, b);
  3364. 	sshbuf_free(b);
         ^
  3365. 
  3366. 	return r;

#1081
sshkey.c:3361: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshkey_shield_private`.
  3359.  out:
  3360. 	if (was_shielded)
  3361. 		r = sshkey_shield_private(key);
              ^
  3362. 	if (r == 0)
  3363. 		r = sshbuf_putb(buf, b);

#1082
sshkey.c:3273: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshbuf_put_stringb`.
  3271. 		    (r = sshbuf_put_u8(b, key->sk_flags)) != 0 ||
  3272. 		    (r = sshbuf_put_stringb(b, key->sk_key_handle)) != 0 ||
  3273. 		    (r = sshbuf_put_stringb(b, key->sk_reserved)) != 0)
                   ^
  3274. 			goto out;
  3275. 		break;

#1083
channels.c:3218: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3216. 		return 0;
  3217. 	if (c->type != SSH_CHANNEL_OPENING)
  3218. 		ssh_packet_disconnect(ssh, "Received open failure for "
          ^
  3219. 		    "non-opening channel %d.", c->self);
  3220. 	if ((r = sshpkt_get_u32(ssh, &reason)) != 0) {

#1084
channels.c:3222: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3220. 	if ((r = sshpkt_get_u32(ssh, &reason)) != 0) {
  3221. 		error("%s: reason: %s", __func__, ssh_err(r));
  3222. 		ssh_packet_disconnect(ssh, "Invalid open failure message");
          ^
  3223. 	}
  3224. 	/* skip language */

#1085
channels.c:3218: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3216. 		return 0;
  3217. 	if (c->type != SSH_CHANNEL_OPENING)
  3218. 		ssh_packet_disconnect(ssh, "Received open failure for "
          ^
  3219. 		    "non-opening channel %d.", c->self);
  3220. 	if ((r = sshpkt_get_u32(ssh, &reason)) != 0) {

#1086
channels.c:3222: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3220. 	if ((r = sshpkt_get_u32(ssh, &reason)) != 0) {
  3221. 		error("%s: reason: %s", __func__, ssh_err(r));
  3222. 		ssh_packet_disconnect(ssh, "Invalid open failure message");
          ^
  3223. 	}
  3224. 	/* skip language */

#1087
channels.c:3218: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3216. 		return 0;
  3217. 	if (c->type != SSH_CHANNEL_OPENING)
  3218. 		ssh_packet_disconnect(ssh, "Received open failure for "
          ^
  3219. 		    "non-opening channel %d.", c->self);
  3220. 	if ((r = sshpkt_get_u32(ssh, &reason)) != 0) {

#1088
channels.c:3222: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3220. 	if ((r = sshpkt_get_u32(ssh, &reason)) != 0) {
  3221. 		error("%s: reason: %s", __func__, ssh_err(r));
  3222. 		ssh_packet_disconnect(ssh, "Invalid open failure message");
          ^
  3223. 	}
  3224. 	/* skip language */

#1089
channels.c:3263: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3261.             (r = sshpkt_get_end(ssh)) != 0) {
  3262. 		error("%s: adjust: %s", __func__, ssh_err(r));
  3263. 		ssh_packet_disconnect(ssh, "Invalid window adjust message");
          ^
  3264. 	}
  3265. 	debug2("channel %d: rcvd adjust %u", c->self, adjust);

#1090
channels.c:3263: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3261.             (r = sshpkt_get_end(ssh)) != 0) {
  3262. 		error("%s: adjust: %s", __func__, ssh_err(r));
  3263. 		ssh_packet_disconnect(ssh, "Invalid window adjust message");
          ^
  3264. 	}
  3265. 	debug2("channel %d: rcvd adjust %u", c->self, adjust);

#1091
channels.c:3263: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3261.             (r = sshpkt_get_end(ssh)) != 0) {
  3262. 		error("%s: adjust: %s", __func__, ssh_err(r));
  3263. 		ssh_packet_disconnect(ssh, "Invalid window adjust message");
          ^
  3264. 	}
  3265. 	debug2("channel %d: rcvd adjust %u", c->self, adjust);

#1092
channels.c:3293: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3291. 		return 0;
  3292.         if (sshpkt_get_end(ssh) != 0)
  3293. 		ssh_packet_disconnect(ssh, "Invalid status confirm message");
          ^
  3294. 	if ((cc = TAILQ_FIRST(&c->status_confirms)) == NULL)
  3295. 		return 0;

#1093
channels.c:3293: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3291. 		return 0;
  3292.         if (sshpkt_get_end(ssh) != 0)
  3293. 		ssh_packet_disconnect(ssh, "Invalid status confirm message");
          ^
  3294. 	if ((cc = TAILQ_FIRST(&c->status_confirms)) == NULL)
  3295. 		return 0;

#1094
channels.c:3293: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3291. 		return 0;
  3292.         if (sshpkt_get_end(ssh) != 0)
  3293. 		ssh_packet_disconnect(ssh, "Invalid status confirm message");
          ^
  3294. 	if ((cc = TAILQ_FIRST(&c->status_confirms)) == NULL)
  3295. 		return 0;

#1095
channels.c:3351: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_send_debug`.
  3349. 			    strcmp(listen_addr, "0.0.0.0") != 0 &&
  3350. 			    strcmp(listen_addr, "*") != 0) {
  3351. 				ssh_packet_send_debug(ssh,
            ^
  3352. 				    "Forwarding listen address "
  3353. 				    "\"%s\" overridden by server "

#1096
channels.c:3351: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssh_packet_send_debug`.
  3349. 			    strcmp(listen_addr, "0.0.0.0") != 0 &&
  3350. 			    strcmp(listen_addr, "*") != 0) {
  3351. 				ssh_packet_send_debug(ssh,
            ^
  3352. 				    "Forwarding listen address "
  3353. 				    "\"%s\" overridden by server "

#1097
channels.c:3351: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_send_debug`.
  3349. 			    strcmp(listen_addr, "0.0.0.0") != 0 &&
  3350. 			    strcmp(listen_addr, "*") != 0) {
  3351. 				ssh_packet_send_debug(ssh,
            ^
  3352. 				    "Forwarding listen address "
  3353. 				    "\"%s\" overridden by server "

#1098
channels.c:3423: error: Buffer Overrun L3
  Offset: [4, +oo] (<= [0, +oo] + 4) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3421. 		if (addr == NULL) {
  3422. 			/* This really shouldn't happen */
  3423. 			ssh_packet_disconnect(ssh, "getaddrinfo: fatal error: %s",
           ^
  3424. 			    ssh_gai_strerror(r));
  3425. 		} else {

#1099
channels.c:3423: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `ssh_packet_disconnect`.
  3421. 		if (addr == NULL) {
  3422. 			/* This really shouldn't happen */
  3423. 			ssh_packet_disconnect(ssh, "getaddrinfo: fatal error: %s",
           ^
  3424. 			    ssh_gai_strerror(r));
  3425. 		} else {

#1100
channels.c:3423: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_disconnect`.
  3421. 		if (addr == NULL) {
  3422. 			/* This really shouldn't happen */
  3423. 			ssh_packet_disconnect(ssh, "getaddrinfo: fatal error: %s",
           ^
  3424. 			    ssh_gai_strerror(r));
  3425. 		} else {

#1101
sshkey.c:3382: error: Dead Store
  The value written to &r (type int) is never used.
  3380. 	struct sshkey *k = NULL;
  3381. 	size_t pklen = 0, sklen = 0;
  3382. 	int type, r = SSH_ERR_INTERNAL_ERROR;
         ^
  3383. 	u_char *ed25519_pk = NULL, *ed25519_sk = NULL;
  3384. 	u_char *xmss_pk = NULL, *xmss_sk = NULL;

#1102
sshkey.c:3765: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `sshkey_free`.
  3763. 	BN_clear_free(rsa_iqmp);
  3764. #endif /* WITH_OPENSSL */
  3765. 	sshkey_free(k);
         ^
  3766. 	freezero(ed25519_pk, pklen);
  3767. 	freezero(ed25519_sk, sklen);

#1103
channels.c:3824: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ssh_packet_send_debug`.
  3822. {
  3823. 	if (!check_rfwd_permission(ssh, fwd)) {
  3824. 		ssh_packet_send_debug(ssh, "port forwarding refused");
          ^
  3825. 		if (fwd->listen_path != NULL)
  3826. 			/* XXX always allowed, see remote_open_match() */

#1104
channels.c:3824: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssh_packet_send_debug`.
  3822. {
  3823. 	if (!check_rfwd_permission(ssh, fwd)) {
  3824. 		ssh_packet_send_debug(ssh, "port forwarding refused");
          ^
  3825. 		if (fwd->listen_path != NULL)
  3826. 			/* XXX always allowed, see remote_open_match() */

#1105
channels.c:3824: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `ssh_packet_send_debug`.
  3822. {
  3823. 	if (!check_rfwd_permission(ssh, fwd)) {
  3824. 		ssh_packet_send_debug(ssh, "port forwarding refused");
          ^
  3825. 		if (fwd->listen_path != NULL)
  3826. 			/* XXX always allowed, see remote_open_match() */

#1106
channels.c:3909: error: Dead Store
  The value written to &host_to_connect (type char*) is never used.
  3907. 	if (success) {
  3908. 		/* Record that connection to this host/port is permitted. */
  3909. 		host_to_connect = listen_host = listen_path = NULL;
          ^
  3910. 		port_to_connect = listen_port = 0;
  3911. 		if (fwd->connect_path != NULL) {

#1107
channels.c:3910: error: Dead Store
  The value written to &port_to_connect (type int) is never used.
  3908. 		/* Record that connection to this host/port is permitted. */
  3909. 		host_to_connect = listen_host = listen_path = NULL;
  3910. 		port_to_connect = listen_port = 0;
          ^
  3911. 		if (fwd->connect_path != NULL) {
  3912. 			host_to_connect = xstrdup(fwd->connect_path);

#1108
channels.c:3889: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  3887. 		    (r = sshpkt_put_u8(ssh, 1)) != 0 || /* want reply */
  3888. 		    (r = sshpkt_put_cstring(ssh, fwd->listen_path)) != 0 ||
  3889. 		    (r = sshpkt_send(ssh)) != 0 ||
                   ^
  3890. 		    (r = ssh_packet_write_wait(ssh)) != 0)
  3891. 			fatal("%s: request streamlocal: %s",

#1109
channels.c:3887: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  3885. 		    (r = sshpkt_put_cstring(ssh,
  3886. 		    "streamlocal-forward@openssh.com")) != 0 ||
  3887. 		    (r = sshpkt_put_u8(ssh, 1)) != 0 || /* want reply */
                   ^
  3888. 		    (r = sshpkt_put_cstring(ssh, fwd->listen_path)) != 0 ||
  3889. 		    (r = sshpkt_send(ssh)) != 0 ||

#1110
channels.c:3884: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  3882. 	/* Send the forward request to the remote side. */
  3883. 	if (fwd->listen_path != NULL) {
  3884. 		if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
                   ^
  3885. 		    (r = sshpkt_put_cstring(ssh,
  3886. 		    "streamlocal-forward@openssh.com")) != 0 ||

#1111
channels.c:3894: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  3892. 			    __func__, ssh_err(r));
  3893. 	} else {
  3894. 		if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
                   ^
  3895. 		    (r = sshpkt_put_cstring(ssh, "tcpip-forward")) != 0 ||
  3896. 		    (r = sshpkt_put_u8(ssh, 1)) != 0 || /* want reply */

#1112
channels.c:3897: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  3895. 		    (r = sshpkt_put_cstring(ssh, "tcpip-forward")) != 0 ||
  3896. 		    (r = sshpkt_put_u8(ssh, 1)) != 0 || /* want reply */
  3897. 		    (r = sshpkt_put_cstring(ssh,
                   ^
  3898. 		    channel_rfwd_bind_host(fwd->listen_host))) != 0 ||
  3899. 		    (r = sshpkt_put_u32(ssh, fwd->listen_port)) != 0 ||

#1113
channels.c:3888: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `fwd->listen_path->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  3886. 		    "streamlocal-forward@openssh.com")) != 0 ||
  3887. 		    (r = sshpkt_put_u8(ssh, 1)) != 0 || /* want reply */
  3888. 		    (r = sshpkt_put_cstring(ssh, fwd->listen_path)) != 0 ||
                   ^
  3889. 		    (r = sshpkt_send(ssh)) != 0 ||
  3890. 		    (r = ssh_packet_write_wait(ssh)) != 0)

#1114
sshkey.c:3978: error: Buffer Overrun L2
  Offset: [0, 1023] Size: 32 by call to `bcrypt_pbkdf`.
  3976. 	if (strcmp(kdfname, "bcrypt") == 0) {
  3977. 		arc4random_buf(salt, SALT_LEN);
  3978. 		if (bcrypt_pbkdf(passphrase, strlen(passphrase),
              ^
  3979. 		    salt, SALT_LEN, key, keylen + ivlen, rounds) < 0) {
  3980. 			r = SSH_ERR_INVALID_ARGUMENT;

#1115
sshkey.c:3991: error: Buffer Overrun L3
  Offset: 46 (<= 44 + 2) Size: [0, +oo] by call to `cipher_init`.
  3989. 		goto out;
  3990. 	}
  3991. 	if ((r = cipher_init(&ciphercontext, cipher, key, keylen,
                  ^
  3992. 	    key + keylen, ivlen, 1)) != 0)
  3993. 		goto out;

#1116
sshkey.c:3991: error: Buffer Overrun L3
  Offset: [47, 63] (<= [44, 60] + 3) Size: [0, +oo] by call to `cipher_init`.
  3989. 		goto out;
  3990. 	}
  3991. 	if ((r = cipher_init(&ciphercontext, cipher, key, keylen,
                  ^
  3992. 	    key + keylen, ivlen, 1)) != 0)
  3993. 		goto out;

#1117
sshkey.c:3944: error: Dead Store
  The value written to &r (type int) is never used.
  3942. 	size_t i, pubkeylen, keylen, ivlen, blocksize, authlen;
  3943. 	u_int check;
  3944. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  3945. 	struct sshcipher_ctx *ciphercontext = NULL;
  3946. 	const struct sshcipher *cipher;

#1118
sshkey.c:4049: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshbuf_free`.
  4047. 
  4048.  out:
  4049. 	sshbuf_free(kdf);
         ^
  4050. 	sshbuf_free(encoded);
  4051. 	sshbuf_free(encrypted);

#1119
sshkey.c:4021: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshbuf_put_u8`.
  4019. 	i = 0;
  4020. 	while (sshbuf_len(encrypted) % blocksize) {
  4021. 		if ((r = sshbuf_put_u8(encrypted, ++i & 0xff)) != 0)
                   ^
  4022. 			goto out;
  4023. 	}

#1120
sshkey.c:4026: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshbuf_put_u32`.
  4024. 
  4025. 	/* length in destination buffer */
  4026. 	if ((r = sshbuf_put_u32(encoded, sshbuf_len(encrypted))) != 0)
                  ^
  4027. 		goto out;
  4028. 

#1121
sshkey.c:4015: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `comment->strlen`)]):unsigned64 by call to `sshbuf_put_cstring`.
  4013. 	if ((r = sshkey_private_serialize_opt(prv, encrypted,
  4014. 	     SSHKEY_SERIALIZE_FULL)) != 0 ||
  4015. 	    (r = sshbuf_put_cstring(encrypted, comment)) != 0)
                  ^
  4016. 		goto out;
  4017. 

#1122
sshkey.c:3978: error: Integer Overflow L2
  ([1, 1024] - [0, 1024]):unsigned64 by call to `bcrypt_pbkdf`.
  3976. 	if (strcmp(kdfname, "bcrypt") == 0) {
  3977. 		arc4random_buf(salt, SALT_LEN);
  3978. 		if (bcrypt_pbkdf(passphrase, strlen(passphrase),
              ^
  3979. 		    salt, SALT_LEN, key, keylen + ivlen, rounds) < 0) {
  3980. 			r = SSH_ERR_INVALID_ARGUMENT;

#1123
sshkey.c:4059: error: Uninitialized Value
  The value read from pubkeylen was never initialized.
  4057. 	}
  4058. 	if (pubkeyblob != NULL) {
  4059. 		explicit_bzero(pubkeyblob, pubkeylen);
          ^
  4060. 		free(pubkeyblob);
  4061. 	}

#1124
channels.c:4019: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  4017. 	    (r = sshpkt_put_cstring(ssh, channel_rfwd_bind_host(host))) != 0 ||
  4018. 	    (r = sshpkt_put_u32(ssh, port)) != 0 ||
  4019. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  4020. 		fatal("%s: send cancel: %s", __func__, ssh_err(r));
  4021. 

#1125
channels.c:4016: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  4014. 	if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
  4015. 	    (r = sshpkt_put_cstring(ssh, "cancel-tcpip-forward")) != 0 ||
  4016. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 || /* want reply */
                  ^
  4017. 	    (r = sshpkt_put_cstring(ssh, channel_rfwd_bind_host(host))) != 0 ||
  4018. 	    (r = sshpkt_put_u32(ssh, port)) != 0 ||

#1126
channels.c:4014: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  4012. 		return -1;
  4013. 	}
  4014. 	if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
                  ^
  4015. 	    (r = sshpkt_put_cstring(ssh, "cancel-tcpip-forward")) != 0 ||
  4016. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 || /* want reply */

#1127
channels.c:4017: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  4015. 	    (r = sshpkt_put_cstring(ssh, "cancel-tcpip-forward")) != 0 ||
  4016. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 || /* want reply */
  4017. 	    (r = sshpkt_put_cstring(ssh, channel_rfwd_bind_host(host))) != 0 ||
                  ^
  4018. 	    (r = sshpkt_put_u32(ssh, port)) != 0 ||
  4019. 	    (r = sshpkt_send(ssh)) != 0)

#1128
channels.c:4010: error: Uninitialized Value
  The value read from perm was never initialized.
  4008. 		perm = NULL;
  4009. 	}
  4010. 	if (perm == NULL) {
             ^
  4011. 		debug("%s: requested forward not found", __func__);
  4012. 		return -1;

#1129
channels.c:4055: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  4053. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 || /* want reply */
  4054. 	    (r = sshpkt_put_cstring(ssh, path)) != 0 ||
  4055. 	    (r = sshpkt_send(ssh)) != 0)
                  ^
  4056. 		fatal("%s: send cancel: %s", __func__, ssh_err(r));
  4057. 

#1130
channels.c:4053: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  4051. 	    (r = sshpkt_put_cstring(ssh,
  4052. 	    "cancel-streamlocal-forward@openssh.com")) != 0 ||
  4053. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 || /* want reply */
                  ^
  4054. 	    (r = sshpkt_put_cstring(ssh, path)) != 0 ||
  4055. 	    (r = sshpkt_send(ssh)) != 0)

#1131
channels.c:4050: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  4048. 		return -1;
  4049. 	}
  4050. 	if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
                  ^
  4051. 	    (r = sshpkt_put_cstring(ssh,
  4052. 	    "cancel-streamlocal-forward@openssh.com")) != 0 ||

#1132
channels.c:4054: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `path->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  4052. 	    "cancel-streamlocal-forward@openssh.com")) != 0 ||
  4053. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 || /* want reply */
  4054. 	    (r = sshpkt_put_cstring(ssh, path)) != 0 ||
                  ^
  4055. 	    (r = sshpkt_send(ssh)) != 0)
  4056. 		fatal("%s: send cancel: %s", __func__, ssh_err(r));

#1133
channels.c:4051: error: Integer Overflow L2
  ([0, +oo] - [4, 42]):unsigned64 by call to `sshpkt_put_cstring`.
  4049. 	}
  4050. 	if ((r = sshpkt_start(ssh, SSH2_MSG_GLOBAL_REQUEST)) != 0 ||
  4051. 	    (r = sshpkt_put_cstring(ssh,
                  ^
  4052. 	    "cancel-streamlocal-forward@openssh.com")) != 0 ||
  4053. 	    (r = sshpkt_put_u8(ssh, 0)) != 0 || /* want reply */

#1134
channels.c:4046: error: Uninitialized Value
  The value read from perm was never initialized.
  4044. 		perm = NULL;
  4045. 	}
  4046. 	if (perm == NULL) {
             ^
  4047. 		debug("%s: requested forward not found", __func__);
  4048. 		return -1;

#1135
sshkey.c:4196: error: Buffer Overrun L2
  Offset: [0, 1023] Size: 32 by call to `bcrypt_pbkdf`.
  4194. 		    (r = sshbuf_get_u32(kdf, &rounds)) != 0)
  4195. 			goto out;
  4196. 		if (bcrypt_pbkdf(passphrase, strlen(passphrase), salt, slen,
              ^
  4197. 		    key, keylen + ivlen, rounds) < 0) {
  4198. 			r = SSH_ERR_INVALID_FORMAT;

#1136
sshkey.c:4240: error: Buffer Overrun L3
  Offset added: [1, +oo] (<= [0, +oo] + [1, +oo]) Size: [0, +oo] by call to `sshkey_private_deserialize`.
  4238. 
  4239. 	/* Load the private key and comment */
  4240. 	if ((r = sshkey_private_deserialize(decrypted, &k)) != 0 ||
                  ^
  4241. 	    (r = sshbuf_get_cstring(decrypted, &comment, NULL)) != 0)
  4242. 		goto out;

#1137
sshkey.c:4134: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, +oo] by call to `sshbuf_b64tod`.
  4132. 
  4133. 	/* decode base64 */
  4134. 	if ((r = sshbuf_b64tod(decoded, (char *)sshbuf_ptr(encoded))) != 0)
                  ^
  4135. 		goto out;
  4136. 

#1138
sshkey.c:4240: error: Buffer Overrun L3
  Offset: [11, +oo] (<= [4, +oo] + 7) Size: [0, +oo] by call to `sshkey_private_deserialize`.
  4238. 
  4239. 	/* Load the private key and comment */
  4240. 	if ((r = sshkey_private_deserialize(decrypted, &k)) != 0 ||
                  ^
  4241. 	    (r = sshbuf_get_cstring(decrypted, &comment, NULL)) != 0)
  4242. 		goto out;

#1139
sshkey.c:4145: error: Buffer Overrun L3
  Offset: [3, +oo] (<= [0, +oo] + 3) Size: [0, +oo] by call to `sshbuf_get_cstring`.
  4143. 	/* parse public portion of key */
  4144. 	if ((r = sshbuf_consume(decoded, sizeof(AUTH_MAGIC))) != 0 ||
  4145. 	    (r = sshbuf_get_cstring(decoded, &ciphername, NULL)) != 0 ||
                  ^
  4146. 	    (r = sshbuf_get_cstring(decoded, &kdfname, NULL)) != 0 ||
  4147. 	    (r = sshbuf_froms(decoded, &kdf)) != 0 ||

#1140
sshkey.c:4076: error: Dead Store
  The value written to &r (type int) is never used.
  4074. 	const struct sshcipher *cipher = NULL;
  4075. 	const u_char *cp;
  4076. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  4077. 	size_t encoded_len;
  4078. 	size_t i, keylen = 0, ivlen = 0, authlen = 0, slen = 0;

#1141
sshkey.c:4196: error: Inferbo Alloc May Be Big
  Length: [5, 1048580] by call to `bcrypt_pbkdf`.
  4194. 		    (r = sshbuf_get_u32(kdf, &rounds)) != 0)
  4195. 			goto out;
  4196. 		if (bcrypt_pbkdf(passphrase, strlen(passphrase), salt, slen,
              ^
  4197. 		    key, keylen + ivlen, rounds) < 0) {
  4198. 			r = SSH_ERR_INVALID_FORMAT;

#1142
sshkey.c:4281: error: Integer Overflow L2
  ([0, 2] - 1):unsigned32 by call to `sshbuf_free`.
  4279. 		free(key);
  4280. 	}
  4281. 	sshbuf_free(encoded);
         ^
  4282. 	sshbuf_free(decoded);
  4283. 	sshbuf_free(kdf);

#1143
sshkey.c:4196: error: Integer Overflow L2
  ([1, 1024] - [0, 1024]):unsigned64 by call to `bcrypt_pbkdf`.
  4194. 		    (r = sshbuf_get_u32(kdf, &rounds)) != 0)
  4195. 			goto out;
  4196. 		if (bcrypt_pbkdf(passphrase, strlen(passphrase), salt, slen,
              ^
  4197. 		    key, keylen + ivlen, rounds) < 0) {
  4198. 			r = SSH_ERR_INVALID_FORMAT;

#1144
sshkey.c:4102: error: Null Dereference
  pointer `cp` last assigned on line 4099 could be null and is dereferenced by call to `memcmp()` at line 4102, column 6.
  4100. 	encoded_len = sshbuf_len(blob);
  4101. 	if (encoded_len < (MARK_BEGIN_LEN + MARK_END_LEN) ||
  4102. 	    memcmp(cp, MARK_BEGIN, MARK_BEGIN_LEN) != 0) {
             ^
  4103. 		r = SSH_ERR_INVALID_FORMAT;
  4104. 		goto out;

#1145
channels.c:4264: error: Dead Store
  The value written to &sock (type int) is never used.
  4262. 	struct addrinfo hints;
  4263. 	int gaierr;
  4264. 	int sock = -1;
         ^
  4265. 	char strport[NI_MAXSERV];
  4266. 

#1146
sshkey.c:4377: error: Integer Overflow L2
  ([0, max(1, `key->cert->extensions->refcount`)] - 1):unsigned32 by call to `sshbuf_free`.
  4375. 
  4376. 	EVP_PKEY_free(pkey);
  4377. 	sshbuf_free(blob);
         ^
  4378. 	BIO_free(bio);
  4379. 	return r;

#1147
sshkey.c:4598: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshkey_free`.
  4596. 	BIO_free(bio);
  4597. 	EVP_PKEY_free(pk);
  4598. 	sshkey_free(prv);
         ^
  4599. 	return r;
  4600. }

#1148
channels.c:4521: error: Buffer Overrun L3
  Offset: [5, +oo] (<= [0, +oo] + 5) Size: [0, +oo] by call to `sshpkt_send`.
  4519. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_xpixel)) != 0 ||
  4520. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_ypixel)) != 0 ||
  4521. 		    (r = sshpkt_send(ssh)) != 0)
                   ^
  4522. 			fatal("%s: channel %u: send window-change: %s",
  4523. 			    __func__, i, ssh_err(r));

#1149
channels.c:4521: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  4519. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_xpixel)) != 0 ||
  4520. 		    (r = sshpkt_put_u32(ssh, (u_int)ws.ws_ypixel)) != 0 ||
  4521. 		    (r = sshpkt_send(ssh)) != 0)
                   ^
  4522. 			fatal("%s: channel %u: send window-change: %s",
  4523. 			    __func__, i, ssh_err(r));

#1150
channels.c:4544: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `sshpkt_put_u32`.
  4542. 	 */
  4543. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN_CONFIRMATION)) != 0 ||
  4544. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
                  ^
  4545. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||
  4546. 	    (r = sshpkt_put_u32(ssh, c->local_window)) != 0 ||

#1151
channels.c:4543: error: Integer Overflow L2
  ([0, +oo] - 6):unsigned64 by call to `sshpkt_start`.
  4541. 	 * so that we can get SOCKS header from peer.
  4542. 	 */
  4543. 	if ((r = sshpkt_start(ssh, SSH2_MSG_CHANNEL_OPEN_CONFIRMATION)) != 0 ||
                  ^
  4544. 	    (r = sshpkt_put_u32(ssh, c->remote_id)) != 0 ||
  4545. 	    (r = sshpkt_put_u32(ssh, c->self)) != 0 ||

#1152
channels.c:4641: error: Uninitialized Value
  The value read from socks[_] was never initialized.
  4639. 				close(sock);
  4640. 				for (n = 0; n < num_socks; n++)
  4641. 					close(socks[n]);
             ^
  4642. 				num_socks = 0;
  4643. 				break;

#1153
channels.c:4659: error: Uninitialized Value
  The value read from socks[_] was never initialized.
  4657. 	/* Start listening for connections on the socket. */
  4658. 	for (n = 0; n < num_socks; n++) {
  4659. 		sock = socks[n];
          ^
  4660. 		if (listen(sock, SSH_LISTEN_BACKLOG) == -1) {
  4661. 			error("listen: %.100s", strerror(errno));

#1154
channels.c:4670: error: Uninitialized Value
  The value read from socks[_] was never initialized.
  4668. 	*chanids = xcalloc(num_socks + 1, sizeof(**chanids));
  4669. 	for (n = 0; n < num_socks; n++) {
  4670. 		sock = socks[n];
          ^
  4671. 		nc = channel_new(ssh, "x11 listener",
  4672. 		    SSH_CHANNEL_X11_LISTENER, sock, sock, -1,

#1155
sshkey.c:4607: error: Dead Store
  The value written to &r (type int) is never used.
  4605.     const char *passphrase, struct sshkey **keyp, char **commentp)
  4606. {
  4607. 	int r = SSH_ERR_INTERNAL_ERROR;
         ^
  4608. 
  4609. 	if (keyp != NULL)

#1156
channels.c:4918: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `sshpkt_send`.
  4916. 	    (r = sshpkt_put_cstring(ssh, new_data)) != 0 ||
  4917. 	    (r = sshpkt_put_u32(ssh, screen_number)) != 0 ||
  4918. 	    (r = sshpkt_send(ssh)) != 0 ||
                  ^
  4919. 	    (r = ssh_packet_write_wait(ssh)) != 0)
  4920. 		fatal("%s: send x11-req: %s", __func__, ssh_err(r));

#1157
channels.c:4914: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `sshpkt_put_u8`.
  4912. 	/* Send the request packet. */
  4913. 	channel_request_start(ssh, client_session_id, "x11-req", want_reply);
  4914. 	if ((r = sshpkt_put_u8(ssh, 0)) != 0 || /* bool: single connection */
                  ^
  4915. 	    (r = sshpkt_put_cstring(ssh, proto)) != 0 ||
  4916. 	    (r = sshpkt_put_cstring(ssh, new_data)) != 0 ||

#1158
channels.c:4916: error: Integer Overflow L2
  ([0, +oo] - [4, 134217728]):unsigned64 by call to `sshpkt_put_cstring`.
  4914. 	if ((r = sshpkt_put_u8(ssh, 0)) != 0 || /* bool: single connection */
  4915. 	    (r = sshpkt_put_cstring(ssh, proto)) != 0 ||
  4916. 	    (r = sshpkt_put_cstring(ssh, new_data)) != 0 ||
                  ^
  4917. 	    (r = sshpkt_put_u32(ssh, screen_number)) != 0 ||
  4918. 	    (r = sshpkt_send(ssh)) != 0 ||

#1159
channels.c:4915: error: Integer Overflow L2
  ([0, +oo] - [4, 4+min(134217724, `proto->strlen`)]):unsigned64 by call to `sshpkt_put_cstring`.
  4913. 	channel_request_start(ssh, client_session_id, "x11-req", want_reply);
  4914. 	if ((r = sshpkt_put_u8(ssh, 0)) != 0 || /* bool: single connection */
  4915. 	    (r = sshpkt_put_cstring(ssh, proto)) != 0 ||
                  ^
  4916. 	    (r = sshpkt_put_cstring(ssh, new_data)) != 0 ||
  4917. 	    (r = sshpkt_put_u32(ssh, screen_number)) != 0 ||

Found 1160 issues
                                    Issue Type(ISSUED_TYPE_ID): #
                      Integer Overflow L2(INTEGER_OVERFLOW_L2): 587
                          Buffer Overrun L3(BUFFER_OVERRUN_L3): 245
                                        Dead Store(DEAD_STORE): 123
                      Uninitialized Value(UNINITIALIZED_VALUE): 78
                            Null Dereference(NULL_DEREFERENCE): 31
                          Buffer Overrun L2(BUFFER_OVERRUN_L2): 27
                            Unreachable Code(UNREACHABLE_CODE): 25
            Inferbo Alloc May Be Big(INFERBO_ALLOC_MAY_BE_BIG): 11
                          Buffer Overrun L1(BUFFER_OVERRUN_L1): 11
                          Buffer Overrun S2(BUFFER_OVERRUN_S2): 7
                                  Resource Leak(RESOURCE_LEAK): 6
  Inferbo Alloc May Be Negative(INFERBO_ALLOC_MAY_BE_NEGATIVE): 6
                      Integer Overflow L1(INTEGER_OVERFLOW_L1): 3
