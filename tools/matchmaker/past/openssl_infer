#0
crypto/des/cbc_cksm.c:23: error: Dead Store
  The value written to &iv (type unsigned char const *) is never used.
  21. 
  22.     c2l(iv, tout0);
  23.     c2l(iv, tout1);
          ^
  24.     for (; l > 0; l -= 8) {
  25.         if (l >= 8) {

#1
crypto/des/cbc_cksm.c:41: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  39.     if (out != NULL) {
  40.         l2c(tout0, out);
  41.         l2c(tout1, out);
              ^
  42.     }
  43.     tout0 = tin0 = tin1 = tin[0] = tin[1] = 0;

#2
crypto/des/cbc_cksm.c:43: error: Dead Store
  The value written to &tout0 (type unsigned int) is never used.
  41.         l2c(tout1, out);
  42.     }
  43.     tout0 = tin0 = tin1 = tin[0] = tin[1] = 0;
          ^
  44.     /*
  45.      * Transform the data in tout1 so that it will match the return value

#3
crypto/des/ecb3_enc.c:22: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  20. 
  21.     c2l(in, l0);
  22.     c2l(in, l1);
          ^
  23.     ll[0] = l0;
  24.     ll[1] = l1;

#4
crypto/des/ecb3_enc.c:32: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  30.     l1 = ll[1];
  31.     l2c(l0, out);
  32.     l2c(l1, out);
          ^
  33. }

#5
crypto/des/pcbc_enc.c:27: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  25.     if (enc) {
  26.         c2l(iv, xor0);
  27.         c2l(iv, xor1);
              ^
  28.         for (; length > 0; length -= 8) {
  29.             if (length >= 8) {

#6
crypto/des/pcbc_enc.c:46: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  44.     } else {
  45.         c2l(iv, xor0);
  46.         c2l(iv, xor1);
              ^
  47.         for (; length > 0; length -= 8) {
  48.             c2l(in, sin0);

#7
crypto/des/pcbc_enc.c:65: error: Dead Store
  The value written to &sin0 (type unsigned int) is never used.
  63.     }
  64.     tin[0] = tin[1] = 0;
  65.     sin0 = sin1 = xor0 = xor1 = tout0 = tout1 = 0;
          ^
  66. }

#8
apps/lib/app_params.c:69: error: Dead Store
  The value written to &bufsz (type unsigned long) is never used.
  67.     if (printed_len > 0) {
  68.         buf += printed_len;
  69.         bufsz -= printed_len;
              ^
  70.     }
  71.     *buf = '\0';

#9
crypto/bn/bn_sqrt.c:98: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `BN_mod_exp`.
   96.         if (!BN_add_word(q, 1))
   97.             goto end;
   98.         if (!BN_mod_exp(ret, A, q, p, ctx))
                    ^
   99.             goto end;
  100.         err = 0;

#10
crypto/bn/bn_sqrt.c:98: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_exp`.
   96.         if (!BN_add_word(q, 1))
   97.             goto end;
   98.         if (!BN_mod_exp(ret, A, q, p, ctx))
                    ^
   99.             goto end;
  100.         err = 0;

#11
crypto/bn/bn_sqrt.c:145: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_sqr`.
  143. 
  144.         /* y := b^2 */
  145.         if (!BN_mod_sqr(y, b, p, ctx))
                    ^
  146.             goto end;
  147. 

#12
crypto/bn/bn_sqrt.c:98: error: Integer Overflow L2
  ([0, 4+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_exp`.
   96.         if (!BN_add_word(q, 1))
   97.             goto end;
   98.         if (!BN_mod_exp(ret, A, q, p, ctx))
                    ^
   99.             goto end;
  100.         err = 0;

#13
crypto/bn/bn_sqrt.c:134: error: Integer Overflow L2
  ([0, `p->d`] - [0, 1]):unsigned64 by call to `BN_mod_lshift1_quick`.
  132. 
  133.         /* t := 2*a */
  134.         if (!BN_mod_lshift1_quick(t, A, p))
                    ^
  135.             goto end;
  136. 

#14
crypto/idea/i_cbc.c:40: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  38.         }
  39.         if (l != -8) {
  40.             n2ln(in, tin0, tin1, l + 8);
                  ^
  41.             tin0 ^= tout0;
  42.             tin1 ^= tout1;

#15
crypto/idea/i_cbc.c:73: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  71.             n2l(in, tin0);
  72.             tin[0] = tin0;
  73.             n2l(in, tin1);
                  ^
  74.             tin[1] = tin1;
  75.             IDEA_encrypt(tin, ks);

#16
crypto/idea/i_cbc.c:52: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  50.         }
  51.         l2n(tout0, iv);
  52.         l2n(tout1, iv);
              ^
  53.     } else {
  54.         n2l(iv, xor0);

#17
crypto/idea/i_cbc.c:83: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  81.         }
  82.         l2n(xor0, iv);
  83.         l2n(xor1, iv);
              ^
  84.     }
  85.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;

#18
crypto/idea/i_cbc.c:49: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  47.             l2n(tout0, out);
  48.             tout1 = tin[1];
  49.             l2n(tout1, out);
                  ^
  50.         }
  51.         l2n(tout0, iv);

#19
crypto/idea/i_cbc.c:78: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  76.             tout0 = tin[0] ^ xor0;
  77.             tout1 = tin[1] ^ xor1;
  78.             l2nn(tout0, tout1, out, l + 8);
                  ^
  79.             xor0 = tin0;
  80.             xor1 = tin1;

#20
crypto/idea/i_cbc.c:85: error: Dead Store
  The value written to &tin0 (type unsigned long) is never used.
  83.         l2n(xor1, iv);
  84.     }
  85.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;
          ^
  86.     tin[0] = tin[1] = 0;
  87. }

#21
crypto/rc2/rc2_cbc.c:39: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  37.         }
  38.         if (l != -8) {
  39.             c2ln(in, tin0, tin1, l + 8);
                  ^
  40.             tin0 ^= tout0;
  41.             tin1 ^= tout1;

#22
crypto/rc2/rc2_cbc.c:72: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  70.             c2l(in, tin0);
  71.             tin[0] = tin0;
  72.             c2l(in, tin1);
                  ^
  73.             tin[1] = tin1;
  74.             RC2_decrypt(tin, ks);

#23
crypto/rc2/rc2_cbc.c:51: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  49.         }
  50.         l2c(tout0, iv);
  51.         l2c(tout1, iv);
              ^
  52.     } else {
  53.         c2l(iv, xor0);

#24
crypto/rc2/rc2_cbc.c:82: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  80.         }
  81.         l2c(xor0, iv);
  82.         l2c(xor1, iv);
              ^
  83.     }
  84.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;

#25
crypto/rc2/rc2_cbc.c:48: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  46.             l2c(tout0, out);
  47.             tout1 = tin[1];
  48.             l2c(tout1, out);
                  ^
  49.         }
  50.         l2c(tout0, iv);

#26
crypto/rc2/rc2_cbc.c:77: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  75.             tout0 = tin[0] ^ xor0;
  76.             tout1 = tin[1] ^ xor1;
  77.             l2cn(tout0, tout1, out, l + 8);
                  ^
  78.             xor0 = tin0;
  79.             xor1 = tin1;

#27
crypto/rc2/rc2_cbc.c:84: error: Dead Store
  The value written to &tin0 (type unsigned long) is never used.
  82.         l2c(xor1, iv);
  83.     }
  84.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;
          ^
  85.     tin[0] = tin[1] = 0;
  86. }

#28
crypto/cast/c_ecb.c:21: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  19.     n2l(in, l);
  20.     d[0] = l;
  21.     n2l(in, l);
          ^
  22.     d[1] = l;
  23.     if (enc)

#29
crypto/cast/c_ecb.c:31: error: Dead Store
  The value written to &l (type unsigned int) is never used.
  29.     l = d[1];
  30.     l2n(l, out);
  31.     l = d[0] = d[1] = 0;
          ^
  32. }

#30
crypto/cast/c_ecb.c:30: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  28.     l2n(l, out);
  29.     l = d[1];
  30.     l2n(l, out);
          ^
  31.     l = d[0] = d[1] = 0;
  32. }

#31
crypto/des/des_enc.c:82: error: Dead Store
  The value written to &l (type unsigned int) is never used.
  80.     data[0] = l;
  81.     data[1] = r;
  82.     l = r = t = u = 0;
          ^
  83. }
  84. 

#32
crypto/des/xcbc_enc.c:53: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  51.         }
  52.         if (l != -8) {
  53.             c2ln(in, tin0, tin1, l + 8);
                  ^
  54.             tin0 ^= tout0 ^ inW0;
  55.             tin[0] = tin0;

#33
crypto/des/xcbc_enc.c:86: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  84.             c2l(in, tin0);
  85.             tin[0] = tin0 ^ outW0;
  86.             c2l(in, tin1);
                  ^
  87.             tin[1] = tin1 ^ outW1;
  88.             DES_encrypt1(tin, schedule, DES_DECRYPT);

#34
crypto/des/xcbc_enc.c:29: error: Dead Store
  The value written to &in2 (type unsigned char const *) is never used.
  27.     in2 = &(*inw)[0];
  28.     c2l(in2, inW0);
  29.     c2l(in2, inW1);
          ^
  30.     in2 = &(*outw)[0];
  31.     c2l(in2, outW0);

#35
crypto/des/xcbc_enc.c:32: error: Dead Store
  The value written to &in2 (type unsigned char const *) is never used.
  30.     in2 = &(*outw)[0];
  31.     c2l(in2, outW0);
  32.     c2l(in2, outW1);
          ^
  33. 
  34.     iv = &(*ivec)[0];

#36
crypto/des/xcbc_enc.c:101: error: Dead Store
  The value written to &inW0 (type unsigned int) is never used.
   99.     }
  100.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;
  101.     inW0 = inW1 = outW0 = outW1 = 0;
           ^
  102.     tin[0] = tin[1] = 0;
  103. }

#37
crypto/des/xcbc_enc.c:38: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  36.     if (enc) {
  37.         c2l(iv, tout0);
  38.         c2l(iv, tout1);
              ^
  39.         for (l -= 8; l >= 0; l -= 8) {
  40.             c2l(in, tin0);

#38
crypto/des/xcbc_enc.c:66: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  64.         iv = &(*ivec)[0];
  65.         l2c(tout0, iv);
  66.         l2c(tout1, iv);
              ^
  67.     } else {
  68.         c2l(iv, xor0);

#39
crypto/des/xcbc_enc.c:69: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  67.     } else {
  68.         c2l(iv, xor0);
  69.         c2l(iv, xor1);
              ^
  70.         for (l -= 8; l > 0; l -= 8) {
  71.             c2l(in, tin0);

#40
crypto/des/xcbc_enc.c:98: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
   96.         iv = &(*ivec)[0];
   97.         l2c(xor0, iv);
   98.         l2c(xor1, iv);
               ^
   99.     }
  100.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;

#41
crypto/des/xcbc_enc.c:62: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  60.             l2c(tout0, out);
  61.             tout1 = tin[1] ^ outW1;
  62.             l2c(tout1, out);
                  ^
  63.         }
  64.         iv = &(*ivec)[0];

#42
crypto/des/xcbc_enc.c:91: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  89.             tout0 = tin[0] ^ xor0 ^ inW0;
  90.             tout1 = tin[1] ^ xor1 ^ inW1;
  91.             l2cn(tout0, tout1, out, l + 8);
                  ^
  92.             xor0 = tin0;
  93.             xor1 = tin1;

#43
crypto/des/xcbc_enc.c:100: error: Dead Store
  The value written to &tin0 (type unsigned int) is never used.
   98.         l2c(xor1, iv);
   99.     }
  100.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;
           ^
  101.     inW0 = inW1 = outW0 = outW1 = 0;
  102.     tin[0] = tin[1] = 0;

#44
crypto/engine/tb_cipher.c:16: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  14. void ENGINE_unregister_ciphers(ENGINE *e)
  15. {
  16.     engine_table_unregister(&cipher_table, e);
          ^
  17. }
  18. 

#45
crypto/engine/tb_digest.c:16: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  14. void ENGINE_unregister_digests(ENGINE *e)
  15. {
  16.     engine_table_unregister(&digest_table, e);
          ^
  17. }
  18. 

#46
crypto/idea/i_skey.c:43: error: Buffer Overrun L1
  Offset: [7, +oo] (<= [0, +oo] + 7) Size: 6.
  41.         r1 = kf[6];
  42.         *(kt++) = ((r0 << 9) | (r1 >> 7)) & 0xffff;
  43.         r0 = kf[7];
                   ^
  44.         *(kt++) = ((r1 << 9) | (r0 >> 7)) & 0xffff;
  45.         r1 = kf[0];

#47
crypto/idea/i_skey.c:34: error: Buffer Overrun L1
  Offset: [8, +oo] Size: 6.
  32.         r2 = kf[1];
  33.         r1 = kf[2];
  34.         *(kt++) = ((r2 << 9) | (r1 >> 7)) & 0xffff;
              ^
  35.         r0 = kf[3];
  36.         *(kt++) = ((r1 << 9) | (r0 >> 7)) & 0xffff;

#48
crypto/idea/i_skey.c:27: error: Dead Store
  The value written to &key (type unsigned char const *) is never used.
  25.     n2s(key, kt[5]);
  26.     n2s(key, kt[6]);
  27.     n2s(key, kt[7]);
          ^
  28. 
  29.     kf = kt;

#49
ssl/record/dtls1_bitmap.c:19: error: Dead Store
  The value written to &v1 (type unsigned char const *) is never used.
  17.     uint64_t l1, l2;
  18. 
  19.     n2l8(v1, l1);
          ^
  20.     n2l8(v2, l2);
  21. 

#50
ssl/record/dtls1_bitmap.c:20: error: Dead Store
  The value written to &v2 (type unsigned char const *) is never used.
  18. 
  19.     n2l8(v1, l1);
  20.     n2l8(v2, l2);
          ^
  21. 
  22.     ret = l1 - l2;

#51
crypto/ec/curve448/arch_32/f_impl.c:41: error: Buffer Overrun L2
  Offset: [1, 14] Size: 8.
  39.         for (i = j + 1; i < 8; i++) {
  40.             accum0 -= widemul(a[8 + j - i], b[i]);
  41.             accum2 += widemul(aa[8 + j - i], bb[i]);
                                    ^
  42.             accum1 += widemul(a[16 + j - i], b[8 + i]);
  43.         }

#52
crypto/ec/curve448/arch_32/f_impl.c:33: error: Buffer Overrun L3
  Offset: [-7, 7] Size: 8.
  31.         for (i = 0; i < j + 1; i++) {
  32.             accum2 += widemul(a[j - i], b[i]);
  33.             accum1 += widemul(aa[j - i], bb[i]);
                                    ^
  34.             accum0 += widemul(a[8 + j - i], b[8 + i]);
  35.         }

#53
crypto/ec/curve448/arch_32/f_impl.c:33: error: Uninitialized Value
  The value read from aa[_] was never initialized.
  31.         for (i = 0; i < j + 1; i++) {
  32.             accum2 += widemul(a[j - i], b[i]);
  33.             accum1 += widemul(aa[j - i], bb[i]);
                            ^
  34.             accum0 += widemul(a[8 + j - i], b[8 + i]);
  35.         }

#54
crypto/ec/curve448/arch_32/f_impl.c:41: error: Uninitialized Value
  The value read from aa[_] was never initialized.
  39.         for (i = j + 1; i < 8; i++) {
  40.             accum0 -= widemul(a[8 + j - i], b[i]);
  41.             accum2 += widemul(aa[8 + j - i], bb[i]);
                            ^
  42.             accum1 += widemul(a[16 + j - i], b[8 + i]);
  43.         }

#55
crypto/ec/curve448/arch_32/f_impl.c:33: error: Uninitialized Value
  The value read from bb[_] was never initialized.
  31.         for (i = 0; i < j + 1; i++) {
  32.             accum2 += widemul(a[j - i], b[i]);
  33.             accum1 += widemul(aa[j - i], bb[i]);
                            ^
  34.             accum0 += widemul(a[8 + j - i], b[8 + i]);
  35.         }

#56
crypto/ec/curve448/arch_32/f_impl.c:41: error: Uninitialized Value
  The value read from bb[_] was never initialized.
  39.         for (i = j + 1; i < 8; i++) {
  40.             accum0 -= widemul(a[8 + j - i], b[i]);
  41.             accum2 += widemul(aa[8 + j - i], bb[i]);
                            ^
  42.             accum1 += widemul(a[16 + j - i], b[8 + i]);
  43.         }

#57
crypto/engine/tb_dh.c:17: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  15. void ENGINE_unregister_DH(ENGINE *e)
  16. {
  17.     engine_table_unregister(&dh_table, e);
          ^
  18. }
  19. 

#58
crypto/engine/tb_dsa.c:17: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  15. void ENGINE_unregister_DSA(ENGINE *e)
  16. {
  17.     engine_table_unregister(&dsa_table, e);
          ^
  18. }
  19. 

#59
crypto/engine/tb_eckey.c:17: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  15. void ENGINE_unregister_EC(ENGINE *e)
  16. {
  17.     engine_table_unregister(&dh_table, e);
          ^
  18. }
  19. 

#60
crypto/engine/tb_pkmeth.c:17: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  15. void ENGINE_unregister_pkey_meths(ENGINE *e)
  16. {
  17.     engine_table_unregister(&pkey_meth_table, e);
          ^
  18. }
  19. 

#61
crypto/engine/tb_rand.c:17: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  15. void ENGINE_unregister_RAND(ENGINE *e)
  16. {
  17.     engine_table_unregister(&rand_table, e);
          ^
  18. }
  19. 

#62
crypto/engine/tb_rsa.c:17: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  15. void ENGINE_unregister_RSA(ENGINE *e)
  16. {
  17.     engine_table_unregister(&rsa_table, e);
          ^
  18. }
  19. 

#63
ssl/statem/extensions_clnt.c:25: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  23.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_renegotiate)
  24.             || !WPACKET_start_sub_packet_u16(pkt)
  25.             || !WPACKET_sub_memcpy_u8(pkt, s->s3.previous_client_finished,
                      ^
  26.                                s->s3.previous_client_finished_len)
  27.             || !WPACKET_close(pkt)) {

#64
ssl/statem/extensions_clnt.c:25: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 5]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  23.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_renegotiate)
  24.             || !WPACKET_start_sub_packet_u16(pkt)
  25.             || !WPACKET_sub_memcpy_u8(pkt, s->s3.previous_client_finished,
                      ^
  26.                                s->s3.previous_client_finished_len)
  27.             || !WPACKET_close(pkt)) {

#65
crypto/bn/bn_exp2.c:22: error: Dead Store
  The value written to &r_is_one (type int) is never used.
  20.     int i, j, bits, b, bits1, bits2, ret =
  21.         0, wpos1, wpos2, window1, window2, wvalue1, wvalue2;
  22.     int r_is_one = 1;
          ^
  23.     BIGNUM *d, *r;
  24.     const BIGNUM *a_mod_m;

#66
crypto/bn/bn_exp2.c:72: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
  70.      */
  71.     if (a1->neg || BN_ucmp(a1, m) >= 0) {
  72.         if (!BN_mod(val1[0], a1, m, ctx))
                   ^
  73.             goto err;
  74.         a_mod_m = val1[0];

#67
crypto/bn/bn_exp2.c:101: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
   99.      */
  100.     if (a2->neg || BN_ucmp(a2, m) >= 0) {
  101.         if (!BN_mod(val2[0], a2, m, ctx))
                    ^
  102.             goto err;
  103.         a_mod_m = val2[0];

#68
crypto/bn/bn_exp2.c:86: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul_montgomery`.
  84.         goto err;
  85.     if (window1 > 1) {
  86.         if (!BN_mod_mul_montgomery(d, val1[0], val1[0], mont, ctx))
                   ^
  87.             goto err;
  88. 

#69
crypto/bn/bn_exp2.c:83: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_to_montgomery`.
  81.     }
  82. 
  83.     if (!BN_to_montgomery(val1[0], a_mod_m, mont, ctx))
               ^
  84.         goto err;
  85.     if (window1 > 1) {

#70
crypto/bn/bn_exp2.c:111: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_to_montgomery`.
  109.         goto err;
  110.     }
  111.     if (!BN_to_montgomery(val2[0], a_mod_m, mont, ctx))
                ^
  112.         goto err;
  113.     if (window2 > 1) {

#71
crypto/ec/ecp_oct.c:64: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  62.         if (!BN_mod_sqr(tmp2, x_, group->field, ctx))
  63.             goto err;
  64.         if (!BN_mod_mul(tmp1, tmp2, x_, group->field, ctx))
                   ^
  65.             goto err;
  66.     }

#72
crypto/ec/ecp_oct.c:62: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_sqr`.
  60.             goto err;
  61.     } else {
  62.         if (!BN_mod_sqr(tmp2, x_, group->field, ctx))
                   ^
  63.             goto err;
  64.         if (!BN_mod_mul(tmp1, tmp2, x_, group->field, ctx))

#73
crypto/ec/ecp_oct.c:70: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_lshift1_quick`.
  68.     /* tmp1 := tmp1 + a*x */
  69.     if (group->a_is_minus3) {
  70.         if (!BN_mod_lshift1_quick(tmp2, x, group->field))
                   ^
  71.             goto err;
  72.         if (!BN_mod_add_quick(tmp2, tmp2, x, group->field))

#74
crypto/ec/ecp_oct.c:140: error: Integer Overflow L2
  ([0, 1] - [0, 1]):unsigned64 by call to `BN_usub`.
  138.             goto err;
  139.         }
  140.         if (!BN_usub(y, group->field, y))
                    ^
  141.             goto err;
  142.     }

#75
crypto/ec/ecp_oct.c:62: error: Integer Overflow L2
  ([0, 3+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_sqr`.
  60.             goto err;
  61.     } else {
  62.         if (!BN_mod_sqr(tmp2, x_, group->field, ctx))
                   ^
  63.             goto err;
  64.         if (!BN_mod_mul(tmp1, tmp2, x_, group->field, ctx))

#76
crypto/ec/ecp_oct.c:64: error: Integer Overflow L2
  ([0, 6+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_mul`.
  62.         if (!BN_mod_sqr(tmp2, x_, group->field, ctx))
  63.             goto err;
  64.         if (!BN_mod_mul(tmp1, tmp2, x_, group->field, ctx))
                   ^
  65.             goto err;
  66.     }

#77
test/sslcorrupttest.c:21: error: Null Dereference
  pointer `next` last assigned on line 19 could be null and is dereferenced by call to `BIO_test_flags()` at line 21, column 13.
  19.     BIO *next = BIO_next(bio);
  20. 
  21.     flags = BIO_test_flags(next, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_RWS);
                  ^
  22.     BIO_clear_flags(bio, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_RWS);
  23.     BIO_set_flags(bio, flags);

#78
crypto/bio/bio_cb.c:35: error: Integer Overflow L2
  (256 - [0, 2147483647]):unsigned64.
  33.         len = 0;
  34.     p = buf + len;
  35.     left = sizeof(buf) - len;
          ^
  36. 
  37.     switch (cmd) {

#79
crypto/bio/bio_cb.c:39: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  37.     switch (cmd) {
  38.     case BIO_CB_FREE:
  39.         BIO_snprintf(p, left, "Free - %s\n", bio->method->name);
              ^
  40.         break;
  41.     case BIO_CB_READ:

#80
crypto/bio/bio_cb.c:43: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  41.     case BIO_CB_READ:
  42.         if (bio->method->type & BIO_TYPE_DESCRIPTOR)
  43.             BIO_snprintf(p, left, "read(%d,%lu) - %s fd=%d\n",
                  ^
  44.                          bio->num, (unsigned long)argi,
  45.                          bio->method->name, bio->num);

#81
crypto/bio/bio_cb.c:60: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  58.         break;
  59.     case BIO_CB_PUTS:
  60.         BIO_snprintf(p, left, "puts() - %s\n", bio->method->name);
              ^
  61.         break;
  62.     case BIO_CB_GETS:

#82
crypto/bio/bio_cb.c:63: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  61.         break;
  62.     case BIO_CB_GETS:
  63.         BIO_snprintf(p, left, "gets(%lu) - %s\n", (unsigned long)argi,
              ^
  64.                      bio->method->name);
  65.         break;

#83
crypto/bio/bio_cb.c:67: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  65.         break;
  66.     case BIO_CB_CTRL:
  67.         BIO_snprintf(p, left, "ctrl(%lu) - %s\n", (unsigned long)argi,
              ^
  68.                      bio->method->name);
  69.         break;

#84
crypto/bio/bio_cb.c:71: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  69.         break;
  70.     case BIO_CB_RETURN | BIO_CB_READ:
  71.         BIO_snprintf(p, left, "read return %ld\n", ret);
              ^
  72.         break;
  73.     case BIO_CB_RETURN | BIO_CB_WRITE:

#85
crypto/bio/bio_cb.c:86: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  84.         break;
  85.     default:
  86.         BIO_snprintf(p, left, "bio callback - unknown type (%d)\n", cmd);
              ^
  87.         break;
  88.     }

#86
crypto/bn/bn_kron.c:135: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  133.     }
  134.  end:
  135.     BN_CTX_end(ctx);
           ^
  136.     if (err)
  137.         return -2;

#87
crypto/des/ofb64ede.c:38: error: Dead Store
  The value written to &dp (type char*) is never used.
  36.     dp = (char *)d;
  37.     l2c(v0, dp);
  38.     l2c(v1, dp);
          ^
  39.     while (l--) {
  40.         if (n == 0) {

#88
crypto/des/ofb64ede.c:49: error: Dead Store
  The value written to &dp (type char*) is never used.
  47.             dp = (char *)d;
  48.             l2c(v0, dp);
  49.             l2c(v1, dp);
                  ^
  50.             save++;
  51.         }

#89
crypto/des/ofb64ede.c:33: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  31.     iv = &(*ivec)[0];
  32.     c2l(iv, v0);
  33.     c2l(iv, v1);
          ^
  34.     ti[0] = v0;
  35.     ti[1] = v1;

#90
crypto/des/ofb64ede.c:58: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  56.         iv = &(*ivec)[0];
  57.         l2c(v0, iv);
  58.         l2c(v1, iv);
              ^
  59.     }
  60.     v0 = v1 = ti[0] = ti[1] = 0;

#91
crypto/des/ofb64ede.c:60: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  58.         l2c(v1, iv);
  59.     }
  60.     v0 = v1 = ti[0] = ti[1] = 0;
          ^
  61.     *num = n;
  62. }

#92
crypto/des/ofb64ede.c:52: error: Uninitialized Value
  The value read from d[_] was never initialized.
  50.             save++;
  51.         }
  52.         *(out++) = *(in++) ^ d[n];
              ^
  53.         n = (n + 1) & 0x07;
  54.     }

#93
crypto/des/ofb64enc.c:37: error: Dead Store
  The value written to &dp (type unsigned char*) is never used.
  35.     dp = d;
  36.     l2c(v0, dp);
  37.     l2c(v1, dp);
          ^
  38.     while (l--) {
  39.         if (n == 0) {

#94
crypto/des/ofb64enc.c:45: error: Dead Store
  The value written to &dp (type unsigned char*) is never used.
  43.             l2c(t, dp);
  44.             t = ti[1];
  45.             l2c(t, dp);
                  ^
  46.             save++;
  47.         }

#95
crypto/des/ofb64enc.c:32: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  30.     iv = &(*ivec)[0];
  31.     c2l(iv, v0);
  32.     c2l(iv, v1);
          ^
  33.     ti[0] = v0;
  34.     ti[1] = v1;

#96
crypto/des/ofb64enc.c:56: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  54.         iv = &(*ivec)[0];
  55.         l2c(v0, iv);
  56.         l2c(v1, iv);
              ^
  57.     }
  58.     t = v0 = v1 = ti[0] = ti[1] = 0;

#97
crypto/des/ofb64enc.c:58: error: Dead Store
  The value written to &t (type unsigned int) is never used.
  56.         l2c(v1, iv);
  57.     }
  58.     t = v0 = v1 = ti[0] = ti[1] = 0;
          ^
  59.     *num = n;
  60. }

#98
crypto/des/ofb64enc.c:48: error: Uninitialized Value
  The value read from d[_] was never initialized.
  46.             save++;
  47.         }
  48.         *(out++) = *(in++) ^ d[n];
              ^
  49.         n = (n + 1) & 0x07;
  50.     }

#99
test/packettest.c:25: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `PACKET_forward`.
  23.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 1))
  24.             || !TEST_size_t_eq(PACKET_remaining(&pkt), 1)
  25.             || !TEST_true(PACKET_forward(&pkt, 1))
                      ^
  26.             || !TEST_size_t_eq(PACKET_remaining(&pkt), 0))
  27.         return 0;

#100
test/packettest.c:23: error: Integer Overflow L2
  ([0, +oo] - 254):unsigned64 by call to `PACKET_forward`.
  21.     if (!TEST_true(PACKET_buf_init(&pkt, smbuf, sizeof(smbuf)))
  22.             || !TEST_size_t_eq(PACKET_remaining(&pkt), BUF_LEN)
  23.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 1))
                      ^
  24.             || !TEST_size_t_eq(PACKET_remaining(&pkt), 1)
  25.             || !TEST_true(PACKET_forward(&pkt, 1))

#101
test/x509_dup_cert_test.c:23: error: Buffer Overrun L2
  Offset: [max(0, `n`), 399] Size: 100 by call to `test_get_argument`.
  21.     X509_STORE *store = NULL;
  22.     X509_LOOKUP *lookup = NULL;
  23.     const char *cert_f = test_get_argument(n);
                               ^
  24. 
  25.     if (TEST_ptr(store = X509_STORE_new())

#102
crypto/bf/bf_ofb64.c:38: error: Dead Store
  The value written to &dp (type char*) is never used.
  36.     dp = (char *)d;
  37.     l2n(v0, dp);
  38.     l2n(v1, dp);
          ^
  39.     while (l--) {
  40.         if (n == 0) {

#103
crypto/bf/bf_ofb64.c:46: error: Dead Store
  The value written to &dp (type char*) is never used.
  44.             l2n(t, dp);
  45.             t = ti[1];
  46.             l2n(t, dp);
                  ^
  47.             save++;
  48.         }

#104
crypto/bf/bf_ofb64.c:33: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  31.     iv = (unsigned char *)ivec;
  32.     n2l(iv, v0);
  33.     n2l(iv, v1);
          ^
  34.     ti[0] = v0;
  35.     ti[1] = v1;

#105
crypto/bf/bf_ofb64.c:57: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  55.         iv = (unsigned char *)ivec;
  56.         l2n(v0, iv);
  57.         l2n(v1, iv);
              ^
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;

#106
crypto/bf/bf_ofb64.c:59: error: Dead Store
  The value written to &t (type unsigned int) is never used.
  57.         l2n(v1, iv);
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;
          ^
  60.     *num = n;
  61. }

#107
crypto/bf/bf_ofb64.c:49: error: Uninitialized Value
  The value read from d[_] was never initialized.
  47.             save++;
  48.         }
  49.         *(out++) = *(in++) ^ d[n];
              ^
  50.         n = (n + 1) & 0x07;
  51.     }

#108
crypto/cast/c_ofb64.c:38: error: Dead Store
  The value written to &dp (type char*) is never used.
  36.     dp = (char *)d;
  37.     l2n(v0, dp);
  38.     l2n(v1, dp);
          ^
  39.     while (l--) {
  40.         if (n == 0) {

#109
crypto/cast/c_ofb64.c:46: error: Dead Store
  The value written to &dp (type char*) is never used.
  44.             l2n(t, dp);
  45.             t = ti[1];
  46.             l2n(t, dp);
                  ^
  47.             save++;
  48.         }

#110
crypto/cast/c_ofb64.c:33: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  31.     iv = ivec;
  32.     n2l(iv, v0);
  33.     n2l(iv, v1);
          ^
  34.     ti[0] = v0;
  35.     ti[1] = v1;

#111
crypto/cast/c_ofb64.c:57: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  55.         iv = ivec;
  56.         l2n(v0, iv);
  57.         l2n(v1, iv);
              ^
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;

#112
crypto/cast/c_ofb64.c:59: error: Dead Store
  The value written to &t (type unsigned int) is never used.
  57.         l2n(v1, iv);
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;
          ^
  60.     *num = n;
  61. }

#113
crypto/cast/c_ofb64.c:49: error: Uninitialized Value
  The value read from d[_] was never initialized.
  47.             save++;
  48.         }
  49.         *(out++) = *(in++) ^ d[n];
              ^
  50.         n = (n + 1) & 0x07;
  51.     }

#114
crypto/des/cfb64ede.c:34: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  32.             if (n == 0) {
  33.                 c2l(iv, v0);
  34.                 c2l(iv, v1);
                      ^
  35. 
  36.                 ti[0] = v0;

#115
crypto/des/cfb64ede.c:44: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  42.                 iv = &(*ivec)[0];
  43.                 l2c(v0, iv);
  44.                 l2c(v1, iv);
                      ^
  45.                 iv = &(*ivec)[0];
  46.             }

#116
crypto/des/cfb64ede.c:56: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  54.             if (n == 0) {
  55.                 c2l(iv, v0);
  56.                 c2l(iv, v1);
                      ^
  57. 
  58.                 ti[0] = v0;

#117
crypto/des/cfb64ede.c:66: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  64.                 iv = &(*ivec)[0];
  65.                 l2c(v0, iv);
  66.                 l2c(v1, iv);
                      ^
  67.                 iv = &(*ivec)[0];
  68.             }

#118
crypto/des/cfb64ede.c:76: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  74.         }
  75.     }
  76.     v0 = v1 = ti[0] = ti[1] = c = cc = 0;
          ^
  77.     *num = n;
  78. }

#119
crypto/des/cfb64enc.c:34: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  32.                 c2l(iv, v0);
  33.                 ti[0] = v0;
  34.                 c2l(iv, v1);
                      ^
  35.                 ti[1] = v1;
  36.                 DES_encrypt1(ti, schedule, DES_ENCRYPT);

#120
crypto/des/cfb64enc.c:41: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  39.                 l2c(v0, iv);
  40.                 v0 = ti[1];
  41.                 l2c(v0, iv);
                      ^
  42.                 iv = &(*ivec)[0];
  43.             }

#121
crypto/des/cfb64enc.c:54: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  52.                 c2l(iv, v0);
  53.                 ti[0] = v0;
  54.                 c2l(iv, v1);
                      ^
  55.                 ti[1] = v1;
  56.                 DES_encrypt1(ti, schedule, DES_ENCRYPT);

#122
crypto/des/cfb64enc.c:61: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  59.                 l2c(v0, iv);
  60.                 v0 = ti[1];
  61.                 l2c(v0, iv);
                      ^
  62.                 iv = &(*ivec)[0];
  63.             }

#123
crypto/des/cfb64enc.c:71: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  69.         }
  70.     }
  71.     v0 = v1 = ti[0] = ti[1] = c = cc = 0;
          ^
  72.     *num = n;
  73. }

#124
crypto/des/ofb_enc.c:47: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  45.     iv = &(*ivec)[0];
  46.     c2l(iv, v0);
  47.     c2l(iv, v1);
          ^
  48.     ti[0] = v0;
  49.     ti[1] = v1;

#125
crypto/des/ofb_enc.c:80: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  78.     iv = &(*ivec)[0];
  79.     l2c(v0, iv);
  80.     l2c(v1, iv);
          ^
  81.     v0 = v1 = d0 = d1 = ti[0] = ti[1] = vv0 = vv1 = 0;
  82. }

#126
crypto/des/ofb_enc.c:81: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  79.     l2c(v0, iv);
  80.     l2c(v1, iv);
  81.     v0 = v1 = d0 = d1 = ti[0] = ti[1] = vv0 = vv1 = 0;
          ^
  82. }

#127
crypto/idea/i_ofb64.c:38: error: Dead Store
  The value written to &dp (type char*) is never used.
  36.     dp = (char *)d;
  37.     l2n(v0, dp);
  38.     l2n(v1, dp);
          ^
  39.     while (l--) {
  40.         if (n == 0) {

#128
crypto/idea/i_ofb64.c:46: error: Dead Store
  The value written to &dp (type char*) is never used.
  44.             l2n(t, dp);
  45.             t = ti[1];
  46.             l2n(t, dp);
                  ^
  47.             save++;
  48.         }

#129
crypto/idea/i_ofb64.c:33: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  31.     iv = (unsigned char *)ivec;
  32.     n2l(iv, v0);
  33.     n2l(iv, v1);
          ^
  34.     ti[0] = v0;
  35.     ti[1] = v1;

#130
crypto/idea/i_ofb64.c:57: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  55.         iv = (unsigned char *)ivec;
  56.         l2n(v0, iv);
  57.         l2n(v1, iv);
              ^
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;

#131
crypto/idea/i_ofb64.c:59: error: Dead Store
  The value written to &t (type unsigned long) is never used.
  57.         l2n(v1, iv);
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;
          ^
  60.     *num = n;
  61. }

#132
crypto/idea/i_ofb64.c:49: error: Uninitialized Value
  The value read from d[_] was never initialized.
  47.             save++;
  48.         }
  49.         *(out++) = *(in++) ^ d[n];
              ^
  50.         n = (n + 1) & 0x07;
  51.     }

#133
crypto/modes/ccm128.c:22: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo].
  20.                         block128_f block)
  21. {
  22.     memset(ctx->nonce.c, 0, sizeof(ctx->nonce.c));
          ^
  23.     ctx->nonce.c[0] = ((u8)(L - 1) & 7) | (u8)(((M - 2) / 2) & 7) << 3;
  24.     ctx->blocks = 0;

#134
crypto/rc2/rc2ofb64.c:38: error: Dead Store
  The value written to &dp (type char*) is never used.
  36.     dp = (char *)d;
  37.     l2c(v0, dp);
  38.     l2c(v1, dp);
          ^
  39.     while (l--) {
  40.         if (n == 0) {

#135
crypto/rc2/rc2ofb64.c:46: error: Dead Store
  The value written to &dp (type char*) is never used.
  44.             l2c(t, dp);
  45.             t = ti[1];
  46.             l2c(t, dp);
                  ^
  47.             save++;
  48.         }

#136
crypto/rc2/rc2ofb64.c:33: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  31.     iv = (unsigned char *)ivec;
  32.     c2l(iv, v0);
  33.     c2l(iv, v1);
          ^
  34.     ti[0] = v0;
  35.     ti[1] = v1;

#137
crypto/rc2/rc2ofb64.c:57: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  55.         iv = (unsigned char *)ivec;
  56.         l2c(v0, iv);
  57.         l2c(v1, iv);
              ^
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;

#138
crypto/rc2/rc2ofb64.c:59: error: Dead Store
  The value written to &t (type unsigned long) is never used.
  57.         l2c(v1, iv);
  58.     }
  59.     t = v0 = v1 = ti[0] = ti[1] = 0;
          ^
  60.     *num = n;
  61. }

#139
crypto/rc2/rc2ofb64.c:49: error: Uninitialized Value
  The value read from d[_] was never initialized.
  47.             save++;
  48.         }
  49.         *(out++) = *(in++) ^ d[n];
              ^
  50.         n = (n + 1) & 0x07;
  51.     }

#140
crypto/bf/bf_cfb64.c:35: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  33.                 n2l(iv, v0);
  34.                 ti[0] = v0;
  35.                 n2l(iv, v1);
                      ^
  36.                 ti[1] = v1;
  37.                 BF_encrypt((BF_LONG *)ti, schedule);

#141
crypto/bf/bf_cfb64.c:42: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  40.                 l2n(t, iv);
  41.                 t = ti[1];
  42.                 l2n(t, iv);
                      ^
  43.                 iv = (unsigned char *)ivec;
  44.             }

#142
crypto/bf/bf_cfb64.c:55: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  53.                 n2l(iv, v0);
  54.                 ti[0] = v0;
  55.                 n2l(iv, v1);
                      ^
  56.                 ti[1] = v1;
  57.                 BF_encrypt((BF_LONG *)ti, schedule);

#143
crypto/bf/bf_cfb64.c:62: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  60.                 l2n(t, iv);
  61.                 t = ti[1];
  62.                 l2n(t, iv);
                      ^
  63.                 iv = (unsigned char *)ivec;
  64.             }

#144
crypto/bf/bf_cfb64.c:72: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  70.         }
  71.     }
  72.     v0 = v1 = ti[0] = ti[1] = t = c = cc = 0;
          ^
  73.     *num = n;
  74. }

#145
crypto/cast/c_cfb64.c:35: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  33.                 n2l(iv, v0);
  34.                 ti[0] = v0;
  35.                 n2l(iv, v1);
                      ^
  36.                 ti[1] = v1;
  37.                 CAST_encrypt((CAST_LONG *)ti, schedule);

#146
crypto/cast/c_cfb64.c:42: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  40.                 l2n(t, iv);
  41.                 t = ti[1];
  42.                 l2n(t, iv);
                      ^
  43.                 iv = ivec;
  44.             }

#147
crypto/cast/c_cfb64.c:55: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  53.                 n2l(iv, v0);
  54.                 ti[0] = v0;
  55.                 n2l(iv, v1);
                      ^
  56.                 ti[1] = v1;
  57.                 CAST_encrypt((CAST_LONG *)ti, schedule);

#148
crypto/cast/c_cfb64.c:62: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  60.                 l2n(t, iv);
  61.                 t = ti[1];
  62.                 l2n(t, iv);
                      ^
  63.                 iv = ivec;
  64.             }

#149
crypto/cast/c_cfb64.c:72: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  70.         }
  71.     }
  72.     v0 = v1 = ti[0] = ti[1] = t = c = cc = 0;
          ^
  73.     *num = n;
  74. }

#150
crypto/idea/i_cfb64.c:35: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  33.                 n2l(iv, v0);
  34.                 ti[0] = v0;
  35.                 n2l(iv, v1);
                      ^
  36.                 ti[1] = v1;
  37.                 IDEA_encrypt((unsigned long *)ti, schedule);

#151
crypto/idea/i_cfb64.c:42: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  40.                 l2n(t, iv);
  41.                 t = ti[1];
  42.                 l2n(t, iv);
                      ^
  43.                 iv = (unsigned char *)ivec;
  44.             }

#152
crypto/idea/i_cfb64.c:55: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  53.                 n2l(iv, v0);
  54.                 ti[0] = v0;
  55.                 n2l(iv, v1);
                      ^
  56.                 ti[1] = v1;
  57.                 IDEA_encrypt((unsigned long *)ti, schedule);

#153
crypto/idea/i_cfb64.c:62: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  60.                 l2n(t, iv);
  61.                 t = ti[1];
  62.                 l2n(t, iv);
                      ^
  63.                 iv = (unsigned char *)ivec;
  64.             }

#154
crypto/idea/i_cfb64.c:72: error: Dead Store
  The value written to &v0 (type unsigned long) is never used.
  70.         }
  71.     }
  72.     v0 = v1 = ti[0] = ti[1] = t = c = cc = 0;
          ^
  73.     *num = n;
  74. }

#155
crypto/idea/i_ecb.c:26: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  24.     n2l(in, l0);
  25.     d[0] = l0;
  26.     n2l(in, l1);
          ^
  27.     d[1] = l1;
  28.     IDEA_encrypt(d, ks);

#156
crypto/idea/i_ecb.c:33: error: Dead Store
  The value written to &l0 (type unsigned long) is never used.
  31.     l1 = d[1];
  32.     l2n(l1, out);
  33.     l0 = l1 = d[0] = d[1] = 0;
          ^
  34. }

#157
crypto/idea/i_ecb.c:32: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  30.     l2n(l0, out);
  31.     l1 = d[1];
  32.     l2n(l1, out);
          ^
  33.     l0 = l1 = d[0] = d[1] = 0;
  34. }

#158
crypto/pkcs12/p12_decr.c:47: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  45.     }
  46. 
  47.     if (!EVP_CipherUpdate(ctx, out, &i, in, inlen)) {
               ^
  48.         OPENSSL_free(out);
  49.         out = NULL;

#159
crypto/rc2/rc2cfb64.c:35: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  33.                 c2l(iv, v0);
  34.                 ti[0] = v0;
  35.                 c2l(iv, v1);
                      ^
  36.                 ti[1] = v1;
  37.                 RC2_encrypt((unsigned long *)ti, schedule);

#160
crypto/rc2/rc2cfb64.c:42: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  40.                 l2c(t, iv);
  41.                 t = ti[1];
  42.                 l2c(t, iv);
                      ^
  43.                 iv = (unsigned char *)ivec;
  44.             }

#161
crypto/rc2/rc2cfb64.c:55: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  53.                 c2l(iv, v0);
  54.                 ti[0] = v0;
  55.                 c2l(iv, v1);
                      ^
  56.                 ti[1] = v1;
  57.                 RC2_encrypt((unsigned long *)ti, schedule);

#162
crypto/rc2/rc2cfb64.c:62: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  60.                 l2c(t, iv);
  61.                 t = ti[1];
  62.                 l2c(t, iv);
                      ^
  63.                 iv = (unsigned char *)ivec;
  64.             }

#163
crypto/rc2/rc2cfb64.c:72: error: Dead Store
  The value written to &v0 (type unsigned long) is never used.
  70.         }
  71.     }
  72.     v0 = v1 = ti[0] = ti[1] = t = c = cc = 0;
          ^
  73.     *num = n;
  74. }

#164
crypto/rsa/rsa_x931g.c:76: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  74. 
  75.     if (rsa->p == NULL || rsa->q == NULL) {
  76.         BN_CTX_end(ctx);
              ^
  77.         BN_CTX_free(ctx);
  78.         return 2;

#165
crypto/rsa/rsa_x931g.c:61: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_X931_derive_prime_ex`.
  59.             goto err;
  60. 
  61.         if (!BN_X931_derive_prime_ex(rsa->p, p1, p2,
                   ^
  62.                                      Xp, Xp1, Xp2, e, ctx, cb))
  63.             goto err;

#166
test/fatalerrtest.c:78: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  76.  err:
  77.     SSL_free(sssl);
  78.     SSL_free(cssl);
          ^
  79.     SSL_CTX_free(sctx);
  80.     SSL_CTX_free(cctx);

#167
test/fatalerrtest.c:78: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  76.  err:
  77.     SSL_free(sssl);
  78.     SSL_free(cssl);
          ^
  79.     SSL_CTX_free(sctx);
  80.     SSL_CTX_free(cctx);

#168
test/fatalerrtest.c:77: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  75.     ret = 1;
  76.  err:
  77.     SSL_free(sssl);
          ^
  78.     SSL_free(cssl);
  79.     SSL_CTX_free(sctx);

#169
test/fatalerrtest.c:77: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  75.     ret = 1;
  76.  err:
  77.     SSL_free(sssl);
          ^
  78.     SSL_free(cssl);
  79.     SSL_CTX_free(sctx);

#170
crypto/asn1/asn1_par.c:78: error: Dead Store
  The value written to &bp (type bio_st*) is never used.
  76. 
  77.         BIO_free(bp);
  78.         bp = next;
              ^
  79.     }
  80.     return i;

#171
crypto/pkcs7/pk7_doit.c:24: error: Dead Store
  The value written to &isOther (type int) is never used.
  22. static int PKCS7_type_is_other(PKCS7 *p7)
  23. {
  24.     int isOther = 1;
          ^
  25. 
  26.     int nid = OBJ_obj2nid(p7->type);

#172
crypto/rc2/rc2_ecb.c:29: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  27.     c2l(in, l);
  28.     d[0] = l;
  29.     c2l(in, l);
          ^
  30.     d[1] = l;
  31.     if (encrypt)

#173
crypto/rc2/rc2_ecb.c:39: error: Dead Store
  The value written to &l (type unsigned long) is never used.
  37.     l = d[1];
  38.     l2c(l, out);
  39.     l = d[0] = d[1] = 0;
          ^
  40. }

#174
crypto/rc2/rc2_ecb.c:38: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  36.     l2c(l, out);
  37.     l = d[1];
  38.     l2c(l, out);
          ^
  39.     l = d[0] = d[1] = 0;
  40. }

#175
crypto/sha/sha1dgst.c:67: error: Integer Overflow L2
  (20 - [-oo, 63]):unsigned64 by call to `SHA1_Update`.
  65.         return 0;
  66. 
  67.     if (!SHA1_Update(sha1, sha1tmp, sizeof(sha1tmp)))
               ^
  68.         return 0;
  69. 

#176
crypto/sha/sha1dgst.c:47: error: Integer Overflow L2
  (40 - [-oo, 63]):unsigned64 by call to `SHA1_Update`.
  45.     memset(padtmp, 0x36, sizeof(padtmp));
  46. 
  47.     if (!SHA1_Update(sha1, padtmp, sizeof(padtmp)))
               ^
  48.         return 0;
  49. 

#177
crypto/sm2/sm2_sign.c:109: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `BN_bn2binpad`.
  107.     if (BN_bn2binpad(a, buf, p_bytes) < 0
  108.             || !EVP_DigestUpdate(hash, buf, p_bytes)
  109.             || BN_bn2binpad(b, buf, p_bytes) < 0
                      ^
  110.             || !EVP_DigestUpdate(hash, buf, p_bytes)
  111.             || !EC_POINT_get_affine_coordinates(group,

#178
test/x509aux.c:32: error: Buffer Overrun L2
  Offset: [max(0, `num`), 399] Size: 100 by call to `test_get_argument`.
  30.     typedef int (*i2d_X509_t)(const X509 *, unsigned char **);
  31.     int err = 0;
  32.     BIO *fp = BIO_new_file(test_get_argument(num), "r");
                                 ^
  33.     X509 *reuse = NULL;
  34. 

#179
crypto/cmp/cmp_util.c:30: error: Null Dereference
  pointer `bio` last assigned on line 26 could be null and is dereferenced by call to `BIO_free()` at line 30, column 5.
  28.     if (bio != NULL && OSSL_trace_set_channel(OSSL_TRACE_CATEGORY_CMP, bio))
  29.         return 1;
  30.     BIO_free(bio);
          ^
  31. #endif
  32.     CMPerr(0, CMP_R_NO_STDIO);

#180
crypto/des/cfb_enc.c:50: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  48.     iv = &(*ivec)[0];
  49.     c2l(iv, v0);
  50.     c2l(iv, v1);
          ^
  51.     if (enc) {
  52.         while (l >= (unsigned long)n) {

#181
crypto/des/cfb_enc.c:148: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  146.     iv = &(*ivec)[0];
  147.     l2c(v0, iv);
  148.     l2c(v1, iv);
           ^
  149.     v0 = v1 = d0 = d1 = ti[0] = ti[1] = 0;
  150. }

#182
crypto/des/cfb_enc.c:149: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  147.     l2c(v0, iv);
  148.     l2c(v1, iv);
  149.     v0 = v1 = d0 = d1 = ti[0] = ti[1] = 0;
           ^
  150. }

#183
crypto/evp/p5_crpt.c:92: error: Integer Overflow L2
  ([1, 9223372036854775806] + 1):signed32.
  90.     if (mdsize < 0)
  91.         return 0;
  92.     for (i = 1; i < iter; i++) {
                                ^
  93.         if (!EVP_DigestInit_ex(ctx, md, NULL))
  94.             goto err;

#184
crypto/rsa/rsa_sp800_56b_check.c:67: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  65.     BN_clear(p1);
  66.     BN_clear(q1);
  67.     BN_CTX_end(ctx);
          ^
  68.     return ret;
  69. }

#185
crypto/rsa/rsa_sp800_56b_check.c:60: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  58.           && BN_is_one(r)
  59.           /* (e) 1 = (dQ . e) mod (q - 1) */
  60.           && BN_mod_mul(r, rsa->dmq1, rsa->e, q1, ctx)
                   ^
  61.           && BN_is_one(r)
  62.           /* (f) 1 = (qInv . q) mod p */

#186
crypto/rsa/rsa_sp800_56b_check.c:63: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  61.           && BN_is_one(r)
  62.           /* (f) 1 = (qInv . q) mod p */
  63.           && BN_mod_mul(r, rsa->iqmp, rsa->q, rsa->p, ctx)
                   ^
  64.           && BN_is_one(r);
  65.     BN_clear(p1);

#187
crypto/rsa/rsa_sp800_56b_check.c:67: error: Integer Overflow L2
  ([0, 10+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  65.     BN_clear(p1);
  66.     BN_clear(q1);
  67.     BN_CTX_end(ctx);
          ^
  68.     return ret;
  69. }

#188
crypto/rsa/rsa_sp800_56b_check.c:60: error: Integer Overflow L2
  ([0, 6+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_mul`.
  58.           && BN_is_one(r)
  59.           /* (e) 1 = (dQ . e) mod (q - 1) */
  60.           && BN_mod_mul(r, rsa->dmq1, rsa->e, q1, ctx)
                   ^
  61.           && BN_is_one(r)
  62.           /* (f) 1 = (qInv . q) mod p */

#189
crypto/rsa/rsa_sp800_56b_check.c:63: error: Integer Overflow L2
  ([0, 9+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_mul`.
  61.           && BN_is_one(r)
  62.           /* (f) 1 = (qInv . q) mod p */
  63.           && BN_mod_mul(r, rsa->iqmp, rsa->q, rsa->p, ctx)
                   ^
  64.           && BN_is_one(r);
  65.     BN_clear(p1);

#190
crypto/bf/bf_ecb.c:32: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  30.     n2l(in, l);
  31.     d[0] = l;
  32.     n2l(in, l);
          ^
  33.     d[1] = l;
  34.     if (encrypt)

#191
crypto/bf/bf_ecb.c:42: error: Dead Store
  The value written to &l (type unsigned int) is never used.
  40.     l = d[1];
  41.     l2n(l, out);
  42.     l = d[0] = d[1] = 0;
          ^
  43. }

#192
crypto/bf/bf_ecb.c:41: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  39.     l2n(l, out);
  40.     l = d[1];
  41.     l2n(l, out);
          ^
  42.     l = d[0] = d[1] = 0;
  43. }

#193
crypto/dsa/dsa_key.c:41: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range`.
  39. 
  40.     do
  41.         if (!BN_priv_rand_range(priv_key, dsa->q))
                   ^
  42.             goto err;
  43.     while (BN_is_zero(priv_key)) ;

#194
crypto/engine/tb_asnmth.c:27: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_unregister`.
  25. void ENGINE_unregister_pkey_asn1_meths(ENGINE *e)
  26. {
  27.     engine_table_unregister(&pkey_asn1_meth_table, e);
          ^
  28. }
  29. 

#195
crypto/rsa/rsa_chk.c:155: error: Integer Overflow L2
  (0 - [0, max(1, `key->e->top`)]):unsigned64 by call to `BN_mod_mul`.
  153.         goto err;
  154.     }
  155.     if (!BN_mod_mul(i, key->d, key->e, k, ctx)) {
                ^
  156.         ret = -1;
  157.         goto err;

#196
crypto/rsa/rsa_chk.c:155: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  153.         goto err;
  154.     }
  155.     if (!BN_mod_mul(i, key->d, key->e, k, ctx)) {
                ^
  156.         ret = -1;
  157.         goto err;

#197
crypto/rsa/rsa_chk.c:97: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  95. 
  96.     /* n = p*q * r_3...r_i? */
  97.     if (!BN_mul(i, key->p, key->q, ctx)) {
               ^
  98.         ret = -1;
  99.         goto err;

#198
crypto/rsa/rsa_chk.c:128: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  126. 
  127.     /* now compute k = \lambda(n) = LCM(i, j, r_3 - 1...) */
  128.     if (!BN_mul(l, i, j, ctx)) {
                ^
  129.         ret = -1;
  130.         goto err;

#199
crypto/rsa/rsa_chk.c:118: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  116. 
  117.     /* d*e = 1  mod \lambda(n)? */
  118.     if (!BN_sub(i, key->p, BN_value_one())) {
                ^
  119.         ret = -1;
  120.         goto err;

#200
crypto/rsa/rsa_chk.c:167: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  165.     if (key->dmp1 != NULL && key->dmq1 != NULL && key->iqmp != NULL) {
  166.         /* dmp1 = d mod (p-1)? */
  167.         if (!BN_sub(i, key->p, BN_value_one())) {
                    ^
  168.             ret = -1;
  169.             goto err;

#201
ssl/record/ssl3_record_tls13.c:180: error: Buffer Overrun L1
  Offset: [-oo, -1] Size: 32 by call to `EVP_CipherFinal_ex`.
  178.             || EVP_CipherUpdate(ctx, rec->data, &lenu, rec->input,
  179.                                 (unsigned int)rec->length) <= 0
  180.             || EVP_CipherFinal_ex(ctx, rec->data + lenu, &lenf) <= 0
                      ^
  181.             || (size_t)(lenu + lenf) != rec->length) {
  182.         return -1;

#202
crypto/asn1/a_verify.c:72: error: Dead Store
  The value written to &ret (type int) is never used.
  70.         goto err;
  71.     }
  72.     ret = -1;
          ^
  73. 
  74.     if (EVP_VerifyFinal(ctx, (unsigned char *)signature->data,

#203
crypto/cast/c_skey.c:115: error: Uninitialized Value
  The value read from k[_] was never initialized.
  113. 
  114.     for (i = 0; i < 16; i++) {
  115.         key->data[i * 2] = k[i];
               ^
  116.         key->data[i * 2 + 1] = ((k[i + 16]) + 16) & 0x1f;
  117.     }

#204
crypto/cast/c_skey.c:116: error: Uninitialized Value
  The value read from k[_] was never initialized.
  114.     for (i = 0; i < 16; i++) {
  115.         key->data[i * 2] = k[i];
  116.         key->data[i * 2 + 1] = ((k[i + 16]) + 16) & 0x1f;
               ^
  117.     }
  118. }

#205
crypto/cast/c_skey.c:47: error: Uninitialized Value
  The value read from x[_] was never initialized.
  45. 
  46.     K = &k[0];
  47.     X[0] = ((x[0] << 24) | (x[1] << 16) | (x[2] << 8) | x[3]) & 0xffffffffL;
          ^
  48.     X[1] = ((x[4] << 24) | (x[5] << 16) | (x[6] << 8) | x[7]) & 0xffffffffL;
  49.     X[2] = ((x[8] << 24) | (x[9] << 16) | (x[10] << 8) | x[11]) & 0xffffffffL;

#206
crypto/cast/c_skey.c:48: error: Uninitialized Value
  The value read from x[_] was never initialized.
  46.     K = &k[0];
  47.     X[0] = ((x[0] << 24) | (x[1] << 16) | (x[2] << 8) | x[3]) & 0xffffffffL;
  48.     X[1] = ((x[4] << 24) | (x[5] << 16) | (x[6] << 8) | x[7]) & 0xffffffffL;
          ^
  49.     X[2] = ((x[8] << 24) | (x[9] << 16) | (x[10] << 8) | x[11]) & 0xffffffffL;
  50.     X[3] =

#207
crypto/cast/c_skey.c:49: error: Uninitialized Value
  The value read from x[_] was never initialized.
  47.     X[0] = ((x[0] << 24) | (x[1] << 16) | (x[2] << 8) | x[3]) & 0xffffffffL;
  48.     X[1] = ((x[4] << 24) | (x[5] << 16) | (x[6] << 8) | x[7]) & 0xffffffffL;
  49.     X[2] = ((x[8] << 24) | (x[9] << 16) | (x[10] << 8) | x[11]) & 0xffffffffL;
          ^
  50.     X[3] =
  51.         ((x[12] << 24) | (x[13] << 16) | (x[14] << 8) | x[15]) & 0xffffffffL;

#208
crypto/cast/c_skey.c:50: error: Uninitialized Value
  The value read from x[_] was never initialized.
  48.     X[1] = ((x[4] << 24) | (x[5] << 16) | (x[6] << 8) | x[7]) & 0xffffffffL;
  49.     X[2] = ((x[8] << 24) | (x[9] << 16) | (x[10] << 8) | x[11]) & 0xffffffffL;
  50.     X[3] =
          ^
  51.         ((x[12] << 24) | (x[13] << 16) | (x[14] << 8) | x[15]) & 0xffffffffL;
  52. 

#209
crypto/dsa/dsa_gen.c:38: error: Buffer Overrun L3
  Offset added: [-1, +oo] Size: 32 by call to `dsa_builtin_paramgen`.
  36.         size_t qbits = EVP_MD_size(evpmd) * 8;
  37. 
  38.         return dsa_builtin_paramgen(ret, bits, qbits, evpmd,
                     ^
  39.                                     seed_in, seed_len, NULL, counter_ret,
  40.                                     h_ret, cb);

#210
crypto/dsa/dsa_gen.c:38: error: Buffer Overrun L3
  Offset: [-2, 31] Size: 32 by call to `dsa_builtin_paramgen`.
  36.         size_t qbits = EVP_MD_size(evpmd) * 8;
  37. 
  38.         return dsa_builtin_paramgen(ret, bits, qbits, evpmd,
                     ^
  39.                                     seed_in, seed_len, NULL, counter_ret,
  40.                                     h_ret, cb);

#211
crypto/asn1/a_utf8.c:38: error: Dead Store
  The value written to &p (type unsigned char const *) is never used.
  36.     /* Check syntax and work out the encoded value (if correct) */
  37.     if ((*p & 0x80) == 0) {
  38.         value = *p++ & 0x7f;
                       ^
  39.         ret = 1;
  40.     } else if ((*p & 0xe0) == 0xc0) {

#212
crypto/asn1/a_utf8.c:46: error: Dead Store
  The value written to &p (type unsigned char const *) is never used.
  44.             return -3;
  45.         value = (*p++ & 0x1f) << 6;
  46.         value |= *p++ & 0x3f;
                        ^
  47.         if (value < 0x80)
  48.             return -4;

#213
crypto/asn1/a_utf8.c:58: error: Dead Store
  The value written to &p (type unsigned char const *) is never used.
  56.         value = (*p++ & 0xf) << 12;
  57.         value |= (*p++ & 0x3f) << 6;
  58.         value |= *p++ & 0x3f;
                        ^
  59.         if (value < 0x800)
  60.             return -4;

#214
crypto/asn1/a_utf8.c:72: error: Dead Store
  The value written to &p (type unsigned char const *) is never used.
  70.         value |= (*p++ & 0x3f) << 12;
  71.         value |= (*p++ & 0x3f) << 6;
  72.         value |= *p++ & 0x3f;
                        ^
  73.         if (value < 0x10000)
  74.             return -4;

#215
crypto/asn1/a_utf8.c:88: error: Dead Store
  The value written to &p (type unsigned char const *) is never used.
  86.         value |= ((unsigned long)(*p++ & 0x3f)) << 12;
  87.         value |= (*p++ & 0x3f) << 6;
  88.         value |= *p++ & 0x3f;
                        ^
  89.         if (value < 0x200000)
  90.             return -4;

#216
crypto/asn1/a_utf8.c:106: error: Dead Store
  The value written to &p (type unsigned char const *) is never used.
  104.         value |= ((unsigned long)(*p++ & 0x3f)) << 12;
  105.         value |= (*p++ & 0x3f) << 6;
  106.         value |= *p++ & 0x3f;
                         ^
  107.         if (value < 0x4000000)
  108.             return -4;

#217
crypto/bn/bn_mul.c:46: error: Integer Overflow L2
  ([-`b`, -`b`] - [0, 1]):unsigned64.
  44.         for (;;) {
  45.             t = b[0];
  46.             r[0] = (0 - t - c) & BN_MASK2;
                  ^
  47.             if (t != 0)
  48.                 c = 1;

#218
crypto/bn/bn_mul.c:53: error: Integer Overflow L2
  ([-`b`, -`b`] - [0, 1]):unsigned64.
  51. 
  52.             t = b[1];
  53.             r[1] = (0 - t - c) & BN_MASK2;
                  ^
  54.             if (t != 0)
  55.                 c = 1;

#219
crypto/bn/bn_mul.c:60: error: Integer Overflow L2
  ([-`b`, -`b`] - [0, 1]):unsigned64.
  58. 
  59.             t = b[2];
  60.             r[2] = (0 - t - c) & BN_MASK2;
                  ^
  61.             if (t != 0)
  62.                 c = 1;

#220
crypto/bn/bn_mul.c:67: error: Integer Overflow L2
  ([-`b`, -`b`] - [0, 1]):unsigned64.
  65. 
  66.             t = b[3];
  67.             r[3] = (0 - t - c) & BN_MASK2;
                  ^
  68.             if (t != 0)
  69.                 c = 1;

#221
test/recordlentest.c:57: error: Integer Overflow L2
  ([1, `len`] - 5):unsigned64.
  55.             return 0;
  56. 
  57.         len -= outlen;
              ^
  58.     }
  59. 

#222
crypto/bio/b_dump.c:56: error: Buffer Overrun L3
  Offset: [-1, +oo] (<= [-1, 285] + [0, +oo]) Size: 289 by call to `BIO_snprintf`.
  54.                 } else {
  55.                     ch = *(s + i * dump_width + j) & 0xff;
  56.                     BIO_snprintf(buf + n, 4, "%02x%c", ch,
                          ^
  57.                                  j == 7 ? '-' : ' ');
  58.                 }

#223
crypto/bio/b_dump.c:51: error: Integer Overflow L2
  (289 - [-1, 2147483647]):unsigned64.
  49.                          i * dump_width);
  50.         for (j = 0; j < dump_width; j++) {
  51.             if (SPACE(buf, n, 3)) {
                      ^
  52.                 if (((i * dump_width) + j) >= len) {
  53.                     strcpy(buf + n, "   ");

#224
crypto/bio/b_dump.c:69: error: Integer Overflow L2
  (289 - [1, 2147483647]):unsigned64.
  67.             if (((i * dump_width) + j) >= len)
  68.                 break;
  69.             if (SPACE(buf, n, 1)) {
                      ^
  70.                 ch = *(s + i * dump_width + j) & 0xff;
  71. #ifndef CHARSET_EBCDIC

#225
crypto/bn/bn_gcd.c:297: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  295.                         goto err;
  296.                 } else {
  297.                     if (!BN_mul(tmp, D, X, ctx))
                                ^
  298.                         goto err;
  299.                 }

#226
crypto/bn/bn_gcd.c:331: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_nnmod`.
  329.                 goto err;
  330.         } else {
  331.             if (!BN_nnmod(R, Y, n, ctx))
                        ^
  332.                 goto err;
  333.         }

#227
crypto/bn/bn_gcd.c:174: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_usub`.
  172.                  * actually makes the algorithm slower
  173.                  */
  174.                 if (!BN_usub(B, B, A))
                            ^
  175.                     goto err;
  176.             } else {

#228
ssl/tls13_enc.c:105: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  103.     *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_INFO,
  104.                                              hkdflabel, hkdflabellen);
  105.     *p++ = OSSL_PARAM_construct_end();
            ^
  106. 
  107.     ret = EVP_KDF_CTX_set_params(kctx, params) <= 0

#229
test/hmactest.c:51: error: Buffer Overrun L1
  Offset: 49 Size: 9.
  49.     {
  50.         "\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa",
  51.         16, {
                  ^
  52.             0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,
  53.             0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd,

#230
crypto/des/ecb_enc.c:40: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  38.     c2l(in, l);
  39.     ll[0] = l;
  40.     c2l(in, l);
          ^
  41.     ll[1] = l;
  42.     DES_encrypt1(ll, ks, enc);

#231
crypto/des/ecb_enc.c:47: error: Dead Store
  The value written to &l (type unsigned int) is never used.
  45.     l = ll[1];
  46.     l2c(l, out);
  47.     l = ll[0] = ll[1] = 0;
          ^
  48. }

#232
crypto/des/ecb_enc.c:46: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  44.     l2c(l, out);
  45.     l = ll[1];
  46.     l2c(l, out);
          ^
  47.     l = ll[0] = ll[1] = 0;
  48. }

#233
test/sparse_array_test.c:51: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_sa_char_set`.
  49. 
  50.     for (i = 0; i < OSSL_NELEM(cases); i++) {
  51.         if (!TEST_true(ossl_sa_char_set(sa, cases[i].n, cases[i].v))) {
                   ^
  52.             TEST_note("iteration %zu", i + 1);
  53.             goto err;

#234
test/ectest.c:54: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  52.         || !TEST_true(EC_POINT_is_at_infinity(group, Q))
  53.         || !TEST_true(EC_GROUP_precompute_mult(group, ctx))
  54.         || !TEST_true(EC_POINT_mul(group, Q, order, NULL, NULL, ctx))
                  ^
  55.         || !TEST_true(EC_POINT_is_at_infinity(group, Q))
  56.         || !TEST_true(EC_POINT_copy(P, G))

#235
test/ectest.c:58: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `EC_POINT_mul`.
  56.         || !TEST_true(EC_POINT_copy(P, G))
  57.         || !TEST_true(BN_one(n1))
  58.         || !TEST_true(EC_POINT_mul(group, Q, n1, NULL, NULL, ctx))
                  ^
  59.         || !TEST_int_eq(0, EC_POINT_cmp(group, Q, P, ctx))
  60.         || !TEST_true(BN_sub(n1, order, n1))

#236
test/ssl_ctx_test.c:68: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  66.   end:
  67.     SSL_free(ssl);
  68.     SSL_CTX_free(ctx);
          ^
  69.     return testresult;
  70. }

#237
test/ssl_ctx_test.c:68: error: Null Dereference
  pointer `ctx` last assigned on line 38 could be null and is dereferenced by call to `SSL_CTX_free()` at line 68, column 5.
  66.   end:
  67.     SSL_free(ssl);
  68.     SSL_CTX_free(ctx);
          ^
  69.     return testresult;
  70. }

#238
test/packettest.c:41: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `PACKET_forward`.
  39.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 1))
  40.             || !TEST_ptr_eq(PACKET_end(&pkt), smbuf + BUF_LEN)
  41.             || !TEST_true(PACKET_forward(&pkt, 1))
                      ^
  42.             || !TEST_ptr_eq(PACKET_end(&pkt), smbuf + BUF_LEN))
  43.         return 0;

#239
test/packettest.c:39: error: Integer Overflow L2
  ([0, +oo] - 254):unsigned64 by call to `PACKET_forward`.
  37.             || !TEST_size_t_eq(PACKET_remaining(&pkt), BUF_LEN)
  38.             || !TEST_ptr_eq(PACKET_end(&pkt), smbuf + BUF_LEN)
  39.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 1))
                      ^
  40.             || !TEST_ptr_eq(PACKET_end(&pkt), smbuf + BUF_LEN)
  41.             || !TEST_true(PACKET_forward(&pkt, 1))

#240
crypto/ec/ec2_oct.c:109: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  107. 
  108.  err:
  109.     BN_CTX_end(ctx);
           ^
  110. #ifndef FIPS_MODE
  111.     BN_CTX_free(new_ctx);

#241
crypto/x509/x509_cmp.c:42: error: Null Dereference
  pointer `null` is dereferenced by call to `X509_NAME_oneline()` at line 42, column 9.
  40.     if (ctx == NULL)
  41.         goto err;
  42.     f = X509_NAME_oneline(a->cert_info.issuer, NULL, 0);
              ^
  43.     if (!EVP_DigestInit_ex(ctx, EVP_md5(), NULL))
  44.         goto err;

#242
apps/errstr.c:49: error: Buffer Overrun L3
  Offset: [4, 6] Size: [5, 7] by call to `opt_help`.
  47.             goto end;
  48.         case OPT_HELP:
  49.             opt_help(errstr_options);
                  ^
  50.             ret = 0;
  51.             goto end;

#243
crypto/evp/keymgmt_lib.c:137: error: Buffer Overrun L2
  Offset: [0, 10] Size: 10.
  135.     if (provdata != NULL) {
  136.         EVP_KEYMGMT_up_ref(keymgmt);
  137.         pk->pkeys[i].keymgmt = keymgmt;
               ^
  138.         pk->pkeys[i].provdata = provdata;
  139.         pk->pkeys[i].domainparams = want_domainparams;

#244
crypto/evp/keymgmt_lib.c:133: error: Dead Store
  The value written to &j (type int) is never used.
  131.      * outside the array.
  132.      */
  133.     j = ossl_assert(i < OSSL_NELEM(pk->pkeys));
               ^
  134. 
  135.     if (provdata != NULL) {

#245
crypto/md5/md5_sha1.c:92: error: Integer Overflow L2
  (20 - [-oo, 63]):unsigned64 by call to `SHA1_Update`.
  90.         return 0;
  91. 
  92.     if (!SHA1_Update(&mctx->sha1, sha1tmp, sizeof(sha1tmp)))
               ^
  93.         return 0;
  94. 

#246
crypto/md5/md5_sha1.c:66: error: Integer Overflow L2
  (40 - [-oo, 63]):unsigned64 by call to `SHA1_Update`.
  64.         return 0;
  65. 
  66.     if (!SHA1_Update(&mctx->sha1, padtmp, 40))
               ^
  67.         return 0;
  68. 

#247
test/drbg_cavs_test.c:40: error: Null Dereference
  pointer `t` last assigned on line 38 could be null and is dereferenced at line 40, column 5.
  38.     TEST_CTX *t = (TEST_CTX *)RAND_DRBG_get_ex_data(drbg, app_data_index);
  39. 
  40.     t->entropycnt++;
          ^
  41.     *pout = (unsigned char *)t->entropy;
  42.     return t->entropylen;

#248
test/servername_test.c:55: error: Integer Overflow L2
  ([0, +oo] - 34):unsigned64 by call to `PACKET_forward`.
  53.             || !TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))
  54.                /* Skip client version and random */
  55.             || !TEST_true(PACKET_forward(&pkt, CLIENT_VERSION_LEN
                      ^
  56.                                                + SSL3_RANDOM_SIZE))
  57.                /* Skip session id */

#249
test/servername_test.c:53: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `PACKET_forward`.
  51.             || !PACKET_forward(&pkt, SSL3_RT_HEADER_LENGTH)
  52.                /* Skip the handshake message header */
  53.             || !TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))
                      ^
  54.                /* Skip client version and random */
  55.             || !TEST_true(PACKET_forward(&pkt, CLIENT_VERSION_LEN

#250
test/servername_test.c:51: error: Integer Overflow L2
  ([0, +oo] - 5):unsigned64 by call to `PACKET_forward`.
  49.     if (!TEST_true(PACKET_buf_init(&pkt, data, len))
  50.                /* Skip the record header */
  51.             || !PACKET_forward(&pkt, SSL3_RT_HEADER_LENGTH)
                      ^
  52.                /* Skip the handshake message header */
  53.             || !TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))

#251
apps/nseq.c:54: error: Buffer Overrun L3
  Offset: [2, 5] Size: [3, 6] by call to `opt_help`.
  52.         case OPT_HELP:
  53.             ret = 0;
  54.             opt_help(nseq_options);
                  ^
  55.             goto end;
  56.         case OPT_TOSEQ:

#252
apps/nseq.c:114: error: Null Dereference
  pointer `in` last assigned on line 37 could be null and is dereferenced by call to `BIO_free()` at line 114, column 5.
  112.     ret = 0;
  113.  end:
  114.     BIO_free(in);
           ^
  115.     BIO_free_all(out);
  116.     NETSCAPE_CERT_SEQUENCE_free(seq);

#253
apps/nseq.c:71: error: Null Dereference
  pointer `infile` last assigned on line 42 could be null and is dereferenced by call to `bio_open_default()` at line 71, column 10.
  69.         goto opthelp;
  70. 
  71.     in = bio_open_default(infile, 'r', FORMAT_PEM);
               ^
  72.     if (in == NULL)
  73.         goto end;

#254
test/gosttest.c:74: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  72.  end:
  73.     SSL_free(serverssl);
  74.     SSL_free(clientssl);
          ^
  75.     SSL_CTX_free(sctx);
  76.     SSL_CTX_free(cctx);

#255
test/gosttest.c:74: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  72.  end:
  73.     SSL_free(serverssl);
  74.     SSL_free(clientssl);
          ^
  75.     SSL_CTX_free(sctx);
  76.     SSL_CTX_free(cctx);

#256
test/gosttest.c:73: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  71. 
  72.  end:
  73.     SSL_free(serverssl);
          ^
  74.     SSL_free(clientssl);
  75.     SSL_CTX_free(sctx);

#257
test/gosttest.c:73: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  71. 
  72.  end:
  73.     SSL_free(serverssl);
          ^
  74.     SSL_free(clientssl);
  75.     SSL_CTX_free(sctx);

#258
ssl/d1_msg.c:48: error: Dead Store
  The value written to &ptr (type unsigned char*) is never used.
  46.     memset(buf, 0, sizeof(buf));
  47.     *ptr++ = s->s3.send_alert[0];
  48.     *ptr++ = s->s3.send_alert[1];
           ^
  49. 
  50.     i = do_dtls1_write(s, SSL3_RT_ALERT, &buf[0], sizeof(buf), 0, &written);

#259
ssl/statem/extensions_clnt.c:50: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 7]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  48.             || !WPACKET_start_sub_packet_u16(pkt)
  49.             || !WPACKET_put_bytes_u8(pkt, TLSEXT_NAMETYPE_host_name)
  50.             || !WPACKET_sub_memcpy_u16(pkt, s->ext.hostname,
                      ^
  51.                                        strlen(s->ext.hostname))
  52.             || !WPACKET_close(pkt)

#260
ssl/statem/extensions_clnt.c:50: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 9]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  48.             || !WPACKET_start_sub_packet_u16(pkt)
  49.             || !WPACKET_put_bytes_u8(pkt, TLSEXT_NAMETYPE_host_name)
  50.             || !WPACKET_sub_memcpy_u16(pkt, s->ext.hostname,
                      ^
  51.                                        strlen(s->ext.hostname))
  52.             || !WPACKET_close(pkt)

#261
crypto/bn/bn_mont.c:83: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  81.     ret = 1;
  82.  err:
  83.     BN_CTX_end(ctx);
          ^
  84.     return ret;
  85. }

#262
crypto/bn/bn_mont.c:83: error: Integer Overflow L2
  ([0, 2+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  81.     ret = 1;
  82.  err:
  83.     BN_CTX_end(ctx);
          ^
  84.     return ret;
  85. }

#263
fuzz/test-corpus.c:55: error: Buffer Overrun L3
  Offset: [1, +oo] Size: [0, +oo] by call to `FuzzerTestOneInput`.
  53.         s = fread(buf, 1, st.st_size, f);
  54.         OPENSSL_assert(s == (size_t)st.st_size);
  55.         FuzzerTestOneInput(buf, s);
              ^
  56.         free(buf);
  57.     }

#264
apps/info.c:52: error: Buffer Overrun L3
  Offset: [4, 11] Size: [5, 12] by call to `opt_help`.
  50.             goto end;
  51.         case OPT_HELP:
  52.             opt_help(info_options);
                  ^
  53.             ret = 0;
  54.             goto end;

#265
crypto/cms/cms_pwri.c:61: error: Dead Store
  The value written to &pbe_nid (type int) is never used.
  59. 
  60.     if (pbe_nid <= 0)
  61.         pbe_nid = NID_id_pbkdf2;
              ^
  62. 
  63.     /* Get from enveloped data */

#266
crypto/ec/ecdh_ossl.c:116: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `BN_CTX_end`.
  114.  err:
  115.     EC_POINT_clear_free(tmp);
  116.     BN_CTX_end(ctx);
           ^
  117.     BN_CTX_free(ctx);
  118.     OPENSSL_free(buf);

#267
crypto/ec/ecdh_ossl.c:69: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  67.     if (EC_KEY_get_flags(ecdh) & EC_FLAG_COFACTOR_ECDH) {
  68.         if (!EC_GROUP_get_cofactor(group, x, NULL) ||
  69.             !BN_mul(x, x, priv_key, ctx)) {
                   ^
  70.             ECerr(EC_F_ECDH_SIMPLE_COMPUTE_KEY, ERR_R_MALLOC_FAILURE);
  71.             goto err;

#268
crypto/ec/ecdh_ossl.c:81: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  79.     }
  80. 
  81.     if (!EC_POINT_mul(group, tmp, NULL, pub_key, priv_key, ctx)) {
               ^
  82.         ECerr(EC_F_ECDH_SIMPLE_COMPUTE_KEY, EC_R_POINT_ARITHMETIC_FAILURE);
  83.         goto err;

#269
crypto/asn1_dsa.c:46: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `WPACKET_put_bytes__`.
  44.     if (cont_len > 0xff) {
  45.         if (!WPACKET_put_bytes_u8(pkt, 0x82)
  46.                 || !WPACKET_put_bytes_u16(pkt, cont_len))
                          ^
  47.             return 0;
  48.     } else {

#270
test/bio_callback_test.c:165: error: Null Dereference
  pointer `bio` last assigned on line 52 could be null and is dereferenced by call to `BIO_free()` at line 165, column 5.
  163. 
  164. err:
  165.     BIO_free(bio);
           ^
  166. 
  167. finish:

#271
apps/prime.c:56: error: Buffer Overrun L3
  Offset: [3, 8] Size: [4, 9] by call to `opt_help`.
  54.             goto end;
  55.         case OPT_HELP:
  56.             opt_help(prime_options);
                  ^
  57.             ret = 0;
  58.             goto end;

#272
crypto/bio/b_sock2.c:42: error: Dead Store
  The value written to &sock (type int) is never used.
  40. int BIO_socket(int domain, int socktype, int protocol, int options)
  41. {
  42.     int sock = -1;
          ^
  43. 
  44.     if (BIO_sock_init() != 1)

#273
crypto/dh/dh_check.c:70: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  68.     ok = 1;
  69.  err:
  70.     BN_CTX_end(ctx);
          ^
  71.     BN_CTX_free(ctx);
  72.     return ok;

#274
providers/implementations/ciphers/cipher_chacha20_hw.c:87: error: Integer Overflow L2
  ([2, 268435456] - [1, 268435455]):unsigned64.
  85.         ctr32 += (unsigned int)blocks;
  86.         if (ctr32 < blocks) {
  87.             blocks -= ctr32;
                  ^
  88.             ctr32 = 0;
  89.         }

#275
providers/implementations/ciphers/cipher_chacha20_hw.c:92: error: Integer Overflow L2
  ([64, +oo] - [-17179868992, 17179869184]):unsigned64.
  90.         blocks *= CHACHA_BLK_SIZE;
  91.         ChaCha20_ctr32(out, in, blocks, ctx->key.d, ctx->counter);
  92.         inl -= blocks;
              ^
  93.         in += blocks;
  94.         out += blocks;

#276
test/mdc2test.c:53: error: Dead Store
  The value written to &i (type unsigned long) is never used.
  51.     params[i++] = OSSL_PARAM_construct_uint(OSSL_DIGEST_PARAM_PAD_TYPE,
  52.                                             &pad_type),
  53.     params[i++] = OSSL_PARAM_construct_end();
                 ^
  54. 
  55.     prov = OSSL_PROVIDER_load(NULL, "legacy");

#277
crypto/bn/bn_exp.c:72: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_sqr`.
  70. 
  71.     for (i = 1; i < bits; i++) {
  72.         if (!BN_sqr(v, v, ctx))
                   ^
  73.             goto err;
  74.         if (BN_is_bit_set(p, i)) {

#278
test/rc2test.c:47: error: Buffer Overrun L2
  Offset: [0, 127] Size: 16 by call to `RC2_set_key`.
  45.     unsigned char buf[8], buf2[8];
  46. 
  47.     RC2_set_key(&key, 16, &(RC2key[n][0]), 0 /* or 1024 */ );
          ^
  48. 
  49.     RC2_ecb_encrypt(&RC2plain[n][0], buf, &key, RC2_ENCRYPT);

#279
test/rc2test.c:53: error: Integer Overflow L2
  ([0, 65535] - [0, 127]):unsigned32 by call to `RC2_ecb_encrypt`.
  51.         testresult = 0;
  52. 
  53.     RC2_ecb_encrypt(buf, buf2, &key, RC2_DECRYPT);
          ^
  54.     if (!TEST_mem_eq(&RC2plain[n][0], 8, buf2, 8))
  55.         testresult = 0;

#280
apps/pkeyparam.c:60: error: Buffer Overrun L3
  Offset: [2, 6] Size: [3, 7] by call to `opt_help`.
  58.             goto end;
  59.         case OPT_HELP:
  60.             opt_help(pkeyparam_options);
                  ^
  61.             ret = 0;
  62.             goto end;

#281
apps/pkeyparam.c:144: error: Null Dereference
  pointer `in` last assigned on line 45 could be null and is dereferenced by call to `BIO_free()` at line 144, column 5.
  142.     release_engine(e);
  143.     BIO_free_all(out);
  144.     BIO_free(in);
           ^
  145. 
  146.     return ret;

#282
apps/pkeyparam.c:87: error: Null Dereference
  pointer `infile` last assigned on line 49 could be null and is dereferenced by call to `bio_open_default()` at line 87, column 10.
  85.         goto opthelp;
  86. 
  87.     in = bio_open_default(infile, 'r', FORMAT_PEM);
               ^
  88.     if (in == NULL)
  89.         goto end;

#283
crypto/aes/aes_ige.c:47: error: Dead Store
  The value written to &len (type unsigned long) is never used.
  45. {
  46.     size_t n;
  47.     size_t len = length;
          ^
  48. 
  49.     if (length == 0)

#284
crypto/cmp/cmp_status.c:64: error: Integer Overflow L2
  ([-2, 3996] - 1):unsigned64 by call to `ossl_cmp_add_error_txt`.
  62.             BIO_snprintf(buf, sizeof(buf), "PKIStatus: invalid=%d", status);
  63.             CMPerr(0, CMP_R_ERROR_PARSING_PKISTATUS);
  64.             ossl_cmp_add_error_data(buf);
                  ^
  65.             return NULL;
  66.         }

#285
crypto/cmp/cmp_status.c:64: error: Integer Overflow L2
  ([1, 3996] - [0, 3]):unsigned64 by call to `ossl_cmp_add_error_txt`.
  62.             BIO_snprintf(buf, sizeof(buf), "PKIStatus: invalid=%d", status);
  63.             CMPerr(0, CMP_R_ERROR_PARSING_PKISTATUS);
  64.             ossl_cmp_add_error_data(buf);
                  ^
  65.             return NULL;
  66.         }

#286
test/ecstresstest.c:53: error: Integer Overflow L2
  ([0, 5] - 1):unsigned32 by call to `EC_POINT_mul`.
  51. 
  52.     for (i = 0; i < num; i++) {
  53.         if (!TEST_true(EC_POINT_mul(group, point, NULL, point, scalar, NULL))
                   ^
  54.                 || !TEST_true(EC_POINT_get_affine_coordinates(group, point,
  55.                                                               scalar,

#287
test/namemap_internal_test.c:47: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ossl_namemap_free`.
  45.     int ok = nm != NULL && test_namemap(nm);
  46. 
  47.     ossl_namemap_free(nm);
          ^
  48.     return ok;
  49. }

#288
apps/kdf.c:65: error: Buffer Overrun L3
  Offset: [3, 8] Size: [4, 9] by call to `opt_help`.
  63.             goto err;
  64.         case OPT_HELP:
  65.             opt_help(kdf_options);
                  ^
  66.             ret = 0;
  67.             goto err;

#289
crypto/dsa/dsa_gen.c:295: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  293.             memcpy(seed_out, seed, qsize);
  294.     }
  295.     BN_CTX_end(ctx);
           ^
  296.     BN_CTX_free(ctx);
  297.     BN_MONT_CTX_free(mont);

#290
crypto/dsa/dsa_gen.c:203: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  201.                 if (!BN_lshift(r0, r0, (qsize << 3) * k))
  202.                     goto err;
  203.                 if (!BN_add(W, W, r0))
                            ^
  204.                     goto err;
  205.             }

#291
crypto/dsa/dsa_gen.c:190: error: Uninitialized Value
  The value read from buf[_] was never initialized.
  188.                  */
  189.                 for (i = qsize - 1; i >= 0; i--) {
  190.                     buf[i]++;
                           ^
  191.                     if (buf[i] != 0)
  192.                         break;

#292
test/afalgtest.c:90: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  88. 
  89.     if (!TEST_true(EVP_CipherInit_ex(ctx, cipher, e, key, iv, 1))
  90.             || !TEST_true(EVP_CipherUpdate(ctx, ebuf, &encl, in, BUFFER_SIZE))
                      ^
  91.             || !TEST_true(EVP_CipherFinal_ex(ctx, ebuf+encl, &encf)))
  92.         goto end;

#293
providers/implementations/serializers/serializer_dh_priv.c:54: error: Null Dereference
  pointer `ctx` last assigned on line 47 could be null and is dereferenced at line 54, column 5.
  52. 
  53.     /* -1 is the "whatever" indicator, i.e. the PKCS8 library default PBE */
  54.     ctx->sc.pbe_nid = -1;
          ^
  55. 
  56.     return ctx;

#294
providers/implementations/serializers/serializer_dsa_priv.c:54: error: Null Dereference
  pointer `ctx` last assigned on line 47 could be null and is dereferenced at line 54, column 5.
  52. 
  53.     /* -1 is the "whatever" indicator, i.e. the PKCS8 library default PBE */
  54.     ctx->sc.pbe_nid = -1;
          ^
  55. 
  56.     return ctx;

#295
ssl/s3_cbc.c:51: error: Dead Store
  The value written to &md_out (type unsigned char*) is never used.
  49.     u32toLE(md5->B, md_out);
  50.     u32toLE(md5->C, md_out);
  51.     u32toLE(md5->D, md_out);
          ^
  52. }
  53. 

#296
test/drbg_cavs_test.c:50: error: Null Dereference
  pointer `t` last assigned on line 48 could be null and is dereferenced at line 50, column 5.
  48.     TEST_CTX *t = (TEST_CTX *)RAND_DRBG_get_ex_data(drbg, app_data_index);
  49. 
  50.     t->noncecnt++;
          ^
  51.     *pout = (unsigned char *)t->nonce;
  52.     return t->noncelen;

#297
apps/crl2p7.c:69: error: Buffer Overrun L3
  Offset: [2, 8] Size: [3, 9] by call to `opt_help`.
  67.             goto end;
  68.         case OPT_HELP:
  69.             opt_help(crl2pkcs7_options);
                  ^
  70.             ret = 0;
  71.             goto end;

#298
apps/crl2p7.c:166: error: Null Dereference
  pointer `in` last assigned on line 48 could be null and is dereferenced by call to `BIO_free()` at line 166, column 5.
  164.  end:
  165.     sk_OPENSSL_STRING_free(certflst);
  166.     BIO_free(in);
           ^
  167.     BIO_free_all(out);
  168.     PKCS7_free(p7);

#299
apps/crl2p7.c:103: error: Null Dereference
  pointer `infile` last assigned on line 55 could be null and is dereferenced by call to `bio_open_default()` at line 103, column 14.
  101. 
  102.     if (!nocrl) {
  103.         in = bio_open_default(infile, 'r', informat);
                    ^
  104.         if (in == NULL)
  105.             goto end;

#300
test/sslbuffertest.c:148: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  146. 
  147.     SSL_free(clientssl);
  148.     SSL_free(serverssl);
           ^
  149. 
  150.     return result;

#301
test/sslbuffertest.c:148: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  146. 
  147.     SSL_free(clientssl);
  148.     SSL_free(serverssl);
           ^
  149. 
  150.     return result;

#302
test/sslbuffertest.c:147: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  145.         ERR_print_errors_fp(stderr);
  146. 
  147.     SSL_free(clientssl);
           ^
  148.     SSL_free(serverssl);
  149. 

#303
test/sslbuffertest.c:147: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  145.         ERR_print_errors_fp(stderr);
  146. 
  147.     SSL_free(clientssl);
           ^
  148.     SSL_free(serverssl);
  149. 

#304
crypto/x509/t_x509.c:98: error: Integer Overflow L2
  (0 - [-9223372036854775808, 9223372036854775807]):unsigned64.
   96.             unsigned long ul;
   97.             if (bs->type == V_ASN1_NEG_INTEGER) {
   98.                 ul = 0 - (unsigned long)l;
                       ^
   99.                 neg = "-";
  100.             } else {

#305
test/asynctest.c:67: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ASYNC_WAIT_CTX_clear_fd`.
  65. 
  66.     /* Third case: all fd removed */
  67.     if (!ASYNC_WAIT_CTX_clear_fd(waitctx, waitctx))
               ^
  68.         return 0;
  69.     ASYNC_pause_job();

#306
apps/mac.c:74: error: Buffer Overrun L3
  Offset: [2, 8] Size: [3, 9] by call to `opt_help`.
  72.             goto err;
  73.         case OPT_HELP:
  74.             opt_help(mac_options);
                  ^
  75.             ret = 0;
  76.             goto err;

#307
apps/mac.c:191: error: Null Dereference
  pointer `in` last assigned on line 59 could be null and is dereferenced by call to `BIO_free()` at line 191, column 5.
  189.     OPENSSL_clear_free(buf, BUFSIZE);
  190.     sk_OPENSSL_STRING_free(opts);
  191.     BIO_free(in);
           ^
  192.     BIO_free(out);
  193.     EVP_MAC_CTX_free(ctx);

#308
apps/rand.c:65: error: Buffer Overrun L3
  Offset: [3, 9] Size: [4, 10] by call to `opt_help`.
  63.             goto end;
  64.         case OPT_HELP:
  65.             opt_help(rand_options);
                  ^
  66.             ret = 0;
  67.             goto end;

#309
apps/sess_id.c:67: error: Buffer Overrun L3
  Offset: [2, 7] Size: [3, 8] by call to `opt_help`.
  65.             goto end;
  66.         case OPT_HELP:
  67.             opt_help(sess_id_options);
                  ^
  68.             ret = 0;
  69.             goto end;

#310
crypto/bn/bn_mod.c:80: error: Integer Overflow L2
  ([0, 2] - [0, 1]):unsigned64.
  78.     }
  79.     rp = r->d;
  80.     carry -= bn_sub_words(rp, tp, m->d, mtop);
          ^
  81.     for (i = 0; i < mtop; i++) {
  82.         rp[i] = (carry & tp[i]) | (~carry & rp[i]);

#311
test/packettest.c:56: error: Integer Overflow L2
  ([0, +oo] - 253):unsigned64 by call to `PACKET_forward`.
  54.             || !TEST_true(PACKET_get_1(&pkt, &i))
  55.             || !TEST_uint_eq(i, 0x02)
  56.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 2))
                      ^
  57.             || !TEST_true(PACKET_get_1(&pkt, &i))
  58.             || !TEST_uint_eq(i, 0xfe)

#312
crypto/rc2/rc2_skey.c:93: error: Buffer Overrun L3
  Offset: [-1, 126] Size: 256.
  91.     ki = &(key->data[63]);
  92.     for (i = 127; i >= 0; i -= 2)
  93.         *(ki--) = ((k[i] << 8) | k[i - 1]) & 0xffff;
                                       ^
  94. }
  95. 

#313
test/dtls_mtu_test.c:140: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  138.  end:
  139.     SSL_free(clnt_ssl);
  140.     SSL_free(srvr_ssl);
           ^
  141.     return rv;
  142. }

#314
test/dtls_mtu_test.c:140: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  138.  end:
  139.     SSL_free(clnt_ssl);
  140.     SSL_free(srvr_ssl);
           ^
  141.     return rv;
  142. }

#315
test/dtls_mtu_test.c:139: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  137.         rv = 2;
  138.  end:
  139.     SSL_free(clnt_ssl);
           ^
  140.     SSL_free(srvr_ssl);
  141.     return rv;

#316
test/dtls_mtu_test.c:139: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  137.         rv = 2;
  138.  end:
  139.     SSL_free(clnt_ssl);
           ^
  140.     SSL_free(srvr_ssl);
  141.     return rv;

#317
test/dtls_mtu_test.c:100: error: Uninitialized Value
  The value read from mtus[_] was never initialized.
   98.      * that size and see what actual record size we end up with.
   99.      */
  100.     for (s = mtus[0]; s <= mtus[29]; s++) {
                ^
  101.         size_t reclen;
  102. 

#318
test/dtls_mtu_test.c:100: error: Uninitialized Value
  The value read from mtus[_] was never initialized.
   98.      * that size and see what actual record size we end up with.
   99.      */
  100.     for (s = mtus[0]; s <= mtus[29]; s++) {
                             ^
  101.         size_t reclen;
  102. 

#319
test/dtls_mtu_test.c:112: error: Uninitialized Value
  The value read from mtus[_] was never initialized.
  110.             /* DTLS_get_data_mtu() with record MTU 500+i returned mtus[i] ... */
  111. 
  112.             if (!TEST_false(s <= mtus[i] && reclen > (size_t)(500 + i))) {
                        ^
  113.                 /*
  114.                  * We sent a packet smaller than or equal to mtus[j] and

#320
test/dtls_mtu_test.c:117: error: Uninitialized Value
  The value read from mtus[_] was never initialized.
  115.                  * that made a record *larger* than the record MTU 500+j!
  116.                  */
  117.                 TEST_error("%s: s=%lu, mtus[i]=%lu, reclen=%lu, i=%d",
                       ^
  118.                            cs, (unsigned long)s, (unsigned long)mtus[i],
  119.                            (unsigned long)reclen, 500 + i);

#321
test/dtls_mtu_test.c:122: error: Uninitialized Value
  The value read from mtus[_] was never initialized.
  120.                 goto end;
  121.             }
  122.             if (!TEST_false(s > mtus[i] && reclen <= (size_t)(500 + i))) {
                        ^
  123.                 /*
  124.                  * We sent a *larger* packet than mtus[i] and that *still*

#322
test/dtls_mtu_test.c:128: error: Uninitialized Value
  The value read from mtus[_] was never initialized.
  126.                  * was overly pessimistic.
  127.                  */
  128.                 TEST_error("%s: s=%lu, mtus[i]=%lu, reclen=%lu, i=%d",
                       ^
  129.                            cs, (unsigned long)s, (unsigned long)mtus[i],
  130.                            (unsigned long)reclen, 500 + i);

#323
apps/pkcs7.c:70: error: Buffer Overrun L3
  Offset: [2, 11] Size: [3, 12] by call to `opt_help`.
  68.             goto end;
  69.         case OPT_HELP:
  70.             opt_help(pkcs7_options);
                  ^
  71.             ret = 0;
  72.             goto end;

#324
apps/pkcs7.c:200: error: Null Dereference
  pointer `in` last assigned on line 55 could be null and is dereferenced by call to `BIO_free()` at line 200, column 5.
  198.     PKCS7_free(p7);
  199.     release_engine(e);
  200.     BIO_free(in);
           ^
  201.     BIO_free_all(out);
  202.     return ret;

#325
apps/pkcs7.c:108: error: Null Dereference
  pointer `infile` last assigned on line 57 could be null and is dereferenced by call to `bio_open_default()` at line 108, column 10.
  106.         goto opthelp;
  107. 
  108.     in = bio_open_default(infile, 'r', informat);
                ^
  109.     if (in == NULL)
  110.         goto end;

#326
crypto/bn/bn_x931p.c:121: error: Dead Store
  The value written to &i (type int) is never used.
  119.     for (;;) {
  120.         int i = 1;
  121.         BN_GENCB_call(cb, 0, i++);
                                    ^
  122.         if (!BN_copy(pm1, p))
  123.             goto err;

#327
crypto/bn/bn_x931p.c:86: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  84.         goto err;
  85. 
  86.     if (!BN_mul(p1p2, p1, p2, ctx))
               ^
  87.         goto err;
  88. 

#328
crypto/bn/bn_x931p.c:91: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_inverse`.
  89.     /* First set p to value of Rp */
  90. 
  91.     if (!BN_mod_inverse(p, p2, p1, ctx))
               ^
  92.         goto err;
  93. 

#329
crypto/rsa/rsa_sp800_56b_gen.c:131: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  129.     BN_clear(tmp);
  130. 
  131.     BN_CTX_end(ctx);
           ^
  132.     return ret;
  133. }

#330
crypto/bio/bss_null.c:54: error: Dead Store
  The value written to &ret (type long) is never used.
  52. static long null_ctrl(BIO *b, int cmd, long num, void *ptr)
  53. {
  54.     long ret = 1;
          ^
  55. 
  56.     switch (cmd) {

#331
crypto/bn/bn_conv.c:84: error: Dead Store
  The value written to &p (type char*) is never used.
  82.     if (BN_is_zero(t)) {
  83.         *p++ = '0';
  84.         *p++ = '\0';
               ^
  85.     } else {
  86.         if (BN_is_negative(t))

#332
crypto/bn/bn_conv.c:92: error: Integer Overflow L2
  (0 - [0, 10000000000000000000]):unsigned64 by call to `BN_div_word`.
  90.             if (lp - bn_data >= bn_data_num)
  91.                 goto err;
  92.             *lp = BN_div_word(t, BN_DEC_CONV);
                        ^
  93.             if (*lp == (BN_ULONG)-1)
  94.                 goto err;

#333
crypto/bn/bn_conv.c:103: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `BIO_snprintf`.
  101.          * order.
  102.          */
  103.         n = BIO_snprintf(p, tbytes - (size_t)(p - buf), BN_DEC_FMT1, *lp);
                   ^
  104.         if (n < 0)
  105.             goto err;

#334
crypto/asn1/a_object.c:143: error: Integer Overflow L2
  (0 - [0, 128]):unsigned64 by call to `BN_div_word`.
  141.             }
  142.             while (blsize--) {
  143.                 BN_ULONG t = BN_div_word(bl, 0x80L);
                                    ^
  144.                 if (t == (BN_ULONG)-1)
  145.                     goto err;

#335
crypto/asn1/bio_ndef.c:100: error: Null Dereference
  pointer `asn_bio` last assigned on line 65 could be null and is dereferenced by call to `BIO_free()` at line 100, column 5.
   98. 
   99.  err:
  100.     BIO_free(asn_bio);
           ^
  101.     OPENSSL_free(ndef_aux);
  102.     return NULL;

#336
test/clienthellotest.c:107: error: Buffer Overrun L1
  Offset: 7 Size: 1 by call to `SSL_CTX_set_cipher_list`.
  105.          * that is too long for this test we use a restricted ciphersuite list
  106.          */
  107.         if (!TEST_false(SSL_CTX_set_cipher_list(ctx, "")))
                    ^
  108.             goto end;
  109.         ERR_clear_error();

#337
test/clienthellotest.c:107: error: Buffer Overrun L1
  Offset: [9, +oo] (<= [0, +oo] + 9) Size: 1 by call to `SSL_CTX_set_cipher_list`.
  105.          * that is too long for this test we use a restricted ciphersuite list
  106.          */
  107.         if (!TEST_false(SSL_CTX_set_cipher_list(ctx, "")))
                    ^
  108.             goto end;
  109.         ERR_clear_error();

#338
test/clienthellotest.c:107: error: Buffer Overrun L2
  Offset: [0, 8] Size: 1 by call to `SSL_CTX_set_cipher_list`.
  105.          * that is too long for this test we use a restricted ciphersuite list
  106.          */
  107.         if (!TEST_false(SSL_CTX_set_cipher_list(ctx, "")))
                    ^
  108.             goto end;
  109.         ERR_clear_error();

#339
test/clienthellotest.c:242: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  240. end:
  241.     SSL_free(con);
  242.     SSL_CTX_free(ctx);
           ^
  243.     SSL_SESSION_free(sess);
  244.     BIO_free(sessbio);

#340
test/clienthellotest.c:241: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  239. 
  240. end:
  241.     SSL_free(con);
           ^
  242.     SSL_CTX_free(ctx);
  243.     SSL_SESSION_free(sess);

#341
test/clienthellotest.c:162: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  160.          */
  161.         if (!TEST_true(SSL_SESSION_set_time(sess, (long)time(NULL)))
  162.                 || !TEST_true(SSL_set_session(con, sess)))
                           ^
  163.             goto end;
  164.     }

#342
test/clienthellotest.c:199: error: Integer Overflow L2
  ([0, +oo] - 34):unsigned64 by call to `PACKET_forward`.
  197.     if (!TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))
  198.                /* Skip client version and random */
  199.             || !TEST_true(PACKET_forward(&pkt, CLIENT_VERSION_LEN
                       ^
  200.                                                + SSL3_RANDOM_SIZE))
  201.                /* Skip session id */

#343
test/clienthellotest.c:197: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `PACKET_forward`.
  195. 
  196.     /* Skip the handshake message header */
  197.     if (!TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))
                ^
  198.                /* Skip client version and random */
  199.             || !TEST_true(PACKET_forward(&pkt, CLIENT_VERSION_LEN

#344
test/clienthellotest.c:191: error: Integer Overflow L2
  ([0, +oo] - 5):unsigned64 by call to `PACKET_forward`.
  189.     if (!TEST_true(PACKET_buf_init(&pkt, data, len))
  190.                /* Skip the record header */
  191.             || !PACKET_forward(&pkt, SSL3_RT_HEADER_LENGTH))
                       ^
  192.         goto end;
  193. 

#345
crypto/idea/i_skey.c:79: error: Buffer Overrun L1
  Offset: 50 Size: 6.
  77. 
  78.     t = tp[49];
  79.     tp[49] = tp[50];
                   ^
  80.     tp[50] = t;
  81. }

#346
crypto/idea/i_skey.c:69: error: Buffer Overrun L1
  Offset: [-oo, -2] (<= [-oo, -6] + 4) Size: 6.
  67.             break;
  68.         fp -= 6;
  69.         *(tp++) = fp[4];
                        ^
  70.         *(tp++) = fp[5];
  71.     }

#347
ssl/s3_cbc.c:61: error: Dead Store
  The value written to &md_out (type unsigned char*) is never used.
  59.     l2n(sha1->h2, md_out);
  60.     l2n(sha1->h3, md_out);
  61.     l2n(sha1->h4, md_out);
          ^
  62. }
  63. 

#348
apps/gendsa.c:77: error: Buffer Overrun L3
  Offset: [0, 13] Size: [1, 14] by call to `opt_help`.
  75.         case OPT_HELP:
  76.             ret = 0;
  77.             opt_help(gendsa_options);
                  ^
  78.             goto end;
  79.         case OPT_OUT:

#349
apps/genpkey.c:77: error: Buffer Overrun L3
  Offset: [0, 9] Size: [1, 10] by call to `opt_help`.
  75.         case OPT_HELP:
  76.             ret = 0;
  77.             opt_help(genpkey_options);
                  ^
  78.             goto end;
  79.         case OPT_OUTFORM:

#350
apps/spkac.c:79: error: Buffer Overrun L3
  Offset: [2, 9] Size: [3, 10] by call to `opt_help`.
  77.             goto end;
  78.         case OPT_HELP:
  79.             opt_help(spkac_options);
                  ^
  80.             ret = 0;
  81.             goto end;

#351
crypto/bn/bn_recp.c:77: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div_recp`.
  75.         ca = x;                 /* Just do the mod */
  76. 
  77.     ret = BN_div_recp(NULL, r, ca, recp, ctx);
                ^
  78.  err:
  79.     BN_CTX_end(ctx);

#352
crypto/bn/bn_recp.c:77: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_div_recp`.
  75.         ca = x;                 /* Just do the mod */
  76. 
  77.     ret = BN_div_recp(NULL, r, ca, recp, ctx);
                ^
  78.  err:
  79.     BN_CTX_end(ctx);

#353
crypto/bn/bn_recp.c:77: error: Integer Overflow L2
  ([0, 5+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_div_recp`.
  75.         ca = x;                 /* Just do the mod */
  76. 
  77.     ret = BN_div_recp(NULL, r, ca, recp, ctx);
                ^
  78.  err:
  79.     BN_CTX_end(ctx);

#354
crypto/bn/bn_recp.c:79: error: Integer Overflow L2
  ([0, 7+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  77.     ret = BN_div_recp(NULL, r, ca, recp, ctx);
  78.  err:
  79.     BN_CTX_end(ctx);
          ^
  80.     bn_check_top(r);
  81.     return ret;

#355
test/dtlstest.c:115: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  113.  end:
  114.     SSL_free(serverssl1);
  115.     SSL_free(clientssl1);
           ^
  116.     SSL_CTX_free(sctx);
  117.     SSL_CTX_free(cctx);

#356
test/dtlstest.c:115: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  113.  end:
  114.     SSL_free(serverssl1);
  115.     SSL_free(clientssl1);
           ^
  116.     SSL_CTX_free(sctx);
  117.     SSL_CTX_free(cctx);

#357
test/dtlstest.c:114: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  112.     testresult = 1;
  113.  end:
  114.     SSL_free(serverssl1);
           ^
  115.     SSL_free(clientssl1);
  116.     SSL_CTX_free(sctx);

#358
test/dtlstest.c:114: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  112.     testresult = 1;
  113.  end:
  114.     SSL_free(serverssl1);
           ^
  115.     SSL_free(clientssl1);
  116.     SSL_CTX_free(sctx);

#359
apps/pkey.c:78: error: Buffer Overrun L3
  Offset: [0, 11] Size: [1, 12] by call to `opt_help`.
  76.             goto end;
  77.         case OPT_HELP:
  78.             opt_help(pkey_options);
                  ^
  79.             ret = 0;
  80.             goto end;

#360
crypto/ec/curve448/f_generic.c:62: error: Integer Overflow L2
  (0 - [0, 1]):unsigned32.
  60.     gf_copy(y, x);
  61.     gf_strong_reduce(y);
  62.     return 0 - (y->limb[0] & 1);
          ^
  63. }
  64. 

#361
crypto/dh/dh_gen.c:132: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  130.     }
  131. 
  132.     BN_CTX_end(ctx);
           ^
  133.     BN_CTX_free(ctx);
  134.     return ok;

#362
crypto/dh/dh_gen.c:118: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_generate_prime_ex`.
  116.     }
  117. 
  118.     if (!BN_generate_prime_ex(ret->p, prime_len, 1, t1, t2, cb))
                ^
  119.         goto err;
  120.     if (!BN_GENCB_call(cb, 3, 0))

#363
crypto/evp/e_chacha20_poly1305.c:102: error: Integer Overflow L2
  ([2, 268435456] - [1, 268435455]):unsigned64.
  100.         ctr32 += (unsigned int)blocks;
  101.         if (ctr32 < blocks) {
  102.             blocks -= ctr32;
                   ^
  103.             ctr32 = 0;
  104.         }

#364
crypto/evp/e_chacha20_poly1305.c:107: error: Integer Overflow L2
  ([64, +oo] - [-17179868992, 17179869184]):unsigned64.
  105.         blocks *= CHACHA_BLK_SIZE;
  106.         ChaCha20_ctr32(out, inp, blocks, key->key.d, key->counter);
  107.         len -= blocks;
               ^
  108.         inp += blocks;
  109.         out += blocks;

#365
crypto/x509/v3_sxnet.c:65: error: Integer Overflow L2
  ([-9223372036854775808, 9223372036854775807] + 1):signed64.
  63.     int i;
  64.     v = ASN1_INTEGER_get(sx->version);
  65.     BIO_printf(out, "%*sVersion: %ld (0x%lX)", indent, "", v + 1, v);
          ^
  66.     for (i = 0; i < sk_SXNETID_num(sx->ids); i++) {
  67.         id = sk_SXNETID_value(sx->ids, i);

#366
apps/version.c:75: error: Buffer Overrun L3
  Offset: [1, 4] Size: [2, 5] by call to `opt_help`.
  73.             goto end;
  74.         case OPT_HELP:
  75.             opt_help(version_options);
                  ^
  76.             ret = 0;
  77.             goto end;

#367
crypto/srp/srp_lib.c:74: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  72.     if (!BN_mod_exp(tmp, v, u, N, bn_ctx))
  73.         goto err;
  74.     if (!BN_mod_mul(tmp, A, tmp, N, bn_ctx))
               ^
  75.         goto err;
  76. 

#368
crypto/x509/v3_tlsf.c:74: error: Buffer Overrun L3
  Offset: [14, 17] Size: [15, 18] by call to `X509V3_add_value`.
  72.                 break;
  73.         if (j < OSSL_NELEM(tls_feature_tbl))
  74.             X509V3_add_value(NULL, tls_feature_tbl[j].name, &ext_list);
                  ^
  75.         else
  76.             X509V3_add_value_int(NULL, ai, &ext_list);

#369
crypto/o_str.c:64: error: Integer Overflow L2
  ([0, `maxlen`] - 1):unsigned64.
  62.     const char *p;
  63. 
  64.     for (p = str; maxlen-- != 0 && *p != '\0'; ++p) ;
                        ^
  65. 
  66.     return p - str;

#370
apps/asn1pars.c:95: error: Buffer Overrun L3
  Offset: [1, 9] Size: [2, 10] by call to `opt_help`.
  93.             goto end;
  94.         case OPT_HELP:
  95.             opt_help(asn1parse_options);
                  ^
  96.             ret = 0;
  97.             goto end;

#371
crypto/rsa/rsa_mp.c:87: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  85.                 goto err;
  86.         }
  87.         if (!BN_mul(pinfo->pp, p1, p2, ctx))
                   ^
  88.             goto err;
  89.         /* save previous one */

#372
crypto/rsa/rsa_ssl.c:68: error: Dead Store
  The value written to &mlen (type int) is never used.
  66.     unsigned char *em = NULL;
  67.     unsigned int good, found_zero_byte, mask, threes_in_row;
  68.     int zero_index = 0, msg_index, mlen = -1, err;
          ^
  69. 
  70.     if (tlen <= 0 || flen <= 0)

#373
crypto/rsa/rsa_ssl.c:96: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  94.     }
  95. 
  96.     good = constant_time_is_zero(em[0]);
                 ^
  97.     good &= constant_time_eq(em[1], 2);
  98.     err = constant_time_select_int(good, 0, RSA_R_BLOCK_TYPE_IS_NOT_02);

#374
crypto/rsa/rsa_ssl.c:105: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  103.     threes_in_row = 0;
  104.     for (i = 2; i < num; i++) {
  105.         unsigned int equals0 = constant_time_is_zero(em[i]);
                                      ^
  106. 
  107.         zero_index = constant_time_select_int(~found_zero_byte & equals0,

#375
crypto/rsa/rsa_ssl.c:120: error: Integer Overflow L2
  ([0, +oo] - 10):unsigned32 by call to `constant_time_ge`.
  118.      * also fails.
  119.      */
  120.     good &= constant_time_ge(zero_index, 2 + 8);
                   ^
  121.     err = constant_time_select_int(mask | good, err,
  122.                                    RSA_R_NULL_BEFORE_BLOCK_MISSING);

#376
crypto/rsa/rsa_ssl.c:125: error: Integer Overflow L2
  ([0, +oo] - 8):unsigned32 by call to `constant_time_ge`.
  123.     mask = ~good;
  124. 
  125.     good &= constant_time_ge(threes_in_row, 8);
                   ^
  126.     err = constant_time_select_int(mask | good, err,
  127.                                    RSA_R_SSLV3_ROLLBACK_ATTACK);

#377
crypto/rsa/rsa_ssl.c:90: error: Integer Overflow L2
  ([0, max(0, `flen`)] - 1):unsigned32 by call to `constant_time_is_zero`.
  88.      */
  89.     for (from += flen, em += num, i = 0; i < num; i++) {
  90.         mask = ~constant_time_is_zero(flen);
                      ^
  91.         flen -= 1 & mask;
  92.         from -= 1 & mask;

#378
crypto/dsa/dsa_ossl.c:133: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  131. 
  132.     /* tmp := blind * priv_key * r mod q */
  133.     if (!BN_mod_mul(tmp, blind, dsa->priv_key, dsa->q, ctx))
                ^
  134.         goto err;
  135.     if (!BN_mod_mul(tmp, tmp, ret->r, dsa->q, ctx))

#379
crypto/dsa/dsa_ossl.c:139: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  137. 
  138.     /* blindm := blind * m mod q */
  139.     if (!BN_mod_mul(blindm, blind, m, dsa->q, ctx))
                ^
  140.         goto err;
  141. 

#380
crypto/dsa/dsa_ossl.c:151: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_inverse`.
  149. 
  150.     /* s:= s * blind^-1 mod q */
  151.     if (BN_mod_inverse(blind, blind, dsa->q, ctx) == NULL)
               ^
  152.         goto err;
  153.     if (!BN_mod_mul(ret->s, ret->s, blind, dsa->q, ctx))

#381
crypto/asn1/a_type.c:65: error: Dead Store
  The value written to &result (type int) is never used.
  63. int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
  64. {
  65.     int result = -1;
          ^
  66. 
  67.     if (!a || !b || a->type != b->type)

#382
ssl/statem/extensions_clnt.c:78: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  76.             /* Sub-packet for Max Fragment Length extension (1 byte) */
  77.             || !WPACKET_start_sub_packet_u16(pkt)
  78.             || !WPACKET_put_bytes_u8(pkt, s->ext.max_fragment_len_mode)
                      ^
  79.             || !WPACKET_close(pkt)) {
  80.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#383
apps/srp.c:69: error: Null Dereference
  pointer `pp` last assigned on line 68 could be null and is dereferenced at line 69, column 47.
  67.         int j;
  68.         char **pp = sk_OPENSSL_PSTRING_value(db->db->data, indx);
  69.         BIO_printf(bio_err, "%s \"%s\"\n", s, pp[DB_srpid]);
                                                    ^
  70.         for (j = 0; j < DB_NUMBER; j++) {
  71.             BIO_printf(bio_err, "  %d = \"%s\"\n", j, pp[j]);

#384
crypto/ocsp/ocsp_ht.c:80: error: Null Dereference
  pointer `rctx->mem` last assigned on line 72 could be null and is dereferenced by call to `OCSP_REQ_CTX_free()` at line 80, column 9.
  78.     rctx->iobuf = OPENSSL_malloc(rctx->iobuflen);
  79.     if (rctx->iobuf == NULL || rctx->mem == NULL) {
  80.         OCSP_REQ_CTX_free(rctx);
              ^
  81.         return NULL;
  82.     }

#385
crypto/rsa/rsa_gen.c:398: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  396.         ok = 0;
  397.     }
  398.     BN_CTX_end(ctx);
           ^
  399.     BN_CTX_free(ctx);
  400.     return ok;

#386
crypto/rsa/rsa_gen.c:197: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  195.                 }
  196.             }
  197.             if (!BN_sub(r2, prime, BN_value_one()))
                        ^
  198.                 goto err;
  199.             ERR_set_mark();

#387
crypto/rsa/rsa_gen.c:217: error: Uninitialized Value
  The value read from bitsr[_] was never initialized.
  215.         }
  216. 
  217.         bitse += bitsr[i];
               ^
  218. 
  219.         /* calculate n immediately to see if it's sufficient */

#388
crypto/rsa/rsa_gen.c:264: error: Uninitialized Value
  The value read from bitsr[_] was never initialized.
  262.              * 2. stay the same logic with normal 2-prime key
  263.              */
  264.             bitse -= bitsr[i];
                   ^
  265.             if (!BN_GENCB_call(cb, 2, n++))
  266.                 goto err;

#389
crypto/x509/x509_trs.c:78: error: Null Dereference
  pointer `pt` last assigned on line 77 could be null and is dereferenced at line 78, column 12.
  76.         return default_trust(id, x, flags);
  77.     pt = X509_TRUST_get0(idx);
  78.     return pt->check_trust(pt, x, flags);
                 ^
  79. }
  80. 

#390
test/packettest.c:73: error: Integer Overflow L2
  ([0, +oo] - 247):unsigned64 by call to `PACKET_forward`.
  71.             || !TEST_true(PACKET_get_4(&pkt, &i))
  72.             || !TEST_ulong_eq(i, 0x08060402UL)
  73.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 8))
                      ^
  74.             || !TEST_true(PACKET_get_4(&pkt, &i))
  75.             || !TEST_ulong_eq(i, 0xfefcfaf8UL)

#391
crypto/asn1_dsa.c:88: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_allocate_bytes`.
  86.             || !WPACKET_put_bytes_u8(pkt, ID_INTEGER)
  87.             || !encode_der_length(pkt, cont_len)
  88.             || !WPACKET_allocate_bytes(pkt, cont_len, &bnbytes)
                      ^
  89.             || !WPACKET_close(pkt))
  90.         return 0;

#392
crypto/ec/curve448/f_generic.c:95: error: Integer Overflow L1
  (0 - 1):unsigned32.
  93.              MODULUS->limb[LIMBPERM(i)]) >> (8 * sizeof(word_t));
  94.     }
  95.     succ = with_hibit ? 0 - (mask_t) 1 : ~gf_hibit(x);
                 ^
  96.     return succ & word_is_zero((word_t)buffer) & ~word_is_zero((word_t)scarry);
  97. }

#393
crypto/ec/curve448/f_generic.c:96: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `constant_time_is_zero_32`.
  94.     }
  95.     succ = with_hibit ? 0 - (mask_t) 1 : ~gf_hibit(x);
  96.     return succ & word_is_zero((word_t)buffer) & ~word_is_zero((word_t)scarry);
                                                        ^
  97. }
  98. 

#394
crypto/ec/curve448/f_generic.c:96: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero_32`.
  94.     }
  95.     succ = with_hibit ? 0 - (mask_t) 1 : ~gf_hibit(x);
  96.     return succ & word_is_zero((word_t)buffer) & ~word_is_zero((word_t)scarry);
                        ^
  97. }
  98. 

#395
test/dsatest.c:82: error: Buffer Overrun L3
  Offset added: [-1, +oo] Size: 160 by call to `DSA_generate_parameters_ex`.
  80.     BN_GENCB_set(cb, dsa_cb, NULL);
  81.     if (!TEST_ptr(dsa = DSA_new())
  82.         || !TEST_true(DSA_generate_parameters_ex(dsa, 512, seed, 20,
                  ^
  83.                                                 &counter, &h, cb)))
  84.         goto end;

#396
test/ecstresstest.c:90: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq`.
  88.         if (!TEST_true(BN_hex2bn(&expected_result, kP256DefaultResult))
  89.                 || !TEST_ptr(expected_result)
  90.                 || !TEST_BN_eq(result, expected_result))
                          ^
  91.             goto err;
  92.         ret = 1;

#397
apps/storeutl.c:94: error: Buffer Overrun L3
  Offset: [0, 11] Size: [1, 12] by call to `opt_help`.
  92.             goto end;
  93.         case OPT_HELP:
  94.             opt_help(storeutl_options);
                  ^
  95.             ret = 0;
  96.             goto end;

#398
crypto/ec/eck_prn.c:147: error: Integer Overflow L2
  ([0, 3] - 1):unsigned32 by call to `EC_POINT_point2bn`.
  145.         form = EC_GROUP_get_point_conversion_form(x);
  146. 
  147.         if ((gen = EC_POINT_point2bn(x, point, form, NULL, ctx)) == NULL) {
                          ^
  148.             reason = ERR_R_EC_LIB;
  149.             goto err;

#399
test/time_offset_test.c:71: error: Dead Store
  The value written to &ret (type int) is never used.
  69.     ASN1_TIME at;
  70.     const TESTDATA *testdata = &tests[idx];
  71.     int ret = -2;
          ^
  72.     int day, sec;
  73. 

#400
crypto/rand/drbg_ctr.c:75: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  73.         out[i] ^= in[i];
  74. 
  75.     if (!EVP_CipherUpdate(ctr->ctx_df, out, &outlen, out, AES_BLOCK_SIZE)
               ^
  76.         || outlen != AES_BLOCK_SIZE)
  77.         return 0;

#401
apps/dsaparam.c:89: error: Buffer Overrun L3
  Offset: [1, 9] Size: [2, 10] by call to `opt_help`.
  87.             goto end;
  88.         case OPT_HELP:
  89.             opt_help(dsaparam_options);
                  ^
  90.             ret = 0;
  91.             goto end;

#402
apps/dsaparam.c:253: error: Dead Store
  The value written to &i (type int) is never used.
  251.         assert(private);
  252.         if (outformat == FORMAT_ASN1)
  253.             i = i2d_DSAPrivateKey_bio(out, dsakey);
                   ^
  254.         else
  255.             i = PEM_write_bio_DSAPrivateKey(out, dsakey, NULL, NULL, 0, NULL,

#403
apps/dsaparam.c:255: error: Dead Store
  The value written to &i (type int) is never used.
  253.             i = i2d_DSAPrivateKey_bio(out, dsakey);
  254.         else
  255.             i = PEM_write_bio_DSAPrivateKey(out, dsakey, NULL, NULL, 0, NULL,
                   ^
  256.                                             NULL);
  257.         DSA_free(dsakey);

#404
crypto/ec/ecdsa_ossl.c:142: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  140. 
  141.         /* compute r the x-coordinate of generator * k */
  142.         if (!EC_POINT_mul(group, tmp_point, k, NULL, NULL, ctx)) {
                    ^
  143.             ECerr(EC_F_ECDSA_SIGN_SETUP, ERR_R_EC_LIB);
  144.             goto err;

#405
crypto/ec/ecdsa_ossl.c:133: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range_ex`.
  131.                 }
  132.             } else {
  133.                 if (!BN_priv_rand_range_ex(k, order, ctx)) {
                            ^
  134.                     ECerr(EC_F_ECDSA_SIGN_SETUP,
  135.                           EC_R_RANDOM_NUMBER_GENERATION_FAILED);

#406
crypto/rsa/rsa_ossl.c:151: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  149.     r = BN_bn2binpad(ret, to, num);
  150.  err:
  151.     BN_CTX_end(ctx);
           ^
  152.     BN_CTX_free(ctx);
  153.     OPENSSL_clear_free(buf, num);

#407
test/sparse_array_test.c:89: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_sa_char_set`.
  87.         goto err;
  88.     for (i = 0; i < OSSL_NELEM(cases); i++)
  89.         if (!TEST_true(ossl_sa_char_set(sa, cases[i].n, cases[i].v))
                   ^
  90.                 || !TEST_size_t_eq(ossl_sa_char_num(sa), cases[i].num))
  91.             goto err;

#408
apps/dsa.c:95: error: Buffer Overrun L3
  Offset: [0, 10] Size: [1, 11] by call to `opt_help`.
  93.             goto end;
  94.         case OPT_HELP:
  95.             opt_help(dsa_options);
                  ^
  96.             ret = 0;
  97.             goto end;

#409
apps/pkcs8.c:100: error: Buffer Overrun L3
  Offset: [2, 11] Size: [3, 12] by call to `opt_help`.
   98.             goto end;
   99.         case OPT_HELP:
  100.             opt_help(pkcs8_options);
                   ^
  101.             ret = 0;
  102.             goto end;

#410
test/evp_fetch_prov_test.c:83: error: Buffer Overrun L2
  Offset: [0, 399] Size: 100 by call to `test_get_argument`.
  81. 
  82.     for (i = 0; i < test_get_argument_count(); ++i) {
  83.         char *provname = test_get_argument(i);
                               ^
  84.         prov[i] = OSSL_PROVIDER_load(ctx, provname);
  85.         if (!TEST_ptr(prov[i]))

#411
crypto/x509/v3_prn.c:83: error: Null Dereference
  pointer `extoct` last assigned on line 82 could be null and is dereferenced by call to `ASN1_STRING_get0_data()` at line 83, column 9.
  81. 
  82.     extoct = X509_EXTENSION_get_data(ext);
  83.     p = ASN1_STRING_get0_data(extoct);
              ^
  84.     extlen = ASN1_STRING_length(extoct);
  85. 

#412
test/ec_internal_test.c:95: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  93. 
  94.  err:
  95.     BN_CTX_end(ctx);
          ^
  96.     BN_CTX_free(ctx);
  97.     if (group != NULL)

#413
crypto/mdc2/mdc2dgst.c:103: error: Dead Store
  The value written to &p (type unsigned char*) is never used.
  101.         p = c->h;
  102.         l2c(tin0, p);
  103.         l2c(ttin1, p);
               ^
  104.         p = c->hh;
  105.         l2c(ttin0, p);

#414
crypto/mdc2/mdc2dgst.c:106: error: Dead Store
  The value written to &p (type unsigned char*) is never used.
  104.         p = c->hh;
  105.         l2c(ttin0, p);
  106.         l2c(tin1, p);
               ^
  107.     }
  108. }

#415
apps/genrsa.c:103: error: Buffer Overrun L3
  Offset: [0, 9] Size: [1, 10] by call to `opt_help`.
  101.         case OPT_HELP:
  102.             ret = 0;
  103.             opt_help(genrsa_options);
                   ^
  104.             goto end;
  105.         case OPT_3:

#416
apps/rsa.c:99: error: Buffer Overrun L3
  Offset: [0, 16] Size: [1, 17] by call to `opt_help`.
   97.             goto end;
   98.         case OPT_HELP:
   99.             opt_help(rsa_options);
                   ^
  100.             ret = 0;
  101.             goto end;

#417
crypto/asn1/a_time.c:238: error: Buffer Overrun L2
  Offset: [6, 9] Size: 9.
  236.             n = (n * 10) + a[o] - num_zero;
  237.             i2 = (d->type == V_ASN1_UTCTIME) ? i + 1 : i;
  238.             if ((n < min[i2]) || (n > max[i2]))
                            ^
  239.                 goto err;
  240.             /* if tm is NULL, no need to adjust */

#418
crypto/asn1/a_time.c:238: error: Buffer Overrun L2
  Offset: [6, 9] Size: 9.
  236.             n = (n * 10) + a[o] - num_zero;
  237.             i2 = (d->type == V_ASN1_UTCTIME) ? i + 1 : i;
  238.             if ((n < min[i2]) || (n > max[i2]))
                                             ^
  239.                 goto err;
  240.             /* if tm is NULL, no need to adjust */

#419
crypto/asn1/a_time.c:128: error: Dead Store
  The value written to &i (type int) is never used.
  126.     for (i = 0; i < end; i++) {
  127.         if (!strict && (i == btz) && ((a[o] == upper_z) || (a[o] == plus) || (a[o] == minus))) {
  128.             i++;
                   ^
  129.             break;
  130.         }

#420
crypto/pkcs12/p12_utl.c:141: error: Dead Store
  The value written to &unitmp (type unsigned char*) is never used.
  139.     /* Make result double null terminated */
  140.     *unitmp++ = 0;
  141.     *unitmp++ = 0;
            ^
  142.     if (unilen)
  143.         *unilen = ulen;

#421
providers/implementations/serializers/serializer_rsa_priv.c:83: error: Null Dereference
  pointer `ctx` last assigned on line 76 could be null and is dereferenced at line 83, column 5.
  81. 
  82.     /* -1 is the "whatever" indicator, i.e. the PKCS8 library default PBE */
  83.     ctx->sc.pbe_nid = -1;
          ^
  84. 
  85.     return ctx;

#422
apps/crl.c:106: error: Buffer Overrun L3
  Offset: [0, 11] Size: [1, 12] by call to `opt_help`.
  104.             goto end;
  105.         case OPT_HELP:
  106.             opt_help(crl_options);
                   ^
  107.             ret = 0;
  108.             goto end;

#423
apps/lib/app_params.c:90: error: Buffer Overrun L2
  Offset: [0, 8589934588] Size: 200 by call to `describe_param_type`.
  88.             char buf[200];       /* This should be ample space */
  89. 
  90.             describe_param_type(buf, sizeof(buf), pdefs);
                  ^
  91.             BIO_printf(bio_out, "%*s  %s\n", indent, "", buf);
  92.         }

#424
apps/lib/app_params.c:90: error: Integer Overflow L2
  ([-6442450741, 200] - [1, 2147483647]):unsigned64 by call to `describe_param_type`.
  88.             char buf[200];       /* This should be ample space */
  89. 
  90.             describe_param_type(buf, sizeof(buf), pdefs);
                  ^
  91.             BIO_printf(bio_out, "%*s  %s\n", indent, "", buf);
  92.         }

#425
apps/lib/app_params.c:90: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `describe_param_type`.
  88.             char buf[200];       /* This should be ample space */
  89. 
  90.             describe_param_type(buf, sizeof(buf), pdefs);
                  ^
  91.             BIO_printf(bio_out, "%*s  %s\n", indent, "", buf);
  92.         }

#426
apps/rsautl.c:99: error: Buffer Overrun L3
  Offset: [2, 9] Size: [3, 10] by call to `opt_help`.
   97.             goto end;
   98.         case OPT_HELP:
   99.             opt_help(rsautl_options);
                   ^
  100.             ret = 0;
  101.             goto end;

#427
apps/ec.c:101: error: Buffer Overrun L3
  Offset: [0, 9] Size: [1, 10] by call to `opt_help`.
   99.             goto end;
  100.         case OPT_HELP:
  101.             opt_help(ec_options);
                   ^
  102.             ret = 0;
  103.             goto end;

#428
crypto/asn1/a_int.c:85: error: Integer Overflow L2
  ([0, `len`] - 1):unsigned64.
  83.     src += len;
  84.     /* two's complement value: ~value + 1 */
  85.     while (len-- != 0) {
                 ^
  86.         *(--dst) = (unsigned char)(carry += *(--src) ^ pad);
  87.         carry >>= 8;

#429
crypto/bio/bss_conn.c:213: error: Resource Leak
  resource acquired by call to `BIO_socket()` at line 138, column 19 is not released after line 213, column 18.
  211. 
  212.         if (cb != NULL) {
  213.             if ((ret = cb((BIO *)b, c->state, ret)) == 0)
                        ^
  214.                 goto end;
  215.         }

#430
crypto/dh/dh_key.c:124: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range`.
  122.         if (dh->q) {
  123.             do {
  124.                 if (!BN_priv_rand_range(priv_key, dh->q))
                            ^
  125.                     goto err;
  126.             }

#431
crypto/evp/evp_fetch.c:80: error: Null Dereference
  pointer `cipher` last assigned on line 78 could be null and is dereferenced by call to `EVP_CIPHER_name()` at line 80, column 26.
  78.     const EVP_CIPHER *cipher = (void *)OBJ_NAME_get(on->name, on->type);
  79. 
  80.     get_legacy_evp_names(EVP_CIPHER_name(cipher), on->name, arg);
                               ^
  81. }
  82. 

#432
crypto/cast/c_enc.c:104: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  102.         }
  103.         if (l != -8) {
  104.             n2ln(in, tin0, tin1, l + 8);
                   ^
  105.             tin0 ^= tout0;
  106.             tin1 ^= tout1;

#433
crypto/cast/c_enc.c:136: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  134.         if (l != -8) {
  135.             n2l(in, tin0);
  136.             n2l(in, tin1);
                   ^
  137.             tin[0] = tin0;
  138.             tin[1] = tin1;

#434
crypto/cast/c_enc.c:116: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  114.         }
  115.         l2n(tout0, iv);
  116.         l2n(tout1, iv);
               ^
  117.     } else {
  118.         n2l(iv, xor0);

#435
crypto/cast/c_enc.c:147: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  145.         }
  146.         l2n(xor0, iv);
  147.         l2n(xor1, iv);
               ^
  148.     }
  149.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;

#436
crypto/cast/c_enc.c:113: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  111.             tout1 = tin[1];
  112.             l2n(tout0, out);
  113.             l2n(tout1, out);
                   ^
  114.         }
  115.         l2n(tout0, iv);

#437
crypto/cast/c_enc.c:142: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  140.             tout0 = tin[0] ^ xor0;
  141.             tout1 = tin[1] ^ xor1;
  142.             l2nn(tout0, tout1, out, l + 8);
                   ^
  143.             xor0 = tin0;
  144.             xor1 = tin1;

#438
crypto/cast/c_enc.c:149: error: Dead Store
  The value written to &tin0 (type unsigned int) is never used.
  147.         l2n(xor1, iv);
  148.     }
  149.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;
           ^
  150.     tin[0] = tin[1] = 0;
  151. }

#439
crypto/x509/v3_alt.c:156: error: Buffer Overrun L2
  Offset: [-oo, 1048576] Size: 256 by call to `X509_NAME_oneline`.
  154. 
  155.     case GEN_DIRNAME:
  156.         if (X509_NAME_oneline(gen->d.dirn, oline, sizeof(oline)) == NULL
                   ^
  157.                 || !X509V3_add_value("DirName", oline, &ret))
  158.             return NULL;

#440
crypto/x509/v3_purp.c:92: error: Null Dereference
  pointer `pt` last assigned on line 91 could be null and is dereferenced at line 92, column 12.
  90.         return -1;
  91.     pt = X509_PURPOSE_get0(idx);
  92.     return pt->check_purpose(pt, x, ca);
                 ^
  93. }
  94. 

#441
apps/dhparam.c:101: error: Buffer Overrun L3
  Offset: [1, 9] Size: [2, 10] by call to `opt_help`.
   99.             goto end;
  100.         case OPT_HELP:
  101.             opt_help(dhparam_options);
                   ^
  102.             ret = 0;
  103.             goto end;

#442
apps/dhparam.c:153: error: Dead Store
  The value written to &argc (type int) is never used.
  151.         }
  152.     }
  153.     argc = opt_num_rest();
           ^
  154.     argv = opt_rest();
  155. 

#443
crypto/asn1/ameth_lib.c:101: error: Uninitialized Value
  The value read from t was never initialized.
   99.         *pe = NULL;
  100.     }
  101.     return t;
           ^
  102. }
  103. 

#444
test/recordlentest.c:178: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  176.  end:
  177.     SSL_free(serverssl);
  178.     SSL_free(clientssl);
           ^
  179.     SSL_CTX_free(sctx);
  180.     SSL_CTX_free(cctx);

#445
test/recordlentest.c:178: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  176.  end:
  177.     SSL_free(serverssl);
  178.     SSL_free(clientssl);
           ^
  179.     SSL_CTX_free(sctx);
  180.     SSL_CTX_free(cctx);

#446
test/recordlentest.c:177: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  175. 
  176.  end:
  177.     SSL_free(serverssl);
           ^
  178.     SSL_free(clientssl);
  179.     SSL_CTX_free(sctx);

#447
test/recordlentest.c:177: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  175. 
  176.  end:
  177.     SSL_free(serverssl);
           ^
  178.     SSL_free(clientssl);
  179.     SSL_CTX_free(sctx);

#448
apps/srp.c:86: error: Null Dereference
  pointer `pp` last assigned on line 84 could be null and is dereferenced at line 86, column 13.
  84.         char **pp = sk_OPENSSL_PSTRING_value(db->db->data, userindex);
  85. 
  86.         if (pp[DB_srptype][0] != 'I') {
                  ^
  87.             print_entry(db, userindex, verbose, "User entry");
  88.             print_entry(db, get_index(db, pp[DB_srpgN], 'I'), verbose,

#449
apps/verify.c:107: error: Buffer Overrun L3
  Offset: [4, 17] Size: [5, 18] by call to `opt_help`.
  105.             goto end;
  106.         case OPT_HELP:
  107.             opt_help(verify_options);
                   ^
  108.             BIO_printf(bio_err, "\nRecognized certificate chain purposes:\n");
  109.             for (i = 0; i < X509_PURPOSE_get_count(); i++) {

#450
crypto/rsa/rsa_crpt.c:106: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  104.     ret = BN_mod_inverse(NULL, d, r0, ctx);
  105.  err:
  106.     BN_CTX_end(ctx);
           ^
  107.     return ret;
  108. }

#451
crypto/rsa/rsa_crpt.c:97: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  95.         goto err;
  96. 
  97.     if (!BN_sub(r1, p, BN_value_one()))
               ^
  98.         goto err;
  99.     if (!BN_sub(r2, q, BN_value_one()))

#452
crypto/x509/x509_req.c:88: error: Null Dereference
  pointer `xk` last assigned on line 87 could be null and is dereferenced by call to `EVP_PKEY_cmp()` at line 88, column 13.
  86. 
  87.     xk = X509_REQ_get_pubkey(x);
  88.     switch (EVP_PKEY_cmp(xk, k)) {
                  ^
  89.     case 1:
  90.         ok = 1;

#453
crypto/x509/x_crl.c:132: error: Integer Overflow L2
  ([0, 9223372036854775806] + 1):signed32.
  130.         exts = rev->extensions;
  131. 
  132.         for (j = 0; j < sk_X509_EXTENSION_num(exts); j++) {
                                                            ^
  133.             ext = sk_X509_EXTENSION_value(exts, j);
  134.             if (X509_EXTENSION_get_critical(ext)) {

#454
test/packettest.c:90: error: Integer Overflow L2
  ([0, +oo] - 251):unsigned64 by call to `PACKET_forward`.
  88.             || !TEST_true(PACKET_get_net_2(&pkt, &i))
  89.             || !TEST_uint_eq(i, 0x0204)
  90.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 4))
                      ^
  91.             || !TEST_true(PACKET_get_net_2(&pkt, &i))
  92.             || !TEST_uint_eq(i, 0xfcfe)

#455
crypto/asn1/tasn_enc.c:172: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
  170.         }
  171. 
  172.         seqlen = ASN1_object_size(ndef, seqcontlen, tag);
                        ^
  173.         if (!out || seqlen == -1)
  174.             return seqlen;

#456
crypto/bio/b_print.c:331: error: Dead Store
  The value written to &ch (type char) is never used.
  329.             case 'w':
  330.                 /* not supported yet, treat as next char */
  331.                 ch = *format++;
                       ^
  332.                 break;
  333.             default:

#457
crypto/bio/b_print.c:359: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64.
  357.     if (!doapr_outch(sbuffer, buffer, &currlen, maxlen, '\0'))
  358.         return 0;
  359.     *retlen = currlen - 1;
           ^
  360.     return 1;
  361. }

#458
crypto/pem/pem_lib.c:94: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `BIO_snprintf`.
  92.         p += n;
  93.         for (i = 0; i < len; i++) {
  94.             n = BIO_snprintf(p, j, "%02X", 0xff & str[i]);
                      ^
  95.             if (n <= 0)
  96.                 return;

#459
crypto/bn/bn_recp.c:134: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  132.     if (!BN_rshift(a, m, recp->num_bits))
  133.         goto err;
  134.     if (!BN_mul(b, a, &(recp->Nr), ctx))
                ^
  135.         goto err;
  136.     if (!BN_rshift(d, b, i - recp->num_bits))

#460
crypto/bn/bn_recp.c:140: error: Integer Overflow L2
  ([0, 5+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mul`.
  138.     d->neg = 0;
  139. 
  140.     if (!BN_mul(b, &(recp->N), d, ctx))
                ^
  141.         goto err;
  142.     if (!BN_usub(r, m, b))

#461
crypto/bn/bn_recp.c:152: error: Integer Overflow L2
  ([0, max(18446744073709551615, `rem->d`)] - [0, 1]):unsigned64 by call to `BN_usub`.
  150.             goto err;
  151.         }
  152.         if (!BN_usub(r, r, &(recp->N)))
                    ^
  153.             goto err;
  154.         if (!BN_add_word(d, 1))

#462
crypto/property/defn_cache.c:101: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `lh_PROPERTY_DEFN_ELEM_delete`.
   99.     if (pl == NULL) {
  100.         elem.prop = prop;
  101.         lh_PROPERTY_DEFN_ELEM_delete(property_defns, &elem);
               ^
  102.         return 1;
  103.     }

#463
test/asn1_dsa_internal_test.c:136: error: Buffer Overrun L2
  Offset: [0, 9] Size: 7 by call to `decode_der_dsa_sig`.
  134.     /* Negative tests */
  135.     pder = t_invalid_int_zero;
  136.     if (decode_der_dsa_sig(r, s, &pder, sizeof(t_invalid_int_zero)) != 0) {
               ^
  137.         TEST_info("asn1_dsa test_decode: Expected t_invalid_int_zero to fail");
  138.         goto fail;

#464
test/asn1_dsa_internal_test.c:136: error: Buffer Overrun L2
  Offset: [1, 7] (<= [0, 6] + 1) Size: 7 by call to `decode_der_dsa_sig`.
  134.     /* Negative tests */
  135.     pder = t_invalid_int_zero;
  136.     if (decode_der_dsa_sig(r, s, &pder, sizeof(t_invalid_int_zero)) != 0) {
               ^
  137.         TEST_info("asn1_dsa test_decode: Expected t_invalid_int_zero to fail");
  138.         goto fail;

#465
crypto/des/cfb64ede.c:101: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
   99.     iv = &(*ivec)[0];
  100.     c2l(iv, v0);
  101.     c2l(iv, v1);
           ^
  102.     if (enc) {
  103.         while (l >= n) {

#466
crypto/des/cfb64ede.c:129: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  127.                 l2c(v1, iv);
  128.                 l2c(d0, iv);
  129.                 l2c(d1, iv);
                       ^
  130.                 /* shift ovec left most of the bits... */
  131.                 memmove(ovec, ovec + num / 8, 8 + (num % 8 ? 1 : 0));

#467
crypto/des/cfb64ede.c:140: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  138.                 iv = &ovec[0];
  139.                 c2l(iv, v0);
  140.                 c2l(iv, v1);
                       ^
  141.             }
  142.         }

#468
crypto/des/cfb64ede.c:166: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  164.                 l2c(v1, iv);
  165.                 l2c(d0, iv);
  166.                 l2c(d1, iv);
                       ^
  167.                 /* shift ovec left most of the bits... */
  168.                 memmove(ovec, ovec + num / 8, 8 + (num % 8 ? 1 : 0));

#469
crypto/des/cfb64ede.c:177: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  175.                 iv = &ovec[0];
  176.                 c2l(iv, v0);
  177.                 c2l(iv, v1);
                       ^
  178.             }
  179.             d0 ^= ti[0];

#470
crypto/des/cfb64ede.c:187: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  185.     iv = &(*ivec)[0];
  186.     l2c(v0, iv);
  187.     l2c(v1, iv);
           ^
  188.     v0 = v1 = d0 = d1 = ti[0] = ti[1] = 0;
  189. }

#471
crypto/des/cfb64ede.c:188: error: Dead Store
  The value written to &v0 (type unsigned int) is never used.
  186.     l2c(v0, iv);
  187.     l2c(v1, iv);
  188.     v0 = v1 = d0 = d1 = ti[0] = ti[1] = 0;
           ^
  189. }

#472
crypto/des/des_enc.c:146: error: Dead Store
  The value written to &l (type unsigned int) is never used.
  144.     data[0] = ROTATE(l, 3) & 0xffffffffL;
  145.     data[1] = ROTATE(r, 3) & 0xffffffffL;
  146.     l = r = t = u = 0;
           ^
  147. }
  148. 

#473
apps/ecparam.c:113: error: Buffer Overrun L3
  Offset: [1, 11] Size: [2, 12] by call to `opt_help`.
  111.             goto end;
  112.         case OPT_HELP:
  113.             opt_help(ecparam_options);
                   ^
  114.             ret = 0;
  115.             goto end;

#474
apps/ecparam.c:449: error: Dead Store
  The value written to &i (type int) is never used.
  447.         assert(private);
  448.         if (outformat == FORMAT_ASN1)
  449.             i = i2d_ECPrivateKey_bio(out, eckey);
                   ^
  450.         else
  451.             i = PEM_write_bio_ECPrivateKey(out, eckey, NULL,

#475
apps/ecparam.c:451: error: Dead Store
  The value written to &i (type int) is never used.
  449.             i = i2d_ECPrivateKey_bio(out, eckey);
  450.         else
  451.             i = PEM_write_bio_ECPrivateKey(out, eckey, NULL,
                   ^
  452.                                            NULL, 0, NULL, NULL);
  453.         EC_KEY_free(eckey);

#476
apps/ecparam.c:283: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_GROUP_check_named_curve`.
  281.     if (check_named) {
  282.         BIO_printf(bio_err, "validating named elliptic curve parameters: ");
  283.         if (EC_GROUP_check_named_curve(group, 0, NULL) <= 0) {
                   ^
  284.             BIO_printf(bio_err, "failed\n");
  285.             ERR_print_errors(bio_err);

#477
apps/ecparam.c:293: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `EC_GROUP_check`.
  291.     if (check) {
  292.         BIO_printf(bio_err, "checking elliptic curve parameters: ");
  293.         if (!EC_GROUP_check(group, NULL)) {
                    ^
  294.             BIO_printf(bio_err, "failed\n");
  295.             ERR_print_errors(bio_err);

#478
crypto/whrlpool/wp_dgst.c:154: error: Dead Store
  The value written to &byteoff (type unsigned int) is never used.
  152. #ifndef OPENSSL_SMALL_FOOTPRINT
  153.             if (bitrem == inpgap) {
  154.                 c->data[byteoff++] |= inp[0] & (0xff >> inpgap);
                               ^
  155.                 inpgap = 8 - inpgap;
  156.                 bitoff += inpgap;

#479
crypto/ocsp/ocsp_prn.c:99: error: Integer Overflow L2
  ([-9223372036854775808, 9223372036854775807] + 1):signed64.
   97.         goto err;
   98.     l = ASN1_INTEGER_get(inf->version);
   99.     if (BIO_printf(bp, "    Version: %lu (0x%lx)", l + 1, l) <= 0)
               ^
  100.         goto err;
  101.     if (inf->requestorName != NULL) {

#480
crypto/bn/bn_mont.c:147: error: Integer Overflow L2
  ([0, 1] - [0, 1]):unsigned64.
  145.     ap = &(r->d[nl]);
  146. 
  147.     carry -= bn_sub_words(rp, ap, np, nl);
           ^
  148.     /*
  149.      * |carry| is -1 if |ap| - |np| underflowed or zero if it did not. Note

#481
crypto/ec/ecp_nist.c:118: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  116. 
  117.  err:
  118.     BN_CTX_end(ctx);
           ^
  119.     BN_CTX_free(new_ctx);
  120.     return ret;

#482
crypto/ec/ecp_nist.c:118: error: Integer Overflow L2
  ([0, 4+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  116. 
  117.  err:
  118.     BN_CTX_end(ctx);
           ^
  119.     BN_CTX_free(new_ctx);
  120.     return ret;

#483
crypto/srp/srp_lib.c:107: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  105.     if (!BN_mod_exp(gb, g, b, N, bn_ctx)
  106.         || (k = srp_Calc_k(N, g)) == NULL
  107.         || !BN_mod_mul(kv, v, k, N, bn_ctx)
                   ^
  108.         || !BN_mod_add(B, gb, kv, N, bn_ctx)) {
  109.         BN_free(B);

#484
crypto/srp/srp_lib.c:108: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_add`.
  106.         || (k = srp_Calc_k(N, g)) == NULL
  107.         || !BN_mod_mul(kv, v, k, N, bn_ctx)
  108.         || !BN_mod_add(B, gb, kv, N, bn_ctx)) {
                   ^
  109.         BN_free(B);
  110.         B = NULL;

#485
crypto/idea/i_cbc.c:118: error: Buffer Overrun L1
  Offset: 51 Size: 6.
  116. 
  117.     x4 &= 0xffff;
  118.     idea_mul(x4, x4, *p, ul);
           ^
  119. 
  120.     d[0] = (t0 & 0xffff) | ((x1 & 0xffff) << 16);

#486
crypto/idea/i_cbc.c:101: error: Integer Overflow L2
  ([-65535, 0] - `key->data[*][*]`):unsigned32.
   99.     p = &(key->data[0][0]);
  100. 
  101.     E_IDEA(0);
           ^
  102.     E_IDEA(1);
  103.     E_IDEA(2);

#487
crypto/idea/i_cbc.c:101: error: Integer Overflow L2
  ([-min(65535, `d`), 0] - `key->data[*][*]`):unsigned32.
   99.     p = &(key->data[0][0]);
  100. 
  101.     E_IDEA(0);
           ^
  102.     E_IDEA(1);
  103.     E_IDEA(2);

#488
ssl/statem/extensions_clnt.c:99: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
   97.                /* Sub-packet for SRP extension */
   98.             || !WPACKET_start_sub_packet_u16(pkt)
   99.             || !WPACKET_start_sub_packet_u8(pkt)
                       ^
  100.                /* login must not be zero...internal error if so */
  101.             || !WPACKET_set_flags(pkt, WPACKET_FLAGS_NON_ZERO_LENGTH)

#489
ssl/statem/extensions_clnt.c:102: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 5]):unsigned64 by call to `WPACKET_memcpy`.
  100.                /* login must not be zero...internal error if so */
  101.             || !WPACKET_set_flags(pkt, WPACKET_FLAGS_NON_ZERO_LENGTH)
  102.             || !WPACKET_memcpy(pkt, s->srp_ctx.login,
                       ^
  103.                                strlen(s->srp_ctx.login))
  104.             || !WPACKET_close(pkt)

#490
test/tls13ccstest.c:126: error: Integer Overflow L2
  ([0, +oo] - 34):unsigned64 by call to `PACKET_forward`.
  124.                  * session_id.
  125.                  */
  126.                 if (!PACKET_forward(&msgbody, 34)
                            ^
  127.                         || !PACKET_get_length_prefixed_1(&msgbody, &sessionid))
  128.                     return 0;

#491
crypto/bn/bn_lib.c:98: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
   96.     x = l >> 32;
   97.     mask = (0 - x) & BN_MASK2;
   98.     mask = (0 - (mask >> (BN_BITS2 - 1)));
           ^
   99.     bits += 32 & mask;
  100.     l ^= (x ^ l) & mask;

#492
crypto/evp/e_aes_cbc_hmac_sha256.c:118: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `SHA256_Update`.
  116. 
  117.     if (res)
  118.         SHA256_Update(c, ptr, res);
               ^
  119. }
  120. 

#493
crypto/sm2/sm2_crypt.c:101: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
   99. 
  100.     /* Integer and string are simple type; set constructed = 0, means primitive and definite length encoding. */
  101.     sz = 2 * ASN1_object_size(0, field_size + 1, V_ASN1_INTEGER)
                    ^
  102.          + ASN1_object_size(0, md_size, V_ASN1_OCTET_STRING)
  103.          + ASN1_object_size(0, msg_len, V_ASN1_OCTET_STRING);

#494
crypto/sm2/sm2_crypt.c:102: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
  100.     /* Integer and string are simple type; set constructed = 0, means primitive and definite length encoding. */
  101.     sz = 2 * ASN1_object_size(0, field_size + 1, V_ASN1_INTEGER)
  102.          + ASN1_object_size(0, md_size, V_ASN1_OCTET_STRING)
                  ^
  103.          + ASN1_object_size(0, msg_len, V_ASN1_OCTET_STRING);
  104.     /* Sequence is structured type; set constructed = 1, means constructed and definite length encoding. */

#495
crypto/sm2/sm2_crypt.c:105: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
  103.          + ASN1_object_size(0, msg_len, V_ASN1_OCTET_STRING);
  104.     /* Sequence is structured type; set constructed = 1, means constructed and definite length encoding. */
  105.     *ct_size = ASN1_object_size(1, sz, V_ASN1_SEQUENCE);
                      ^
  106. 
  107.     return 1;

#496
providers/implementations/ciphers/ciphercommon_gcm_hw.c:93: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo] by call to `CRYPTO_gcm128_tag`.
  91. {
  92.     if (ctx->enc) {
  93.         CRYPTO_gcm128_tag(&ctx->gcm, tag, GCM_TAG_MAX_SIZE);
              ^
  94.         ctx->taglen = GCM_TAG_MAX_SIZE;
  95.     } else {

#497
test/asynctest.c:96: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `ASYNC_init_thread`.
  94.     ASYNC_WAIT_CTX *waitctx = NULL;
  95. 
  96.     if (       !ASYNC_init_thread(2, 0)
                      ^
  97.             || (waitctx = ASYNC_WAIT_CTX_new()) == NULL
  98.             || ASYNC_start_job(&job1, waitctx, &funcret1, only_pause, NULL, 0)

#498
test/ct_test.c:100: error: Null Dereference
  pointer `cert_io` last assigned on line 96 could be null and is dereferenced by call to `BIO_free()` at line 100, column 9.
   98.         if (cert_io != NULL)
   99.             cert = PEM_read_bio_X509(cert_io, NULL, NULL, NULL);
  100.         BIO_free(cert_io);
               ^
  101.     }
  102. 

#499
test/servername_test.c:134: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  132.     OPENSSL_free(hostname);
  133.     SSL_free(con);
  134.     SSL_CTX_free(ctx);
           ^
  135.     return ret;
  136. }

#500
test/servername_test.c:133: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  131. end:
  132.     OPENSSL_free(hostname);
  133.     SSL_free(con);
           ^
  134.     SSL_CTX_free(ctx);
  135.     return ret;

#501
test/servername_test.c:133: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  131. end:
  132.     OPENSSL_free(hostname);
  133.     SSL_free(con);
           ^
  134.     SSL_CTX_free(ctx);
  135.     return ret;

#502
apps/dgst.c:124: error: Buffer Overrun L3
  Offset: [0, 16] Size: [1, 17] by call to `opt_help`.
  122.             goto end;
  123.         case OPT_HELP:
  124.             opt_help(dgst_options);
                   ^
  125.             ret = 0;
  126.             goto end;

#503
crypto/des/fcrypt.c:129: error: Dead Store
  The value written to &b (type unsigned char*) is never used.
  127.     l2c(ll, b);
  128.     ll = out[1];
  129.     l2c(ll, b);
           ^
  130.     y = 0;
  131.     u = 0x80;

#504
apps/ciphers.c:121: error: Buffer Overrun L3
  Offset: [1, 12] Size: [2, 13] by call to `opt_help`.
  119.             goto end;
  120.         case OPT_HELP:
  121.             opt_help(ciphers_options);
                   ^
  122.             ret = 0;
  123.             goto end;

#505
apps/ciphers.c:273: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_CTX_free`.
  271.     if (use_supported)
  272.         sk_SSL_CIPHER_free(sk);
  273.     SSL_CTX_free(ctx);
           ^
  274.     SSL_free(ssl);
  275.     return ret;

#506
ssl/bio_ssl.c:94: error: Dead Store
  The value written to &ret (type int) is never used.
  92. static int ssl_read(BIO *b, char *buf, size_t size, size_t *readbytes)
  93. {
  94.     int ret = 1;
          ^
  95.     BIO_SSL *sb;
  96.     SSL *ssl;

#507
test/handshake_helper.c:103: error: Null Dereference
  pointer `ex_data` last assigned on line 95 could be null and is dereferenced at line 103, column 13.
  101.                 ex_data->num_fatal_alerts_sent++;
  102.         } else {
  103.             ex_data->alert_received = ret;
                   ^
  104.         }
  105.     }

#508
test/handshake_helper.c:98: error: Null Dereference
  pointer `ex_data` last assigned on line 95 could be null and is dereferenced at line 98, column 13.
   96.             (HANDSHAKE_EX_DATA*)(SSL_get_ex_data(s, ex_data_idx));
   97.         if (where & SSL_CB_WRITE) {
   98.             ex_data->alert_sent = ret;
                   ^
   99.             if (strcmp(SSL_alert_type_string(ret), "F") == 0
  100.                 || strcmp(SSL_alert_desc_string(ret), "CN") == 0)

#509
test/verify_extra_test.c:137: error: Null Dereference
  pointer `bio` last assigned on line 98 could be null and is dereferenced by call to `BIO_free()` at line 137, column 5.
  135.     X509_STORE_CTX_free(sctx);
  136.     X509_free(x);
  137.     BIO_free(bio);
           ^
  138.     sk_X509_pop_free(untrusted, X509_free);
  139.     X509_STORE_free(store);

#510
crypto/bn/bn_blind.c:113: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_mul_mont_fixed_top`.
  111.         if (b->m_ctx != NULL) {
  112.             if (!bn_mul_mont_fixed_top(b->Ai, b->Ai, b->Ai, b->m_ctx, ctx)
  113.                 || !bn_mul_mont_fixed_top(b->A, b->A, b->A, b->m_ctx, ctx))
                           ^
  114.                 goto err;
  115.         } else {

#511
crypto/bn/bn_blind.c:117: error: Integer Overflow L2
  ([0, 5+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_mul`.
  115.         } else {
  116.             if (!BN_mod_mul(b->Ai, b->Ai, b->Ai, b->mod, ctx)
  117.                 || !BN_mod_mul(b->A, b->A, b->A, b->mod, ctx))
                           ^
  118.                 goto err;
  119.         }

#512
crypto/asn1/a_d2i_fp.c:193: error: Integer Overflow L2
  ([1, 2147483647] - [1, 2147483647]):unsigned64.
  191.                         goto err;
  192.                     }
  193.                     want -= chunk;
                           ^
  194.                     while (chunk > 0) {
  195.                         i = BIO_read(in, &(b->data[len]), chunk);

#513
crypto/pem/pem_pkey.c:115: error: Null Dereference
  pointer `ctx` last assigned on line 100 could be null and is dereferenced by call to `ossl_store_detach_pem_bio()` at line 115, column 5.
  113. 
  114.  err:
  115.     ossl_store_detach_pem_bio(ctx);
           ^
  116.     OSSL_STORE_INFO_free(info);
  117.     return ret;

#514
crypto/engine/eng_init.c:97: error: Dead Store
  The value written to &to_return (type int) is never used.
  95. int ENGINE_finish(ENGINE *e)
  96. {
  97.     int to_return = 1;
          ^
  98. 
  99.     if (e == NULL)

#515
crypto/evp/e_aes_cbc_hmac_sha1.c:123: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `SHA1_Update`.
  121. 
  122.     if (res)
  123.         SHA1_Update(c, ptr, res);
               ^
  124. }
  125. 

#516
providers/implementations/macs/gmac_prov.c:103: error: Integer Overflow L1
  (2147483647 + 7):signed32 by call to `EVP_EncryptUpdate`.
  101. 
  102.     while (datalen > INT_MAX) {
  103.         if (!EVP_EncryptUpdate(ctx, NULL, &outlen, data, INT_MAX))
                    ^
  104.             return 0;
  105.         data += INT_MAX;

#517
test/ecdsatest.c:137: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: [49, 144] by call to `BN_hex2bn`.
  135.         || !TEST_ptr(r = BN_new())
  136.         || !TEST_ptr(s = BN_new())
  137.         || !TEST_true(BN_hex2bn(&r, r_in))
                   ^
  138.         || !TEST_true(BN_hex2bn(&s, s_in))
  139.         /* swap the RNG source */

#518
test/ecdsatest.c:137: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: [49, 144] by call to `BN_hex2bn`.
  135.         || !TEST_ptr(r = BN_new())
  136.         || !TEST_ptr(s = BN_new())
  137.         || !TEST_true(BN_hex2bn(&r, r_in))
                   ^
  138.         || !TEST_true(BN_hex2bn(&s, s_in))
  139.         /* swap the RNG source */

#519
test/ecdsatest.c:164: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_eq`.
  162.     /* compare the created signature with the expected signature */
  163.     ECDSA_SIG_get0(signature, &sig_r, &sig_s);
  164.     if (!TEST_BN_eq(sig_r, r)
                ^
  165.         || !TEST_BN_eq(sig_s, s))
  166.         goto err;

#520
apps/passwd.c:122: error: Buffer Overrun L3
  Offset: [1, 9] Size: [2, 10] by call to `opt_help`.
  120.             goto end;
  121.         case OPT_HELP:
  122.             opt_help(passwd_options);
                   ^
  123.             ret = 0;
  124.             goto end;

#521
apps/passwd.c:193: error: Dead Store
  The value written to &argc (type int) is never used.
  191.         }
  192.     }
  193.     argc = opt_num_rest();
           ^
  194.     argv = opt_rest();
  195. 

#522
apps/passwd.c:199: error: Dead Store
  The value written to &pw_source_defined (type int) is never used.
  197.         if (pw_source_defined)
  198.             goto opthelp;
  199.         pw_source_defined = 1;
               ^
  200.         passwds = argv;
  201.     }

#523
crypto/bio/bf_null.c:98: error: Dead Store
  The value written to &ret (type long) is never used.
   96. static long nullf_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
   97. {
   98.     long ret = 1;
           ^
   99. 
  100.     if (b->next_bio == NULL)

#524
test/params_test.c:103: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 125 by call to `BN_hex2bn`.
  101.     obj->p1 = p1_init;
  102.     obj->p2 = p2_init;
  103.     if (!TEST_true(BN_hex2bn(&obj->p3, p3_init)))
                ^
  104.         goto fail;
  105.     if (!TEST_ptr(obj->p4 = OPENSSL_strdup(p4_init)))

#525
test/params_test.c:103: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 125 by call to `BN_hex2bn`.
  101.     obj->p1 = p1_init;
  102.     obj->p2 = p2_init;
  103.     if (!TEST_true(BN_hex2bn(&obj->p3, p3_init)))
                ^
  104.         goto fail;
  105.     if (!TEST_ptr(obj->p4 = OPENSSL_strdup(p4_init)))

#526
apps/pkeyutl.c:132: error: Buffer Overrun L3
  Offset: [2, 14] Size: [3, 15] by call to `opt_help`.
  130.             goto end;
  131.         case OPT_HELP:
  132.             opt_help(pkeyutl_options);
                   ^
  133.             ret = 0;
  134.             goto end;

#527
apps/pkeyutl.c:111: error: Dead Store
  The value written to &rv (type int) is never used.
  109.     int keysize = -1, pkey_op = EVP_PKEY_OP_SIGN, key_type = KEY_PRIVKEY;
  110.     int engine_impl = 0;
  111.     int ret = 1, rv = -1;
           ^
  112.     size_t buf_outlen;
  113.     const char *inkey = NULL;

#528
crypto/bn/bn_word.c:121: error: Integer Overflow L2
  ([0, max(18446744073709551615, `a->d`)] + [1, 18446744073709551615]):unsigned64.
  119.     }
  120.     for (i = 0; w != 0 && i < a->top; i++) {
  121.         a->d[i] = l = (a->d[i] + w) & BN_MASK2;
                         ^
  122.         w = (w > l) ? 1 : 0;
  123.     }

#529
crypto/core_namemap.c:108: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ossl_namemap_free`.
  106.         return namemap;
  107. 
  108.     ossl_namemap_free(namemap);
           ^
  109.     return NULL;
  110. }

#530
crypto/x509/v3_genn.c:101: error: Dead Store
  The value written to &result (type int) is never used.
   99. int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)
  100. {
  101.     int result = -1;
           ^
  102. 
  103.     if (!a || !b)

#531
test/packettest.c:107: error: Integer Overflow L2
  ([0, +oo] - 249):unsigned64 by call to `PACKET_forward`.
  105.             || !TEST_true(PACKET_get_net_3(&pkt, &i))
  106.             || !TEST_ulong_eq(i, 0x020406UL)
  107.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 6))
                       ^
  108.             || !TEST_true(PACKET_get_net_3(&pkt, &i))
  109.             || !TEST_ulong_eq(i, 0xfafcfeUL)

#532
crypto/ec/curve448/eddsa.c:130: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `curve448_scalar_halve`.
  128.      */
  129.     for (c = 1; c < C448_EDDSA_ENCODE_RATIO; c <<= 1)
  130.         curve448_scalar_halve(secret_scalar, secret_scalar);
               ^
  131. 
  132.     curve448_precomputed_scalarmul(p, curve448_precomputed_base, secret_scalar);

#533
crypto/bf/bf_enc.c:128: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  126.         }
  127.         if (l != -8) {
  128.             n2ln(in, tin0, tin1, l + 8);
                   ^
  129.             tin0 ^= tout0;
  130.             tin1 ^= tout1;

#534
crypto/bf/bf_enc.c:160: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  158.         if (l != -8) {
  159.             n2l(in, tin0);
  160.             n2l(in, tin1);
                   ^
  161.             tin[0] = tin0;
  162.             tin[1] = tin1;

#535
crypto/bf/bf_enc.c:140: error: Dead Store
  The value written to &ivec (type unsigned char*) is never used.
  138.         }
  139.         l2n(tout0, ivec);
  140.         l2n(tout1, ivec);
               ^
  141.     } else {
  142.         n2l(ivec, xor0);

#536
crypto/bf/bf_enc.c:171: error: Dead Store
  The value written to &ivec (type unsigned char*) is never used.
  169.         }
  170.         l2n(xor0, ivec);
  171.         l2n(xor1, ivec);
               ^
  172.     }
  173.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;

#537
crypto/bf/bf_enc.c:137: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  135.             tout1 = tin[1];
  136.             l2n(tout0, out);
  137.             l2n(tout1, out);
                   ^
  138.         }
  139.         l2n(tout0, ivec);

#538
crypto/bf/bf_enc.c:166: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  164.             tout0 = tin[0] ^ xor0;
  165.             tout1 = tin[1] ^ xor1;
  166.             l2nn(tout0, tout1, out, l + 8);
                   ^
  167.             xor0 = tin0;
  168.             xor1 = tin1;

#539
crypto/bf/bf_enc.c:173: error: Dead Store
  The value written to &tin0 (type unsigned int) is never used.
  171.         l2n(xor1, ivec);
  172.     }
  173.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;
           ^
  174.     tin[0] = tin[1] = 0;
  175. }

#540
apps/enc.c:158: error: Buffer Overrun L3
  Offset: [0, 9] Size: [1, 10] by call to `opt_help`.
  156.             goto end;
  157.         case OPT_HELP:
  158.             opt_help(enc_options);
                   ^
  159.             ret = 0;
  160.             goto end;

#541
apps/enc.c:575: error: Uninitialized Value
  The value read from salt[_] was never initialized.
  573.                 printf("salt=");
  574.                 for (i = 0; i < (int)sizeof(salt); i++)
  575.                     printf("%02X", salt[i]);
                           ^
  576.                 printf("\n");
  577.             }

#542
crypto/params_from_text.c:135: error: Integer Overflow L2
  ([0, `buf_n`] - 1):unsigned64.
  133.                 size_t i = buf_n;
  134. 
  135.                 for (cp = buf; i-- > 0; cp++)
                                      ^
  136.                     *cp ^= 0xFF;
  137.             }

#543
crypto/ui/ui_util.c:112: error: Null Dereference
  pointer `data` last assigned on line 109 could be null and is dereferenced at line 112, column 23.
  110.                 UI_method_get_ex_data(UI_get_method(ui), ui_method_data_index);
  111.             int maxsize = UI_get_result_maxsize(uis);
  112.             int len = data->cb(result,
                             ^
  113.                                maxsize > PEM_BUFSIZE ? PEM_BUFSIZE : maxsize,
  114.                                data->rwflag, UI_get0_user_data(ui));

#544
crypto/async/async.c:114: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `ASYNC_init_thread`.
  112.          * no max size and no pre-created jobs
  113.          */
  114.         if (ASYNC_init_thread(0, 0) == 0)
                   ^
  115.             return NULL;
  116.         pool = (async_pool *)CRYPTO_THREAD_get_local(&poolkey);

#545
crypto/bn/bn_shift.c:124: error: Integer Overflow L2
  (0 - [0, 63]):unsigned64.
  122.         rb = BN_BITS2 - lb;
  123.         rb %= BN_BITS2;            /* say no to undefined behaviour */
  124.         rmask = (BN_ULONG)0 - rb;  /* rmask = 0 - (rb != 0) */
               ^
  125.         rmask |= rmask >> 8;
  126.         f = &(a->d[0]);

#546
crypto/asn1/bio_ndef.c:124: error: Dead Store
  The value written to &derlen (type int) is never used.
  122.     ndef_aux->derbuf = p;
  123.     *pbuf = p;
  124.     derlen = ASN1_item_ndef_i2d(ndef_aux->val, &p, ndef_aux->it);
           ^
  125. 
  126.     if (*ndef_aux->boundary == NULL)

#547
crypto/asn1_dsa.c:125: error: Integer Overflow L2
  ([0, +oo] - [0, `pkt->written` + 4]):unsigned64 by call to `encode_der_integer`.
  123. 
  124.     /* Calculate the content length */
  125.     if (!encode_der_integer(dummypkt, r)
                ^
  126.             || !encode_der_integer(dummypkt, s)
  127.             || !WPACKET_get_length(dummypkt, &cont_len)

#548
crypto/evp/bio_enc.c:162: error: Buffer Overrun L1
  Offset: [-oo, -1] Size: 32 by call to `EVP_CipherFinal_ex`.
  160.             if (!BIO_should_retry(next)) {
  161.                 ctx->cont = i;
  162.                 i = EVP_CipherFinal_ex(ctx->cipher,
                           ^
  163.                                        ctx->buf, &(ctx->buf_len));
  164.                 ctx->ok = i;

#549
crypto/evp/bio_enc.c:162: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned32 by call to `EVP_CipherFinal_ex`.
  160.             if (!BIO_should_retry(next)) {
  161.                 ctx->cont = i;
  162.                 i = EVP_CipherFinal_ex(ctx->cipher,
                           ^
  163.                                        ctx->buf, &(ctx->buf_len));
  164.                 ctx->ok = i;

#550
crypto/evp/bio_enc.c:179: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  177.                 int j = outl - blocksize, buf_len;
  178. 
  179.                 if (!EVP_CipherUpdate(ctx->cipher,
                            ^
  180.                                       (unsigned char *)out, &buf_len,
  181.                                       ctx->read_start, i > j ? j : i)) {

#551
crypto/evp/bio_enc.c:197: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  195.             if (i > ENC_MIN_CHUNK)
  196.                 i = ENC_MIN_CHUNK;
  197.             if (!EVP_CipherUpdate(ctx->cipher,
                        ^
  198.                                   ctx->buf, &ctx->buf_len,
  199.                                   ctx->read_start, i)) {

#552
crypto/evp/evp_lib.c:148: error: Dead Store
  The value written to &derl (type int) is never used.
  146.         OSSL_PARAM params[3], *p = params;
  147.         unsigned char *der = NULL;
  148.         int derl = -1;
               ^
  149. 
  150.         if ((derl = i2d_ASN1_TYPE(type, &der)) >= 0) {

#553
test/property_test.c:116: error: Buffer Overrun L3
  Offset: [2, +oo] (<= [1, +oo] + 1) Size: [1, 16] by call to `ossl_parse_query`.
  114.                               NULL)
  115.         && TEST_ptr(p = ossl_parse_property(NULL, parser_tests[n].defn))
  116.         && TEST_ptr(q = ossl_parse_query(NULL, parser_tests[n].query))
                  ^
  117.         && TEST_int_eq(ossl_property_match_count(q, p), parser_tests[n].e))
  118.         r = 1;

#554
test/property_test.c:116: error: Buffer Overrun L3
  Offset: [2, +oo] Size: [1, 16] by call to `ossl_parse_query`.
  114.                               NULL)
  115.         && TEST_ptr(p = ossl_parse_property(NULL, parser_tests[n].defn))
  116.         && TEST_ptr(q = ossl_parse_query(NULL, parser_tests[n].query))
                  ^
  117.         && TEST_int_eq(ossl_property_match_count(q, p), parser_tests[n].e))
  118.         r = 1;

#555
test/ct_test.c:118: error: Null Dereference
  pointer `file_io` last assigned on line 114 could be null and is dereferenced by call to `BIO_free()` at line 118, column 9.
  116.         if (file_io != NULL)
  117.             len = BIO_read(file_io, buffer, buffer_length);
  118.         BIO_free(file_io);
               ^
  119.     }
  120. 

#556
crypto/dh/dh_check.c:133: error: Integer Overflow L2
  (0 - [0, max(1, `dh->g->top`)]):unsigned64 by call to `BN_mod_exp`.
  131.         else {
  132.             /* Check g^q == 1 mod p */
  133.             if (!BN_mod_exp(t1, dh->g, dh->q, dh->p, ctx))
                        ^
  134.                 goto err;
  135.             if (!BN_is_one(t1))

#557
crypto/dh/dh_check.c:168: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  166.     ok = 1;
  167.  err:
  168.     BN_CTX_end(ctx);
           ^
  169.     BN_CTX_free(ctx);
  170.     return ok;

#558
crypto/ct/ct_sct_ctx.c:114: error: Dead Store
  The value written to &idx (type int) is never used.
  112.     X509 *pretmp = NULL;
  113.     int certderlen = 0, prederlen = 0;
  114.     int idx = -1;
           ^
  115.     int poison_ext_is_dup, sct_ext_is_dup;
  116.     int poison_idx = ct_x509_get_ext(cert, NID_ct_precert_poison, &poison_ext_is_dup);

#559
crypto/bn/asm/x86_64-gcc.c:132: error: Dead Store
  The value written to &num (type int) is never used.
  130.             return c1;
  131.         mul_add(rp[1], ap[1], w, c1);
  132.         if (--num == 0)
                   ^
  133.             return c1;
  134.         mul_add(rp[2], ap[2], w, c1);

#560
crypto/rsa/rsa_crpt.c:162: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  160. 
  161.  err:
  162.     BN_CTX_end(ctx);
           ^
  163.     if (ctx != in_ctx)
  164.         BN_CTX_free(ctx);

#561
crypto/sm2/sm2_crypt.c:194: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `BN_bn2binpad`.
  192.     }
  193. 
  194.     if (BN_bn2binpad(x2, x2y2, field_size) < 0
               ^
  195.             || BN_bn2binpad(y2, x2y2 + field_size, field_size) < 0) {
  196.         SM2err(SM2_F_SM2_ENCRYPT, ERR_R_INTERNAL_ERROR);

#562
crypto/sm2/sm2_crypt.c:186: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  184.     }
  185. 
  186.     if (!EC_POINT_mul(group, kG, k, NULL, NULL, ctx)
                ^
  187.             || !EC_POINT_get_affine_coordinates(group, kG, x1, y1, ctx)
  188.             || !EC_POINT_mul(group, kP, NULL, P, k, ctx)

#563
crypto/sm2/sm2_crypt.c:181: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range`.
  179.     memset(ciphertext_buf, 0, *ciphertext_len);
  180. 
  181.     if (!BN_priv_rand_range(k, order)) {
                ^
  182.         SM2err(SM2_F_SM2_ENCRYPT, ERR_R_INTERNAL_ERROR);
  183.         goto done;

#564
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:242: error: Buffer Overrun L2
  Offset: [1, 57] Size: 16 by call to `Poly1305_Final`.
  240.     Poly1305_Update(poly, tohash, tohash_len);
  241.     OPENSSL_cleanse(buf, buf_len);
  242.     Poly1305_Final(poly, bctx->enc ? ctx->tag : tohash);
           ^
  243. 
  244.     ctx->tls_payload_length = NO_TLS_PAYLOAD_LENGTH;

#565
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:214: error: Buffer Overrun L3
  Offset added: [-13, 15] Size: 1024 by call to `Poly1305_Update`.
  212.         out += plen;
  213.         tail = (0 - plen) & (POLY1305_BLOCK_SIZE - 1);
  214.         Poly1305_Update(poly, zero, tail);
               ^
  215.     }
  216. 

#566
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:213: error: Integer Overflow L1
  (0 - [max(65, `bctx->tls_payload_length`), `bctx->tls_payload_length`]):unsigned64.
  211.         in += plen;
  212.         out += plen;
  213.         tail = (0 - plen) & (POLY1305_BLOCK_SIZE - 1);
               ^
  214.         Poly1305_Update(poly, zero, tail);
  215.     }

#567
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:184: error: Integer Overflow L2
  (0 - [max(0, `bctx->tls_payload_length`), 64]):unsigned64.
  182.         out += i;
  183. 
  184.         tail = (0 - i) & (POLY1305_BLOCK_SIZE - 1);
               ^
  185.         memset(ctr + i, 0, tail);
  186.         ctr += i + tail;

#568
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:240: error: Integer Overflow L2
  (16 - [1, 43]):unsigned64 by call to `Poly1305_Update`.
  238.     tohash_len += POLY1305_BLOCK_SIZE;
  239. 
  240.     Poly1305_Update(poly, tohash, tohash_len);
           ^
  241.     OPENSSL_cleanse(buf, buf_len);
  242.     Poly1305_Final(poly, bctx->enc ? ctx->tag : tohash);

#569
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:214: error: Integer Overflow L2
  ([-15, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  212.         out += plen;
  213.         tail = (0 - plen) & (POLY1305_BLOCK_SIZE - 1);
  214.         Poly1305_Update(poly, zero, tail);
               ^
  215.     }
  216. 

#570
apps/s_time.c:141: error: Buffer Overrun L3
  Offset: [3, 12] Size: [4, 13] by call to `opt_help`.
  139.             goto end;
  140.         case OPT_HELP:
  141.             opt_help(s_time_options);
                   ^
  142.             ret = 0;
  143.             goto end;

#571
apps/s_time.c:308: error: Dead Store
  The value written to &i (type int) is never used.
  306.     totalTime += tm_Time_F(STOP); /* Add the time for this iteration */
  307. 
  308.     i = (int)((long)time(NULL) - finishtime + maxtime);
           ^
  309.     printf
  310.         ("\n\n%d connections in %.2fs; %.2f connections/user sec, bytes read %ld\n",

#572
apps/s_time.c:396: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  394.  end:
  395.     SSL_free(scon);
  396.     SSL_CTX_free(ctx);
           ^
  397.     return ret;
  398. }

#573
apps/s_time.c:395: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  393. 
  394.  end:
  395.     SSL_free(scon);
           ^
  396.     SSL_CTX_free(ctx);
  397.     return ret;

#574
apps/s_time.c:395: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  393. 
  394.  end:
  395.     SSL_free(scon);
           ^
  396.     SSL_CTX_free(ctx);
  397.     return ret;

#575
ssl/statem/statem_dtls.c:296: error: Integer Overflow L2
  ([0, +oo] - 12):unsigned64.
  294.                 } else {
  295.                     p += DTLS1_HM_HEADER_LENGTH;
  296.                     xlen = written - DTLS1_HM_HEADER_LENGTH;
                           ^
  297.                 }
  298. 

#576
crypto/rand/drbg_hash.c:135: error: Integer Overflow L2
  ([0, max(255, `dst`)] + 1):unsigned8.
  133.         /* Add the carry to the top of the dst if inlen is not the same size */
  134.         for (i = drbg->seedlen - inlen; i > 0; --i, d--) {
  135.             *d += 1;     /* Carry can only be 1 */
                   ^
  136.             if (*d != 0) /* exit if carry doesnt propagate to the next byte */
  137.                 break;

#577
test/constant_time_test.c:117: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `constant_time_is_zero`.
  115.     unsigned int a = test_values[i];
  116. 
  117.     if (a == 0 && !TEST_uint_eq(constant_time_is_zero(a), CONSTTIME_TRUE))
                          ^
  118.         return 0;
  119.     if (a != 0 && !TEST_uint_eq(constant_time_is_zero(a), CONSTTIME_FALSE))

#578
test/handshake_helper.c:121: error: Null Dereference
  pointer `ex_data` last assigned on line 117 could be null and is dereferenced at line 121, column 9.
  119. 
  120.     if (servername == NULL) {
  121.         ex_data->servername = SSL_TEST_SERVERNAME_SERVER1;
               ^
  122.         return SSL_TLSEXT_ERR_NOACK;
  123.     }

#579
test/handshake_helper.c:136: error: Null Dereference
  pointer `ex_data` last assigned on line 117 could be null and is dereferenced at line 136, column 9.
  134.         SSL_set_options(s, SSL_CTX_get_options(new_ctx));
  135. 
  136.         ex_data->servername = SSL_TEST_SERVERNAME_SERVER2;
               ^
  137.         return SSL_TLSEXT_ERR_OK;
  138.     } else if (strcmp(servername, "server1") == 0) {

#580
test/handshake_helper.c:139: error: Null Dereference
  pointer `ex_data` last assigned on line 117 could be null and is dereferenced at line 139, column 9.
  137.         return SSL_TLSEXT_ERR_OK;
  138.     } else if (strcmp(servername, "server1") == 0) {
  139.         ex_data->servername = SSL_TEST_SERVERNAME_SERVER1;
               ^
  140.         return SSL_TLSEXT_ERR_OK;
  141.     } else if (ignore) {

#581
test/handshake_helper.c:142: error: Null Dereference
  pointer `ex_data` last assigned on line 117 could be null and is dereferenced at line 142, column 9.
  140.         return SSL_TLSEXT_ERR_OK;
  141.     } else if (ignore) {
  142.         ex_data->servername = SSL_TEST_SERVERNAME_SERVER1;
               ^
  143.         return SSL_TLSEXT_ERR_NOACK;
  144.     } else {

#582
test/bad_dtls_test.c:134: error: Integer Overflow L2
  ([2, +oo] - 10):unsigned64 by call to `PACKET_forward`.
  132.         return 0;
  133.     /* Skip the rest of the record header */
  134.     if (!PACKET_forward(&pkt, DTLS1_RT_HEADER_LENGTH - 3))
                ^
  135.         return 0;
  136. 

#583
test/bad_dtls_test.c:141: error: Integer Overflow L2
  ([2, +oo] - 11):unsigned64 by call to `PACKET_forward`.
  139.         return 0;
  140.     /* Skip the rest of the handshake message header */
  141.     if (!PACKET_forward(&pkt, DTLS1_HM_HEADER_LENGTH - 1))
                ^
  142.         return 0;
  143. 

#584
test/bad_dtls_test.c:149: error: Integer Overflow L2
  ([2, +oo] - 32):unsigned64 by call to `PACKET_copy_bytes`.
  147. 
  148.     /* Store random */
  149.     if (!PACKET_copy_bytes(&pkt, client_random, SSL3_RANDOM_SIZE))
                ^
  150.         return 0;
  151. 

#585
ssl/statem/extensions_clnt.c:149: error: Buffer Overrun L2
  Offset: [0, max(10, `s->ext.supportedgroups_len`)] (<= [0, 1] + [0, -1+max(10, `s->ext.supportedgroups_len`)]) Size: 2.
  147.     tls1_get_supported_groups(s, &pgroups, &num_groups);
  148.     for (j = 0; j < num_groups; j++) {
  149.         uint16_t ctmp = pgroups[j];
                               ^
  150. 
  151.         if (tls_valid_group(s, ctmp, max_version)

#586
test/packettest.c:124: error: Integer Overflow L2
  ([0, +oo] - 247):unsigned64 by call to `PACKET_forward`.
  122.             || !TEST_true(PACKET_get_net_4(&pkt, &i))
  123.             || !TEST_ulong_eq(i, 0x02040608UL)
  124.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 8))
                       ^
  125.             || !TEST_true(PACKET_get_net_4(&pkt, &i))
  126.             || !TEST_ulong_eq(i, 0xf8fafcfeUL)

#587
test/ssltestlib.c:121: error: Null Dereference
  pointer `next` last assigned on line 119 could be null and is dereferenced by call to `BIO_test_flags()` at line 121, column 13.
  119.     BIO *next = BIO_next(bio);
  120. 
  121.     flags = BIO_test_flags(next, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_RWS);
                   ^
  122.     BIO_clear_flags(bio, BIO_FLAGS_SHOULD_RETRY | BIO_FLAGS_RWS);
  123.     BIO_set_flags(bio, flags);

#588
providers/implementations/kdfs/x942kdf.c:133: error: Buffer Overrun L3
  Offset: [1, 54] Size: [2, 55] by call to `OBJ_dup`.
  131.     /* set the KeySpecificInfo - which contains an algorithm oid and counter */
  132.     ksi = X509_ALGOR_new();
  133.     alg_oid = OBJ_dup(OBJ_nid2obj(nid));
                     ^
  134.     ctr_oct = ASN1_OCTET_STRING_new();
  135.     if (ksi == NULL

#589
crypto/pem/pem_pkey.c:125: error: Null Dereference
  pointer `ctx` last assigned on line 123 could be null and is dereferenced by call to `OSSL_SERIALIZER_to_bio()` at line 125, column 5.
  123.     IMPLEMENT_PEM_provided_write_body_vars(EVP_PKEY, Parameters);
  124. 
  125.     IMPLEMENT_PEM_provided_write_body_main(EVP_PKEY, bio);
           ^
  126. 
  127.  legacy:

#590
providers/fips/fipsprov.c:187: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  185.     ret = 1;
  186.  err:
  187.     BN_CTX_end(bnctx);
           ^
  188.     BN_CTX_free(bnctx);
  189. 

#591
providers/fips/fipsprov.c:165: error: Integer Overflow L2
  ([0, 1] - [0, 1]):unsigned64 by call to `BN_add`.
  163.     BN_zero(a);
  164.     if (!BN_one(b)
  165.         || !BN_add(a, a, b)
                   ^
  166.         || BN_cmp(a, b) != 0)
  167.         goto err;

#592
crypto/bn/bn_prime.c:205: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  203.  err:
  204.     OPENSSL_free(mods);
  205.     BN_CTX_end(ctx);
           ^
  206.     bn_check_top(ret);
  207.     return found;

#593
crypto/x509/x509_trs.c:147: error: Null Dereference
  pointer `trtmp` last assigned on line 144 could be null and is dereferenced at line 147, column 9.
  145. 
  146.     /* OPENSSL_free existing name if dynamic */
  147.     if (trtmp->flags & X509_TRUST_DYNAMIC_NAME)
               ^
  148.         OPENSSL_free(trtmp->name);
  149.     /* dup supplied name */

#594
test/asynciotest.c:168: error: Integer Overflow L2
  ([0, +oo] - 3):unsigned64 by call to `PACKET_forward`.
  166. 
  167.                 if (msgtype == SSL3_MT_SERVER_HELLO) {
  168.                     if (!PACKET_forward(&wholebody,
                                ^
  169.                                             SSL3_HM_HEADER_LENGTH - 1)
  170.                             || !PACKET_get_net_2(&wholebody, &negversion)

#595
test/asynciotest.c:172: error: Integer Overflow L2
  ([2, +oo] - 32):unsigned64 by call to `PACKET_forward`.
  170.                             || !PACKET_get_net_2(&wholebody, &negversion)
  171.                                /* Skip random (32 bytes) */
  172.                             || !PACKET_forward(&wholebody, 32)
                                       ^
  173.                                /* Skip session id */
  174.                             || !PACKET_get_length_prefixed_1(&wholebody,

#596
test/constant_time_test.c:128: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `constant_time_is_zero_8`.
  126.     unsigned int a = test_values_8[i];
  127. 
  128.     if (a == 0 && !TEST_uint_eq(constant_time_is_zero_8(a), CONSTTIME_TRUE_8))
                          ^
  129.         return 0;
  130.     if (a != 0 && !TEST_uint_eq(constant_time_is_zero_8(a), CONSTTIME_FALSE_8))

#597
crypto/bn/bn_conv.c:161: error: Integer Overflow L2
  ([4, 2147483584] + 64):signed32 by call to `bn_expand`.
  159. 
  160.     /* i is the number of hex digits */
  161.     if (bn_expand(ret, i * 4) == NULL)
               ^
  162.         goto err;
  163. 

#598
crypto/rsa/rsa_sp800_56b_check.c:135: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_check_prime_factor_range`.
  133.     if (BN_check_prime(p, ctx, NULL) != 1
  134.             /* (Step 5c) (√2)(2^(nbits/2 - 1) <= p <= 2^(nbits/2 - 1) */
  135.             || rsa_check_prime_factor_range(p, nbits, ctx) != 1)
                      ^
  136.         return 0;
  137. 

#599
crypto/x509/v3_addr.c:148: error: Buffer Overrun L2
  Offset: [1, 16] Size: 16.
  146.              n -= 2) ;
  147.         for (i = 0; i < n; i += 2)
  148.             BIO_printf(out, "%x%s", (addr[i] << 8) | addr[i + 1],
                                                            ^
  149.                        (i < 14 ? ":" : ""));
  150.         if (i < 16)

#600
crypto/bn/bn_mod.c:163: error: Integer Overflow L2
  ([0, +oo] - [0, 2]):unsigned64.
  161.         carry += (rp[i] < ta);
  162.     }
  163.     borrow -= carry;
           ^
  164.     for (i = 0, mask = 0 - borrow, carry = 0; i < mtop; i++) {
  165.         ta = ((ap[i] & mask) + carry) & BN_MASK2;

#601
ssl/s3_cbc.c:441: error: Buffer Overrun L2
  Offset: [-72, 79] Size: 16.
  439.                 /* If this is index_b, write a length byte. */
  440.                 b = constant_time_select_8(is_block_b,
  441.                                            length_bytes[j -
                                                  ^
  442.                                                         (md_block_size -
  443.                                                          md_length_size)], b);

#602
ssl/s3_cbc.c:412: error: Integer Overflow L2
  ([13, `data_plus_mac_plus_padding_size` + `mac_secret_length` + 58] - [14-min(1, `data_plus_mac_plus_padding_size`), `mac_secret_length` + 59]):unsigned64.
  410.                 b = header[k];
  411.             else if (k < data_plus_mac_plus_padding_size + header_length)
  412.                 b = data[k - header_length];
                           ^
  413.             k++;
  414. 

#603
ssl/s3_cbc.c:441: error: Integer Overflow L2
  ([48, 127] - [48, 120]):unsigned64.
  439.                 /* If this is index_b, write a length byte. */
  440.                 b = constant_time_select_8(is_block_b,
  441.                                            length_bytes[j -
                                                  ^
  442.                                                         (md_block_size -
  443.                                                          md_length_size)], b);

#604
ssl/s3_cbc.c:471: error: Uninitialized Value
  The value read from hmac_pad[_] was never initialized.
  469.         /* Complete the HMAC in the standard manner. */
  470.         for (i = 0; i < md_block_size; i++)
  471.             hmac_pad[i] ^= 0x6a;
                   ^
  472. 
  473.         if (EVP_DigestUpdate(md_ctx, hmac_pad, md_block_size) <= 0

#605
test/sparse_array_test.c:138: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_sa_char_set`.
  136.         if (n == cases[i].n && strcmp(value, cases[i].v) == 0) {
  137.             doall_data->res = 1;
  138.             ossl_sa_char_set(doall_data->sa, n, NULL);
                   ^
  139.             return;
  140.         }

#606
crypto/ec/ec_oct.c:136: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_point2oct`.
  134.     unsigned char *buf;
  135. 
  136.     len = EC_POINT_point2oct(group, point, form, NULL, 0, NULL);
                 ^
  137.     if (len == 0)
  138.         return 0;

#607
apps/smime.c:167: error: Buffer Overrun L3
  Offset: [0, 17] Size: [1, 18] by call to `opt_help`.
  165.             goto end;
  166.         case OPT_HELP:
  167.             opt_help(smime_options);
                   ^
  168.             ret = 0;
  169.             goto end;

#608
crypto/srp/srp_vfy.c:151: error: Buffer Overrun L2
  Offset added: [-oo, 80] Size: 16 by call to `EVP_EncodeUpdate`.
  149.     leadz = 3 - (size % 3);
  150.     if (leadz != 3
  151.             && !EVP_EncodeUpdate(ctx, (unsigned char *)dst, &outl, pad,
                       ^
  152.                                  leadz)) {
  153.         EVP_ENCODE_CTX_free(ctx);

#609
crypto/srp/srp_vfy.c:168: error: Integer Overflow L2
  ([0, +oo] - [1, 5]):unsigned64.
  166.     /* Strip the encoded padding at the front */
  167.     if (leadz != 3) {
  168.         memmove(dst, dst + leadz, outl - leadz);
               ^
  169.         dst[outl - leadz] = '\0';
  170.     }

#610
crypto/srp/srp_vfy.c:162: error: Integer Overflow L2
  ([0, 2147483647] + [0, 2147483647]):signed32.
  160.         return 0;
  161.     }
  162.     outl += outl2;
           ^
  163.     EVP_EncodeFinal(ctx, (unsigned char *)dst + outl, &outl2);
  164.     outl += outl2;

#611
test/srptest.c:148: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 33 by call to `BN_hex2bn`.
  146.     if (!TEST_ptr(GN = SRP_get_default_gN("1024")))
  147.         goto err;
  148.     BN_hex2bn(&s, "BEB25379D1A8581EB5A727673A2441EE");
           ^
  149.     /* Set up server's password entry */
  150.     if (!TEST_true(SRP_create_verifier_BN("alice", "password123", &s, &v, GN->N,

#612
test/srptest.c:148: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 33 by call to `BN_hex2bn`.
  146.     if (!TEST_ptr(GN = SRP_get_default_gN("1024")))
  147.         goto err;
  148.     BN_hex2bn(&s, "BEB25379D1A8581EB5A727673A2441EE");
           ^
  149.     /* Set up server's password entry */
  150.     if (!TEST_true(SRP_create_verifier_BN("alice", "password123", &s, &v, GN->N,

#613
crypto/bn/bn_rand.c:165: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  163.              */
  164.             if (BN_cmp(r, range) >= 0) {
  165.                 if (!BN_sub(r, r, range))
                            ^
  166.                     return 0;
  167.                 if (BN_cmp(r, range) >= 0)

#614
test/cmp_ctx_test.c:158: error: Integer Overflow L2
  ([-2, 3996] - 1):unsigned64 by call to `ossl_cmp_add_error_txt`.
  156.         base_err_msg_size += strlen("NULL_ARGUMENT");
  157.         expected_size = base_err_msg_size;
  158.         ossl_cmp_add_error_data("data1"); /* should prepend separator " : " */
               ^
  159.         expected_size += strlen(" : " "data1");
  160.         ossl_cmp_add_error_data("data2"); /* should prepend separator " : " */

#615
test/cmp_ctx_test.c:172: error: Integer Overflow L2
  ([-4, 3996] - 1):unsigned64 by call to `ossl_cmp_add_error_txt`.
  170.         expected_size = base_err_msg_size;
  171.         while (expected_size < 4096) { /* force split */
  172.             ossl_cmp_add_error_txt(STR_SEP, max_str_literal);
                   ^
  173.             expected_size += strlen(STR_SEP) + strlen(max_str_literal);
  174.         }

#616
test/cmp_ctx_test.c:158: error: Integer Overflow L2
  ([1, 3996] - [0, 3]):unsigned64 by call to `ossl_cmp_add_error_txt`.
  156.         base_err_msg_size += strlen("NULL_ARGUMENT");
  157.         expected_size = base_err_msg_size;
  158.         ossl_cmp_add_error_data("data1"); /* should prepend separator " : " */
               ^
  159.         expected_size += strlen(" : " "data1");
  160.         ossl_cmp_add_error_data("data2"); /* should prepend separator " : " */

#617
test/cmp_ctx_test.c:172: error: Integer Overflow L2
  ([1, 3996] - [0, 5]):unsigned64 by call to `ossl_cmp_add_error_txt`.
  170.         expected_size = base_err_msg_size;
  171.         while (expected_size < 4096) { /* force split */
  172.             ossl_cmp_add_error_txt(STR_SEP, max_str_literal);
                   ^
  173.             expected_size += strlen(STR_SEP) + strlen(max_str_literal);
  174.         }

#618
crypto/ocsp/ocsp_prn.c:166: error: Integer Overflow L2
  ([-9223372036854775808, 9223372036854775807] + 1):signed64.
  164.     rd = &br->tbsResponseData;
  165.     l = ASN1_INTEGER_get(rd->version);
  166.     if (BIO_printf(bp, "\n    Version: %lu (0x%lx)\n", l + 1, l) <= 0)
               ^
  167.         goto err;
  168.     if (BIO_puts(bp, "    Responder Id: ") <= 0)

#619
test/asynctest.c:140: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `ASYNC_init_thread`.
  138.     int set_status = 1;
  139. 
  140.     if (       !ASYNC_init_thread(1, 0)
                       ^
  141.             || (waitctx = ASYNC_WAIT_CTX_new()) == NULL
  142.             || ASYNC_WAIT_CTX_set_callback(waitctx, test_callback, (void*)&set_arg)

#620
crypto/rsa/rsa_oaep.c:205: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  203.      * Optimal Asymmetric Encryption Padding (OAEP) [...]", CRYPTO 2001).
  204.      */
  205.     good = constant_time_is_zero(em[0]);
                  ^
  206. 
  207.     maskedseed = em + 1;

#621
crypto/rsa/rsa_oaep.c:223: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  221.         goto cleanup;
  222. 
  223.     good &= constant_time_is_zero(CRYPTO_memcmp(db, phash, mdlen));
                   ^
  224. 
  225.     found_one_byte = 0;

#622
crypto/rsa/rsa_oaep.c:231: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  229.          */
  230.         unsigned int equals1 = constant_time_eq(db[i], 1);
  231.         unsigned int equals0 = constant_time_is_zero(db[i]);
                                      ^
  232.         one_index = constant_time_select_int(~found_one_byte & equals1,
  233.                                              i, one_index);

#623
crypto/rsa/rsa_oaep.c:194: error: Integer Overflow L2
  ([0, max(0, `flen`)] - 1):unsigned32 by call to `constant_time_is_zero`.
  192.      */
  193.     for (from += flen, em += num, i = 0; i < num; i++) {
  194.         mask = ~constant_time_is_zero(flen);
                       ^
  195.         flen -= 1 & mask;
  196.         from -= 1 & mask;

#624
test/packettest.c:143: error: Integer Overflow L2
  ([0, +oo] - 247):unsigned64 by call to `PACKET_forward`.
  141.             || !TEST_ulong_eq(i, 0x02040608UL)
  142.             || !TEST_size_t_eq(PACKET_remaining(&subpkt), 0)
  143.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 8))
                       ^
  144.             || !TEST_true(PACKET_get_sub_packet(&pkt, &subpkt, 4))
  145.             || !TEST_true(PACKET_get_net_4(&subpkt, &i))

#625
test/packettest.c:139: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `PACKET_get_sub_packet`.
  137. 
  138.     if (!TEST_true(PACKET_buf_init(&pkt, smbuf, BUF_LEN))
  139.             || !TEST_true(PACKET_get_sub_packet(&pkt, &subpkt, 4))
                       ^
  140.             || !TEST_true(PACKET_get_net_4(&subpkt, &i))
  141.             || !TEST_ulong_eq(i, 0x02040608UL)

#626
crypto/bn/bn_blind.c:136: error: Dead Store
  The value written to &ret (type int) is never used.
  134. int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
  135. {
  136.     int ret = 1;
           ^
  137. 
  138.     bn_check_top(n);

#627
crypto/bn/bn_blind.c:155: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul_montgomery`.
  153. 
  154.     if (b->m_ctx != NULL)
  155.         ret = BN_mod_mul_montgomery(n, n, b->A, b->m_ctx, ctx);
                     ^
  156.     else
  157.         ret = BN_mod_mul(n, n, b->A, b->mod, ctx);

#628
crypto/bn/bn_blind.c:157: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  155.         ret = BN_mod_mul_montgomery(n, n, b->A, b->m_ctx, ctx);
  156.     else
  157.         ret = BN_mod_mul(n, n, b->A, b->mod, ctx);
                     ^
  158. 
  159.     return ret;

#629
crypto/bn/bn_word.c:167: error: Integer Overflow L2
  ([0, max(18446744073709551615, `a->d`)] - [1, 18446744073709551615]):unsigned64.
  165.     for (;;) {
  166.         if (a->d[i] >= w) {
  167.             a->d[i] -= w;
                   ^
  168.             break;
  169.         } else {

#630
crypto/bn/bn_word.c:170: error: Integer Overflow L2
  ([0, max(18446744073709551615, `a->d`)] - [1, 18446744073709551615]):unsigned64.
  168.             break;
  169.         } else {
  170.             a->d[i] = (a->d[i] - w) & BN_MASK2;
                   ^
  171.             i++;
  172.             w = 1;

#631
crypto/rc2/rc2_cbc.c:155: error: Integer Overflow L2
  ([-131070, 65535] - `key->data[*]`):unsigned32.
  153.     for (;;) {
  154.         t = ((x3 << 11) | (x3 >> 5)) & 0xffff;
  155.         x3 = (t - (x0 & ~x2) - (x1 & x2) - *(p0--)) & 0xffff;
               ^
  156.         t = ((x2 << 13) | (x2 >> 3)) & 0xffff;
  157.         x2 = (t - (x3 & ~x1) - (x0 & x1) - *(p0--)) & 0xffff;

#632
crypto/rc2/rc2_cbc.c:155: error: Integer Overflow L2
  ([-65535, 65535] - [0, 65535]):unsigned32.
  153.     for (;;) {
  154.         t = ((x3 << 11) | (x3 >> 5)) & 0xffff;
  155.         x3 = (t - (x0 & ~x2) - (x1 & x2) - *(p0--)) & 0xffff;
               ^
  156.         t = ((x2 << 13) | (x2 >> 3)) & 0xffff;
  157.         x2 = (t - (x3 & ~x1) - (x0 & x1) - *(p0--)) & 0xffff;

#633
providers/implementations/asymciphers/rsa_enc.c:198: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_padding_check_PKCS1_type_2_TLS`.
  196.                 return 0;
  197.             }
  198.             ret = rsa_padding_check_PKCS1_type_2_TLS(out, outsize,
                         ^
  199.                                                      tbuf, len,
  200.                                                      prsactx->client_version,

#634
apps/pkcs12.c:171: error: Buffer Overrun L3
  Offset: [0, 10] Size: [1, 11] by call to `opt_help`.
  169.             goto end;
  170.         case OPT_HELP:
  171.             opt_help(pkcs12_options);
                   ^
  172.             ret = 0;
  173.             goto end;

#635
test/constant_time_test.c:139: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `constant_time_is_zero_32`.
  137.     uint32_t a = test_values_32[i];
  138. 
  139.     if (a == 0 && !TEST_true(constant_time_is_zero_32(a) == CONSTTIME_TRUE_32))
                          ^
  140.         return 0;
  141.     if (a != 0 && !TEST_true(constant_time_is_zero_32(a) == CONSTTIME_FALSE_32))

#636
crypto/asn1/tasn_dec.c:348: error: Dead Store
  The value written to &q (type unsigned char const *) is never used.
  346.                 len -= p - q;
  347.                 seq_eoc = 0;
  348.                 q = p;
                       ^
  349.                 break;
  350.             }

#637
crypto/ec/ecp_smpl.c:191: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  189. 
  190.  err:
  191.     BN_CTX_end(ctx);
           ^
  192.     BN_CTX_free(new_ctx);
  193.     return ret;

#638
crypto/ec/ecp_smpl.c:191: error: Integer Overflow L2
  ([0, 3+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  189. 
  190.  err:
  191.     BN_CTX_end(ctx);
           ^
  192.     BN_CTX_free(new_ctx);
  193.     return ret;

#639
crypto/pkcs12/p12_sbag.c:152: error: Null Dereference
  pointer `pbe_ciph` last assigned on line 148 could be null and is dereferenced by call to `PKCS8_encrypt()` at line 152, column 10.
  150.         pbe_nid = -1;
  151. 
  152.     p8 = PKCS8_encrypt(pbe_nid, pbe_ciph, pass, passlen, salt, saltlen, iter,
                ^
  153.                        p8inf);
  154.     if (p8 == NULL)

#640
test/sm2_internal_test.c:167: error: Integer Overflow L2
  ([0, 5] - 1):unsigned32 by call to `EC_POINT_mul`.
  165.     pt = EC_POINT_new(group);
  166.     if (!TEST_ptr(pt)
  167.             || !TEST_true(EC_POINT_mul(group, pt, priv, NULL, NULL, NULL))
                       ^
  168.             || !TEST_true(EC_KEY_set_public_key(key, pt))
  169.             || !TEST_true(sm2_ciphertext_size(key, digest, msg_len, &ctext_len)))

#641
test/servername_test.c:183: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  181.     OPENSSL_free(hostname);
  182.     SSL_free(con);
  183.     SSL_CTX_free(ctx);
           ^
  184.     return ret;
  185. }

#642
test/servername_test.c:182: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  180. end:
  181.     OPENSSL_free(hostname);
  182.     SSL_free(con);
           ^
  183.     SSL_CTX_free(ctx);
  184.     return ret;

#643
test/servername_test.c:182: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  180. end:
  181.     OPENSSL_free(hostname);
  182.     SSL_free(con);
           ^
  183.     SSL_CTX_free(ctx);
  184.     return ret;

#644
crypto/ec/ec_mult.c:382: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  380.     EC_POINT_free(p);
  381.     EC_POINT_clear_free(s);
  382.     BN_CTX_end(ctx);
           ^
  383. 
  384.     return ret;

#645
crypto/ec/ec_mult.c:368: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `BN_consttime_swap`.
  366.     }
  367.     /* one final cswap to move the right value into r */
  368.     EC_POINT_CSWAP(pbit, r, s, group_top, Z_is_one);
           ^
  369. #undef EC_POINT_CSWAP
  370. 

#646
crypto/ec/ec_mult.c:233: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  231.     }
  232. 
  233.     if (!BN_add(lambda, k, cardinality)) {
                ^
  234.         ECerr(EC_F_EC_SCALAR_MUL_LADDER, ERR_R_BN_LIB);
  235.         goto err;

#647
crypto/ec/ec_mult.c:382: error: Integer Overflow L2
  ([0, 3+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  380.     EC_POINT_free(p);
  381.     EC_POINT_clear_free(s);
  382.     BN_CTX_end(ctx);
           ^
  383. 
  384.     return ret;

#648
crypto/serializer/serializer_meth.c:154: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_method_store_add`.
  152.         return 0;
  153. 
  154.     return ossl_method_store_add(store, prov, id, propdef, method,
                  ^
  155.                                  (int (*)(void *))OSSL_SERIALIZER_up_ref,
  156.                                  (void (*)(void *))OSSL_SERIALIZER_free);

#649
test/sslcorrupttest.c:174: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  172.     sk_SSL_CIPHER_free(sk_ciphers);
  173.     SSL_free(ssl);
  174.     SSL_CTX_free(ctx);
           ^
  175. 
  176.     return numciphers;

#650
test/sslcorrupttest.c:173: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  171. err:
  172.     sk_SSL_CIPHER_free(sk_ciphers);
  173.     SSL_free(ssl);
           ^
  174.     SSL_CTX_free(ctx);
  175. 

#651
test/sslcorrupttest.c:173: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  171. err:
  172.     sk_SSL_CIPHER_free(sk_ciphers);
  173.     SSL_free(ssl);
           ^
  174.     SSL_CTX_free(ctx);
  175. 

#652
crypto/bn/asm/x86_64-gcc.c:162: error: Dead Store
  The value written to &num (type int) is never used.
  160.             return c1;
  161.         mul(rp[1], ap[1], w, c1);
  162.         if (--num == 0)
                   ^
  163.             return c1;
  164.         mul(rp[2], ap[2], w, c1);

#653
crypto/bn/bn_div.c:149: error: Integer Overflow L2
  (0 - [0, 63]):unsigned64.
  147.     lshift = BN_BITS2 - rshift;
  148.     rshift %= BN_BITS2;            /* say no to undefined behaviour */
  149.     rmask = (BN_ULONG)0 - rshift;  /* rmask = 0 - (rshift != 0) */
           ^
  150.     rmask |= rmask >> 8;
  151. 

#654
test/verify_extra_test.c:176: error: Null Dereference
  pointer `bio` last assigned on line 150 could be null and is dereferenced by call to `BIO_free()` at line 176, column 5.
  174.     X509_STORE_CTX_free(sctx);
  175.     X509_free(x);
  176.     BIO_free(bio);
           ^
  177.     return testresult;
  178. }

#655
crypto/ec/curve448/eddsa.c:206: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `curve448_scalar_halve`.
  204.         curve448_point_t p;
  205. 
  206.         curve448_scalar_halve(nonce_scalar_2, nonce_scalar);
               ^
  207.         for (c = 2; c < C448_EDDSA_ENCODE_RATIO; c <<= 1)
  208.             curve448_scalar_halve(nonce_scalar_2, nonce_scalar_2);

#656
providers/implementations/digests/blake2s_prov.c:223: error: Uninitialized Value
  The value read from m[_] was never initialized.
  221.         }
  222. #else
  223.         ROUND(0);
               ^
  224.         ROUND(1);
  225.         ROUND(2);

#657
providers/implementations/digests/blake2s_prov.c:224: error: Uninitialized Value
  The value read from m[_] was never initialized.
  222. #else
  223.         ROUND(0);
  224.         ROUND(1);
               ^
  225.         ROUND(2);
  226.         ROUND(3);

#658
providers/implementations/digests/blake2s_prov.c:225: error: Uninitialized Value
  The value read from m[_] was never initialized.
  223.         ROUND(0);
  224.         ROUND(1);
  225.         ROUND(2);
               ^
  226.         ROUND(3);
  227.         ROUND(4);

#659
providers/implementations/digests/blake2s_prov.c:226: error: Uninitialized Value
  The value read from m[_] was never initialized.
  224.         ROUND(1);
  225.         ROUND(2);
  226.         ROUND(3);
               ^
  227.         ROUND(4);
  228.         ROUND(5);

#660
providers/implementations/digests/blake2s_prov.c:227: error: Uninitialized Value
  The value read from m[_] was never initialized.
  225.         ROUND(2);
  226.         ROUND(3);
  227.         ROUND(4);
               ^
  228.         ROUND(5);
  229.         ROUND(6);

#661
providers/implementations/digests/blake2s_prov.c:228: error: Uninitialized Value
  The value read from m[_] was never initialized.
  226.         ROUND(3);
  227.         ROUND(4);
  228.         ROUND(5);
               ^
  229.         ROUND(6);
  230.         ROUND(7);

#662
providers/implementations/digests/blake2s_prov.c:229: error: Uninitialized Value
  The value read from m[_] was never initialized.
  227.         ROUND(4);
  228.         ROUND(5);
  229.         ROUND(6);
               ^
  230.         ROUND(7);
  231.         ROUND(8);

#663
providers/implementations/digests/blake2s_prov.c:230: error: Uninitialized Value
  The value read from m[_] was never initialized.
  228.         ROUND(5);
  229.         ROUND(6);
  230.         ROUND(7);
               ^
  231.         ROUND(8);
  232.         ROUND(9);

#664
providers/implementations/digests/blake2s_prov.c:231: error: Uninitialized Value
  The value read from m[_] was never initialized.
  229.         ROUND(6);
  230.         ROUND(7);
  231.         ROUND(8);
               ^
  232.         ROUND(9);
  233. #endif

#665
providers/implementations/digests/blake2s_prov.c:232: error: Uninitialized Value
  The value read from m[_] was never initialized.
  230.         ROUND(7);
  231.         ROUND(8);
  232.         ROUND(9);
               ^
  233. #endif
  234. 

#666
test/drbgtest.c:150: error: Null Dereference
  pointer `t` last assigned on line 148 could be null and is dereferenced at line 150, column 5.
  148.     TEST_CTX *t = (TEST_CTX *)RAND_DRBG_get_ex_data(drbg, app_data_index);
  149. 
  150.     t->entropycnt++;
           ^
  151.     *pout = (unsigned char *)t->entropy;
  152.     return t->entropylen;

#667
test/dtls_mtu_test.c:162: error: Buffer Overrun L1
  Offset: 7 Size: 4 by call to `SSL_CTX_set_cipher_list`.
  160.      * only do (non-DH) PSK.
  161.      */
  162.     if (!TEST_true(SSL_CTX_set_cipher_list(ctx, "PSK")))
                ^
  163.         goto end;
  164. 

#668
test/dtls_mtu_test.c:162: error: Buffer Overrun L1
  Offset: [9, +oo] (<= [0, +oo] + 9) Size: 4 by call to `SSL_CTX_set_cipher_list`.
  160.      * only do (non-DH) PSK.
  161.      */
  162.     if (!TEST_true(SSL_CTX_set_cipher_list(ctx, "PSK")))
                ^
  163.         goto end;
  164. 

#669
test/dtls_mtu_test.c:162: error: Buffer Overrun L2
  Offset: [0, 8] Size: 4 by call to `SSL_CTX_set_cipher_list`.
  160.      * only do (non-DH) PSK.
  161.      */
  162.     if (!TEST_true(SSL_CTX_set_cipher_list(ctx, "PSK")))
                ^
  163.         goto end;
  164. 

#670
test/sparse_array_test.c:163: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_sa_char_set`.
  161.     doall_data.sa = NULL;
  162.     for (i = 0; i <  OSSL_NELEM(cases); i++)
  163.         if (!TEST_true(ossl_sa_char_set(sa, cases[i].n, cases[i].v))) {
                    ^
  164.             TEST_note("failed at iteration %zu", i + 1);
  165.             goto err;

#671
crypto/rsa/rsa_x931g.c:161: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_X931_generate_Xpq`.
  159.     if (Xq == NULL)
  160.         goto error;
  161.     if (!BN_X931_generate_Xpq(Xp, Xq, bits, ctx))
                ^
  162.         goto error;
  163. 

#672
crypto/rsa/rsa_x931g.c:171: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_X931_generate_prime_ex`.
  169.     /* Generate two primes from Xp, Xq */
  170. 
  171.     if (!BN_X931_generate_prime_ex(rsa->p, NULL, NULL, NULL, NULL, Xp,
                ^
  172.                                    e, ctx, cb))
  173.         goto error;

#673
crypto/dsa/dsa_lib.c:164: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
  162.     i = i2d_ASN1_INTEGER(&bs, NULL);
  163.     i += i;                     /* r and s */
  164.     ret = ASN1_object_size(1, i, V_ASN1_SEQUENCE);
                 ^
  165.     return ret;
  166. }

#674
test/constant_time_test.c:150: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `constant_time_is_zero_s`.
  148.     size_t a = test_values_s[i];
  149. 
  150.     if (a == 0 && !TEST_size_t_eq(constant_time_is_zero_s(a), CONSTTIME_TRUE_S))
                          ^
  151.         return 0;
  152.     if (a != 0 && !TEST_uint_eq(constant_time_is_zero_s(a), CONSTTIME_FALSE_S))

#675
test/ectest.c:166: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 2 by call to `BN_hex2bn`.
  164.         || !TEST_ptr(b = BN_new())
  165.         || !TEST_true(BN_hex2bn(&p, "17"))
  166.         || !TEST_true(BN_hex2bn(&a, "1"))
                   ^
  167.         || !TEST_true(BN_hex2bn(&b, "1"))
  168.         /*

#676
test/ectest.c:166: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 2 by call to `BN_hex2bn`.
  164.         || !TEST_ptr(b = BN_new())
  165.         || !TEST_true(BN_hex2bn(&p, "17"))
  166.         || !TEST_true(BN_hex2bn(&a, "1"))
                   ^
  167.         || !TEST_true(BN_hex2bn(&b, "1"))
  168.         /*

#677
test/ectest.c:186: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_output_bignum`.
  184.     TEST_info("Curve defined by Weierstrass equation");
  185.     TEST_note("     y^2 = x^3 + a*x + b (mod p)");
  186.     test_output_bignum("a", a);
           ^
  187.     test_output_bignum("b", b);
  188.     test_output_bignum("p", p);

#678
test/ectest.c:577: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINTs_mul`.
  575.     /* z is still the group order */
  576.     if (!TEST_true(EC_POINTs_mul(group, P, NULL, 2, points, scalars, ctx))
  577.         || !TEST_true(EC_POINTs_mul(group, R, z, 2, points, scalars, ctx))
                   ^
  578.         || !TEST_int_eq(0, EC_POINT_cmp(group, P, R, ctx))
  579.         || !TEST_int_eq(0, EC_POINT_cmp(group, R, Q, ctx))

#679
test/ectest.c:300: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  298.         || !TEST_true(BN_hex2bn(&y,                         "23a62855"
  299.                                     "3168947d59dcc912042351377ac5fb32"))
  300.         || !TEST_true(BN_add(yplusone, y, BN_value_one()))
                   ^
  301.     /*
  302.      * When (x, y) is on the curve, (x, y + 1) is, as it happens, not,

#680
crypto/ec/ecp_nistz256.c:151: error: Integer Overflow L2
  ([0, `in`] - 1):unsigned32.
  149.     unsigned int s, d;
  150. 
  151.     s = ~((in >> 5) - 1);
           ^
  152.     d = (1 << 6) - in - 1;
  153.     d = (d & s) | (in & ~s);

#681
crypto/evp/e_aes_cbc_hmac_sha256.c:335: error: Buffer Overrun L1
  Offset: 32 Size: 16.
  333.         blocks[i].d[7] = BSWAP4(ctx->H[i]);
  334.         ctx->H[i] = key->tail.h[7];
  335.         blocks[i].c[32] = 0x80;
               ^
  336.         blocks[i].d[15] = BSWAP4((64 + 32) * 8);
  337. #  else

#682
crypto/evp/e_aes_cbc_hmac_sha256.c:203: error: Buffer Overrun L3
  Offset added: 8 Size: [0, +oo].
  201. 
  202. #  if defined(BSWAP8)
  203.     memcpy(blocks[0].c, key->md.data, 8);
           ^
  204.     seqnum = BSWAP8(blocks[0].q[0]);
  205. #  endif

#683
crypto/modes/ctr128.c:191: error: Integer Overflow L2
  ([16, +oo] - [-4294967248, 4294967296]):unsigned64.
  189.             ctr96_inc(ivec);
  190.         blocks *= 16;
  191.         len -= blocks;
               ^
  192.         out += blocks;
  193.         in += blocks;

#684
crypto/modes/ctr128.c:181: error: Integer Overflow L2
  ([2, 268435456] - [1, 268435455]):unsigned64.
  179.         ctr32 += (u32)blocks;
  180.         if (ctr32 < blocks) {
  181.             blocks -= ctr32;
                   ^
  182.             ctr32 = 0;
  183.         }

#685
crypto/sha/sha512.c:214: error: Dead Store
  The value written to &md (type unsigned char*) is never used.
  212.             *(md++) = (unsigned char)(t >> 48);
  213.             *(md++) = (unsigned char)(t >> 40);
  214.             *(md++) = (unsigned char)(t >> 32);
                     ^
  215.         }
  216.         break;

#686
test/cipherlist_test.c:180: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  178.  err:
  179.     sk_SSL_CIPHER_free(ciphers);
  180.     SSL_free(ssl);
           ^
  181.     return ret;
  182. }

#687
test/cipherlist_test.c:180: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  178.  err:
  179.     sk_SSL_CIPHER_free(ciphers);
  180.     SSL_free(ssl);
           ^
  181.     return ret;
  182. }

#688
crypto/bn/bn_rsa_fips186_4.c:199: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_rsa_fips186_4_derive_prime`.
  197.         goto err;
  198.     /* (Steps 4.3/5.3) - generate prime */
  199.     if (!bn_rsa_fips186_4_derive_prime(p, Xpout, Xp, p1i, p2i, nlen, e, ctx, cb))
                ^
  200.         goto err;
  201.     ret = 1;

#689
crypto/x509/v3_purp.c:174: error: Null Dereference
  pointer `ptmp` last assigned on line 171 could be null and is dereferenced at line 174, column 9.
  172. 
  173.     /* OPENSSL_free existing name if dynamic */
  174.     if (ptmp->flags & X509_PURPOSE_DYNAMIC_NAME) {
               ^
  175.         OPENSSL_free(ptmp->name);
  176.         OPENSSL_free(ptmp->sname);

#690
test/dtlstest.c:177: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  175.         SSL_shutdown(serverssl);
  176.         SSL_free(serverssl);
  177.         SSL_free(clientssl);
               ^
  178.         serverssl = clientssl = NULL;
  179. 

#691
test/dtlstest.c:177: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  175.         SSL_shutdown(serverssl);
  176.         SSL_free(serverssl);
  177.         SSL_free(clientssl);
               ^
  178.         serverssl = clientssl = NULL;
  179. 

#692
test/dtlstest.c:200: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  198. 
  199.     if (sess != NULL) {
  200.         if (!TEST_true(SSL_set_session(clientssl, sess)))
                    ^
  201.             goto end;
  202.     }

#693
crypto/bio/bss_acpt.c:266: error: Dead Store
  The value written to &s (type int) is never used.
  264.                 BIO_ADDR_service_string(&c->cache_accepting_addr, 1);
  265.             c->state = ACPT_S_ACCEPT;
  266.             s = -1;
                   ^
  267.             ret = 1;
  268.             goto end;

#694
test/handshake_helper.c:200: error: Null Dereference
  pointer `ex_data` last assigned on line 155 could be null and is dereferenced at line 200, column 9.
  198.         SSL_set_options(s, SSL_CTX_get_options(new_ctx));
  199. 
  200.         ex_data->servername = SSL_TEST_SERVERNAME_SERVER2;
               ^
  201.         return 1;
  202.     } else if (len == strlen("server1") &&

#695
test/handshake_helper.c:204: error: Null Dereference
  pointer `ex_data` last assigned on line 155 could be null and is dereferenced at line 204, column 9.
  202.     } else if (len == strlen("server1") &&
  203.                strncmp(servername, "server1", len) == 0) {
  204.         ex_data->servername = SSL_TEST_SERVERNAME_SERVER1;
               ^
  205.         return 1;
  206.     } else if (ignore) {

#696
test/handshake_helper.c:207: error: Null Dereference
  pointer `ex_data` last assigned on line 155 could be null and is dereferenced at line 207, column 9.
  205.         return 1;
  206.     } else if (ignore) {
  207.         ex_data->servername = SSL_TEST_SERVERNAME_SERVER1;
               ^
  208.         return 1;
  209.     }

#697
crypto/ec/curve448/scalar.c:165: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `constant_time_is_zero_32`.
  163.     curve448_scalar_mul(s, s, curve448_scalar_one); /* ham-handed reduce */
  164. 
  165.     return c448_succeed_if(~word_is_zero((uint32_t)accum));
                                   ^
  166. }
  167. 

#698
providers/implementations/digests/blake2b_prov.c:230: error: Uninitialized Value
  The value read from m[_] was never initialized.
  228.         }
  229. #else
  230.         ROUND(0);
               ^
  231.         ROUND(1);
  232.         ROUND(2);

#699
providers/implementations/digests/blake2b_prov.c:231: error: Uninitialized Value
  The value read from m[_] was never initialized.
  229. #else
  230.         ROUND(0);
  231.         ROUND(1);
               ^
  232.         ROUND(2);
  233.         ROUND(3);

#700
providers/implementations/digests/blake2b_prov.c:232: error: Uninitialized Value
  The value read from m[_] was never initialized.
  230.         ROUND(0);
  231.         ROUND(1);
  232.         ROUND(2);
               ^
  233.         ROUND(3);
  234.         ROUND(4);

#701
providers/implementations/digests/blake2b_prov.c:233: error: Uninitialized Value
  The value read from m[_] was never initialized.
  231.         ROUND(1);
  232.         ROUND(2);
  233.         ROUND(3);
               ^
  234.         ROUND(4);
  235.         ROUND(5);

#702
providers/implementations/digests/blake2b_prov.c:234: error: Uninitialized Value
  The value read from m[_] was never initialized.
  232.         ROUND(2);
  233.         ROUND(3);
  234.         ROUND(4);
               ^
  235.         ROUND(5);
  236.         ROUND(6);

#703
providers/implementations/digests/blake2b_prov.c:235: error: Uninitialized Value
  The value read from m[_] was never initialized.
  233.         ROUND(3);
  234.         ROUND(4);
  235.         ROUND(5);
               ^
  236.         ROUND(6);
  237.         ROUND(7);

#704
providers/implementations/digests/blake2b_prov.c:236: error: Uninitialized Value
  The value read from m[_] was never initialized.
  234.         ROUND(4);
  235.         ROUND(5);
  236.         ROUND(6);
               ^
  237.         ROUND(7);
  238.         ROUND(8);

#705
providers/implementations/digests/blake2b_prov.c:237: error: Uninitialized Value
  The value read from m[_] was never initialized.
  235.         ROUND(5);
  236.         ROUND(6);
  237.         ROUND(7);
               ^
  238.         ROUND(8);
  239.         ROUND(9);

#706
providers/implementations/digests/blake2b_prov.c:238: error: Uninitialized Value
  The value read from m[_] was never initialized.
  236.         ROUND(6);
  237.         ROUND(7);
  238.         ROUND(8);
               ^
  239.         ROUND(9);
  240.         ROUND(10);

#707
providers/implementations/digests/blake2b_prov.c:239: error: Uninitialized Value
  The value read from m[_] was never initialized.
  237.         ROUND(7);
  238.         ROUND(8);
  239.         ROUND(9);
               ^
  240.         ROUND(10);
  241.         ROUND(11);

#708
providers/implementations/digests/blake2b_prov.c:240: error: Uninitialized Value
  The value read from m[_] was never initialized.
  238.         ROUND(8);
  239.         ROUND(9);
  240.         ROUND(10);
               ^
  241.         ROUND(11);
  242. #endif

#709
providers/implementations/digests/blake2b_prov.c:241: error: Uninitialized Value
  The value read from m[_] was never initialized.
  239.         ROUND(9);
  240.         ROUND(10);
  241.         ROUND(11);
               ^
  242. #endif
  243. 

#710
test/property_test.c:163: error: Buffer Overrun L3
  Offset: [2, +oo] (<= [1, +oo] + 1) Size: [1, 23] by call to `ossl_parse_query`.
  161.         && TEST_ptr(prop = ossl_parse_property(NULL, merge_tests[n].prop))
  162.         && TEST_ptr(q_global = ossl_parse_query(NULL, merge_tests[n].q_global))
  163.         && TEST_ptr(q_local = ossl_parse_query(NULL, merge_tests[n].q_local))
                  ^
  164.         && TEST_ptr(q_combined = ossl_property_merge(q_local, q_global))
  165.         && TEST_int_ge(ossl_property_match_count(q_combined, prop), 0))

#711
test/property_test.c:163: error: Buffer Overrun L3
  Offset: [2, +oo] Size: [1, 23] by call to `ossl_parse_query`.
  161.         && TEST_ptr(prop = ossl_parse_property(NULL, merge_tests[n].prop))
  162.         && TEST_ptr(q_global = ossl_parse_query(NULL, merge_tests[n].q_global))
  163.         && TEST_ptr(q_local = ossl_parse_query(NULL, merge_tests[n].q_local))
                  ^
  164.         && TEST_ptr(q_combined = ossl_property_merge(q_local, q_global))
  165.         && TEST_int_ge(ossl_property_match_count(q_combined, prop), 0))

#712
crypto/evp/e_aes_cbc_hmac_sha1.c:330: error: Buffer Overrun L1
  Offset: 20 Size: 16.
  328.         blocks[i].d[4] = BSWAP4(ctx->E[i]);
  329.         ctx->E[i] = key->tail.h4;
  330.         blocks[i].c[20] = 0x80;
               ^
  331.         blocks[i].d[15] = BSWAP4((64 + 20) * 8);
  332. #  else

#713
test/bntest.c:185: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `BN_consttime_swap`.
  183.     /* conditional swap: false */
  184.     cond = 0;
  185.     BN_consttime_swap(cond, a, b, top);
           ^
  186.     if (!equalBN("cswap false", a, c)
  187.             || !equalBN("cswap false", b, d))

#714
engines/e_afalg.c:177: error: Null Dereference
  pointer `null` is dereferenced by call to `perror()` at line 177, column 17.
  175.             aio->efd = eventfd(0);
  176.             if (aio->efd == -1) {
  177.                 ALG_PERR("%s(%d): Failed to get eventfd : ", __FILE__,
                       ^
  178.                          __LINE__);
  179.                 AFALGerr(AFALG_F_AFALG_SETUP_ASYNC_EVENT_NOTIFICATION,

#715
engines/e_afalg.c:202: error: Null Dereference
  pointer `null` is dereferenced by call to `perror()` at line 202, column 13.
  200.         aio->efd = eventfd(0);
  201.         if (aio->efd == -1) {
  202.             ALG_PERR("%s(%d): Failed to get eventfd : ", __FILE__, __LINE__);
                   ^
  203.             AFALGerr(AFALG_F_AFALG_SETUP_ASYNC_EVENT_NOTIFICATION,
  204.                      AFALG_R_EVENTFD_FAILED);

#716
test/packettest.c:166: error: Integer Overflow L2
  ([0, +oo] - 247):unsigned64 by call to `PACKET_forward`.
  164.             || !TEST_uchar_eq(bytes[3], 8)
  165.             || !TEST_size_t_eq(PACKET_remaining(&pkt), BUF_LEN -4)
  166.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 8))
                       ^
  167.             || !TEST_true(PACKET_get_bytes(&pkt, &bytes, 4))
  168.             || !TEST_uchar_eq(bytes[0], 0xf8)

#717
test/packettest.c:160: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `PACKET_get_bytes`.
  158. 
  159.     if (!TEST_true(PACKET_buf_init(&pkt, smbuf, BUF_LEN))
  160.             || !TEST_true(PACKET_get_bytes(&pkt, &bytes, 4))
                       ^
  161.             || !TEST_uchar_eq(bytes[0], 2)
  162.             || !TEST_uchar_eq(bytes[1], 4)

#718
test/drbgtest.c:160: error: Null Dereference
  pointer `t` last assigned on line 158 could be null and is dereferenced at line 160, column 5.
  158.     TEST_CTX *t = (TEST_CTX *)RAND_DRBG_get_ex_data(drbg, app_data_index);
  159. 
  160.     t->noncecnt++;
           ^
  161.     *pout = (unsigned char *)t->nonce;
  162.     return t->noncelen;

#719
test/evp_fetch_prov_test.c:166: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  164.     if (!TEST_ptr(ctx = EVP_CIPHER_CTX_new())
  165.             || !TEST_true(EVP_CipherInit_ex(ctx, cipher, NULL, key, NULL, 1))
  166.             || !TEST_true(EVP_CipherUpdate(ctx, ct, &ctlen, msg, len))
                       ^
  167.             || !TEST_true(EVP_CipherFinal_ex(ctx, ct, &ctlen))
  168.             || !TEST_true(EVP_CipherInit_ex(ctx, cipher, NULL, key, NULL, 0))

#720
crypto/bn/bn_sqr.c:233: error: Integer Overflow L2
  ([0, 18446744073709551615] + 1):unsigned64.
  231.                 p++;
  232.                 lo = *p;
  233.                 ln = (lo + 1) & BN_MASK2;
                       ^
  234.                 *p = ln;
  235.             } while (ln == 0);

#721
crypto/ec/curve448/f_generic.c:169: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero_32`.
  167.         ret |= c->limb[LIMBPERM(i)];
  168. 
  169.     return word_is_zero(ret);
                  ^
  170. }
  171. 

#722
crypto/rsa/rsa_ossl.c:186: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `RSA_setup_blinding`.
  184. 
  185.         if (rsa->mt_blinding == NULL) {
  186.             rsa->mt_blinding = RSA_setup_blinding(rsa, ctx);
                                      ^
  187.         }
  188.         ret = rsa->mt_blinding;

#723
crypto/rsa/rsa_pk1.c:165: error: Dead Store
  The value written to &mlen (type int) is never used.
  163.     unsigned char *em = NULL;
  164.     unsigned int good, found_zero_byte, mask;
  165.     int zero_index = 0, msg_index, mlen = -1;
           ^
  166. 
  167.     if (tlen <= 0 || flen <= 0)

#724
crypto/rsa/rsa_pk1.c:199: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  197.     }
  198. 
  199.     good = constant_time_is_zero(em[0]);
                  ^
  200.     good &= constant_time_eq(em[1], 2);
  201. 

#725
crypto/rsa/rsa_pk1.c:205: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  203.     found_zero_byte = 0;
  204.     for (i = 2; i < num; i++) {
  205.         unsigned int equals0 = constant_time_is_zero(em[i]);
                                      ^
  206. 
  207.         zero_index = constant_time_select_int(~found_zero_byte & equals0,

#726
crypto/rsa/rsa_pk1.c:217: error: Integer Overflow L2
  ([0, +oo] - 10):unsigned32 by call to `constant_time_ge`.
  215.      * also fails.
  216.      */
  217.     good &= constant_time_ge(zero_index, 2 + 8);
                   ^
  218. 
  219.     /*

#727
crypto/rsa/rsa_pk1.c:193: error: Integer Overflow L2
  ([0, max(0, `flen`)] - 1):unsigned32 by call to `constant_time_is_zero`.
  191.      */
  192.     for (from += flen, em += num, i = 0; i < num; i++) {
  193.         mask = ~constant_time_is_zero(flen);
                       ^
  194.         flen -= 1 & mask;
  195.         from -= 1 & mask;

#728
test/sslapitest.c:163: error: Dead Store
  The value written to &client_random_size (type unsigned long) is never used.
  161.     char *token = NULL;
  162.     unsigned char actual_client_random[SSL3_RANDOM_SIZE] = {0};
  163.     size_t client_random_size = SSL3_RANDOM_SIZE;
           ^
  164.     unsigned char actual_master_key[SSL_MAX_MASTER_KEY_LENGTH] = {0};
  165.     size_t master_key_size = SSL_MAX_MASTER_KEY_LENGTH;

#729
crypto/ec/ecp_nistz256.c:163: error: Integer Overflow L2
  ([0, `in`] - 1):unsigned32.
  161.     unsigned int s, d;
  162. 
  163.     s = ~((in >> 7) - 1);
           ^
  164.     d = (1 << 8) - in - 1;
  165.     d = (d & s) | (in & ~s);

#730
crypto/rsa/rsa_sp800_56b_check.c:188: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  186.     BN_clear(lcm);
  187.     BN_clear(gcd);
  188.     BN_CTX_end(ctx);
           ^
  189.     return ret;
  190. }

#731
crypto/rsa/rsa_sp800_56b_check.c:181: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  179.           && (BN_cmp(rsa->d, lcm) < 0)
  180.           /* (Step 6b) 1 = (e . d) mod LCM(p - 1, q - 1) */
  181.           && BN_mod_mul(r, rsa->e, rsa->d, lcm, ctx)
                    ^
  182.           && BN_is_one(r));
  183. 

#732
crypto/rsa/rsa_sp800_56b_check.c:181: error: Integer Overflow L2
  ([0, 6+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_mul`.
  179.           && (BN_cmp(rsa->d, lcm) < 0)
  180.           /* (Step 6b) 1 = (e . d) mod LCM(p - 1, q - 1) */
  181.           && BN_mod_mul(r, rsa->e, rsa->d, lcm, ctx)
                    ^
  182.           && BN_is_one(r));
  183. 

#733
crypto/rsa/rsa_sp800_56b_check.c:188: error: Integer Overflow L2
  ([0, 7+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  186.     BN_clear(lcm);
  187.     BN_clear(gcd);
  188.     BN_CTX_end(ctx);
           ^
  189.     return ret;
  190. }

#734
ssl/statem/extensions_clnt.c:182: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  180.                /* Sub-packet for formats extension */
  181.             || !WPACKET_start_sub_packet_u16(pkt)
  182.             || !WPACKET_sub_memcpy_u8(pkt, pformats, num_formats)
                       ^
  183.             || !WPACKET_close(pkt)) {
  184.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#735
ssl/statem/extensions_clnt.c:182: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 5]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  180.                /* Sub-packet for formats extension */
  181.             || !WPACKET_start_sub_packet_u16(pkt)
  182.             || !WPACKET_sub_memcpy_u8(pkt, pformats, num_formats)
                       ^
  183.             || !WPACKET_close(pkt)) {
  184.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#736
test/modes_internal_test.c:171: error: Dead Store
  The value written to &len (type unsigned long) is never used.
  169.     memcpy(out + len, in + len + 16, tail);
  170.     memcpy(out + len + tail, in + len, 16);
  171.     len += 16 + tail;
           ^
  172.     tail = 16;
  173. 

#737
apps/ts.c:194: error: Buffer Overrun L3
  Offset: [0, 17] Size: [1, 18] by call to `opt_help`.
  192.             goto end;
  193.         case OPT_HELP:
  194.             opt_help(ts_options);
                   ^
  195.             for (helpp = opt_helplist; *helpp; ++helpp)
  196.                 BIO_printf(bio_err, "%s\n", *helpp);

#738
crypto/bn/bn_x931p.c:190: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  188. 
  189.         /* Check that |Xp - Xq| > 2^(nbits - 100) */
  190.         if (!BN_sub(t, Xp, Xq))
                    ^
  191.             goto err;
  192.         if (BN_num_bits(t) > (nbits - 100))

#739
crypto/bn/bn_exp.c:255: error: Dead Store
  The value written to &j (type int) is never used.
  253.          * set bit before the end of the window
  254.          */
  255.         j = wstart;
               ^
  256.         wvalue = 1;
  257.         wend = 0;

#740
crypto/bn/bn_exp.c:165: error: Dead Store
  The value written to &start (type int) is never used.
  163. {
  164.     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
  165.     int start = 1;
           ^
  166.     BIGNUM *aa;
  167.     /* Table of variables obtained from 'ctx' */

#741
crypto/bn/bn_exp.c:220: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul_reciprocal`.
  218.     window = BN_window_bits_for_exponent_size(bits);
  219.     if (window > 1) {
  220.         if (!BN_mod_mul_reciprocal(aa, val[0], val[0], &recp, ctx))
                    ^
  221.             goto err;           /* 2 */
  222.         j = 1 << (window - 1);

#742
crypto/bn/bn_exp.c:243: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul_reciprocal`.
  241.         if (BN_is_bit_set(p, wstart) == 0) {
  242.             if (!start)
  243.                 if (!BN_mod_mul_reciprocal(r, r, r, &recp, ctx))
                            ^
  244.                     goto err;
  245.             if (wstart == 0)

#743
crypto/bn/bn_exp.c:278: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul_reciprocal`.
  276. 
  277.         /* wvalue will be an odd number < 2^window */
  278.         if (!BN_mod_mul_reciprocal(r, r, val[wvalue >> 1], &recp, ctx))
                    ^
  279.             goto err;
  280. 

#744
crypto/bn/bn_exp.c:220: error: Integer Overflow L2
  ([0, 4+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_mul_reciprocal`.
  218.     window = BN_window_bits_for_exponent_size(bits);
  219.     if (window > 1) {
  220.         if (!BN_mod_mul_reciprocal(aa, val[0], val[0], &recp, ctx))
                    ^
  221.             goto err;           /* 2 */
  222.         j = 1 << (window - 1);

#745
test/asynctest.c:171: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `ASYNC_init_thread`.
  169.     ctr = 0;
  170. 
  171.     if (       !ASYNC_init_thread(1, 0)
                       ^
  172.             || (waitctx = ASYNC_WAIT_CTX_new()) == NULL
  173.             || ASYNC_start_job(&job, waitctx, &funcret, add_two, NULL, 0)

#746
test/ec_internal_test.c:174: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `group_field_tests`.
  172.     if (!TEST_ptr(group = EC_GROUP_new_by_curve_name(nid))
  173.         || !TEST_ptr(ctx = BN_CTX_new())
  174.         || !group_field_tests(group, ctx))
                   ^
  175.         goto err;
  176. 

#747
crypto/rand/drbg_ctr.c:198: error: Integer Overflow L2
  (1 - [-37, 15]):unsigned64 by call to `ctr_BCC_update`.
  196.         || !ctr_BCC_update(ctr, in2, in2len)
  197.         || !ctr_BCC_update(ctr, in3, in3len)
  198.         || !ctr_BCC_update(ctr, &c80, 1)
                   ^
  199.         || !ctr_BCC_final(ctr))
  200.         return 0;

#748
crypto/rand/drbg_ctr.c:199: error: Integer Overflow L2
  (16 - [1, 68]):unsigned64 by call to `ctr_BCC_final`.
  197.         || !ctr_BCC_update(ctr, in3, in3len)
  198.         || !ctr_BCC_update(ctr, &c80, 1)
  199.         || !ctr_BCC_final(ctr))
                   ^
  200.         return 0;
  201.     /* Set up key K */

#749
crypto/rand/drbg_ctr.c:195: error: Integer Overflow L2
  ([1, `in1len`] - 8):unsigned64 by call to `ctr_BCC_update`.
  193.     *p = (unsigned char)((ctr->keylen + 16) & 0xff);
  194.     ctr->bltmp_pos = 8;
  195.     if (!ctr_BCC_update(ctr, in1, in1len)
                ^
  196.         || !ctr_BCC_update(ctr, in2, in2len)
  197.         || !ctr_BCC_update(ctr, in3, in3len)

#750
crypto/rand/drbg_ctr.c:196: error: Integer Overflow L2
  ([1, `in2len`] - [-7, 15]):unsigned64 by call to `ctr_BCC_update`.
  194.     ctr->bltmp_pos = 8;
  195.     if (!ctr_BCC_update(ctr, in1, in1len)
  196.         || !ctr_BCC_update(ctr, in2, in2len)
                   ^
  197.         || !ctr_BCC_update(ctr, in3, in3len)
  198.         || !ctr_BCC_update(ctr, &c80, 1)

#751
crypto/rand/drbg_ctr.c:197: error: Integer Overflow L2
  ([1, `in3len`] - [-22, 15]):unsigned64 by call to `ctr_BCC_update`.
  195.     if (!ctr_BCC_update(ctr, in1, in1len)
  196.         || !ctr_BCC_update(ctr, in2, in2len)
  197.         || !ctr_BCC_update(ctr, in3, in3len)
                   ^
  198.         || !ctr_BCC_update(ctr, &c80, 1)
  199.         || !ctr_BCC_final(ctr))

#752
crypto/evp/e_chacha20_poly1305.c:188: error: Buffer Overrun L2
  Offset: [3, 18] (<= [0, 15] + 3) Size: 16 by call to `chacha_init_key`.
  186.                    actx->nonce_len);
  187. 
  188.         chacha_init_key(ctx, inkey, temp, enc);
               ^
  189. 
  190.         actx->nonce[0] = actx->key.counter[1];

#753
crypto/init.c:167: error: Dead Store
  The value written to &ret (type int) is never used.
  165. DEFINE_RUN_ONCE_STATIC(ossl_init_load_crypto_strings)
  166. {
  167.     int ret = 1;
           ^
  168.     /*
  169.      * OPENSSL_NO_AUTOERRINIT is provided here to prevent at compile time

#754
crypto/initthread.c:179: error: Dead Store
  The value written to &hands (type thread_event_handler_st**) is never used.
  177. 
  178.         if (hands == handsin) {
  179.             hands = sk_THREAD_EVENT_HANDLER_PTR_delete(gtr->skhands, i);
                   ^
  180.             CRYPTO_THREAD_unlock(gtr->lock);
  181.             return;

#755
test/lhash_test.c:201: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `lh_int_delete`.
  199.         const int j = (7 * i + 4) % n * 3 + 1;
  200. 
  201.         if (!TEST_ptr(p = lh_int_delete(h, &j))) {
                    ^
  202.             TEST_info("lhash stress delete %d\n", i);
  203.             goto end;

#756
crypto/bn/asm/x86_64-gcc.c:188: error: Dead Store
  The value written to &n (type int) is never used.
  186.             return;
  187.         sqr(r[2], r[3], a[1]);
  188.         if (--n == 0)
                   ^
  189.             return;
  190.         sqr(r[4], r[5], a[2]);

#757
crypto/bn/bn_shift.c:195: error: Integer Overflow L2
  (0 - [0, 63]):unsigned64.
  193.     lb = BN_BITS2 - rb;
  194.     lb %= BN_BITS2;            /* say no to undefined behaviour */
  195.     mask = (BN_ULONG)0 - lb;   /* mask = 0 - (lb != 0) */
           ^
  196.     mask |= mask >> 8;
  197.     top = a->top - nw;

#758
crypto/modes/cfb128.c:183: error: Buffer Overrun L2
  Offset: [0, 15] Size: 1 by call to `cfbr_encrypt_block`.
  181.     for (n = 0; n < bits; ++n) {
  182.         c[0] = (in[n / 8] & (1 << (7 - n % 8))) ? 0x80 : 0;
  183.         cfbr_encrypt_block(c, d, 1, key, ivec, enc, block);
               ^
  184.         out[n / 8] = (out[n / 8] & ~(1 << (unsigned int)(7 - n % 8))) |
  185.             ((d[0] & 0x80) >> (unsigned int)(n % 8));

#759
crypto/bio/bf_nbio.c:176: error: Dead Store
  The value written to &ret (type long) is never used.
  174. static long nbiof_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  175. {
  176.     long ret = 1;
           ^
  177. 
  178.     if (b->next_bio == NULL)

#760
crypto/bn/bn_recp.c:192: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  190.  err:
  191.     bn_check_top(r);
  192.     BN_CTX_end(ctx);
           ^
  193.     return ret;
  194. }

#761
crypto/bn/bn_recp.c:192: error: Integer Overflow L2
  ([0, 2+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  190.  err:
  191.     bn_check_top(r);
  192.     BN_CTX_end(ctx);
           ^
  193.     return ret;
  194. }

#762
crypto/rand/randfile.c:177: error: Dead Store
  The value written to &ret (type int) is never used.
  175. {
  176.     unsigned char buf[RAND_BUF_SIZE];
  177.     int ret = -1;
           ^
  178.     FILE *out = NULL;
  179. #ifndef OPENSSL_NO_POSIX_IO

#763
ssl/record/ssl3_record.c:275: error: Integer Overflow L2
  ([0, +oo] - 2):unsigned64.
  273.                 thisrr->length = sslv2len & 0x7fff;
  274. 
  275.                 if (thisrr->length > SSL3_BUFFER_get_len(rbuf)
                           ^
  276.                     - SSL2_RT_HEADER_LENGTH) {
  277.                     SSLfatal(s, SSL_AD_RECORD_OVERFLOW, SSL_F_SSL3_GET_RECORD,

#764
ssl/record/ssl3_record.c:387: error: Integer Overflow L2
  ([0, +oo] - 5):unsigned64.
  385.                 }
  386. 
  387.                 if (thisrr->length >
                           ^
  388.                     SSL3_BUFFER_get_len(rbuf) - SSL3_RT_HEADER_LENGTH) {
  389.                     SSLfatal(s, SSL_AD_RECORD_OVERFLOW, SSL_F_SSL3_GET_RECORD,

#765
test/rsa_sp800_56b_test.c:193: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  191.           && TEST_false(rsa_check_public_exponent(e))
  192.           /* e = 2^256-1 is odd and in range */
  193.           && TEST_true(BN_sub(e, e, BN_value_one()))
                    ^
  194.           && TEST_true(rsa_check_public_exponent(e));
  195.     BN_free(e);

#766
crypto/asn1/x_int64.c:208: error: Integer Overflow L2
  (0 - [-oo, 2147483648]):unsigned64.
  206.             return 0;
  207.         }
  208.         utmp = 0 - utmp;
               ^
  209.     } else {
  210.         if (((it->size & INTxx_FLAG_SIGNED) != 0 && utmp > INT32_MAX)

#767
crypto/bn/bn_mul.c:311: error: Integer Overflow L2
  ([0, 18446744073709551615] + 1):unsigned64.
  309.                 p++;
  310.                 lo = *p;
  311.                 ln = (lo + 1) & BN_MASK2;
                       ^
  312.                 *p = ln;
  313.             } while (ln == 0);

#768
crypto/bn/bn_mul.c:213: error: Integer Overflow L2
  ([0, `a`] - [0, 1]):unsigned64 by call to `bn_sub_part_words`.
  211.     switch (c1 * 3 + c2) {
  212.     case -4:
  213.         bn_sub_part_words(t, &(a[n]), a, tna, tna - n); /* - */
               ^
  214.         bn_sub_part_words(&(t[n]), b, &(b[n]), tnb, n - tnb); /* - */
  215.         break;

#769
crypto/bn/bn_mul.c:214: error: Integer Overflow L2
  ([0, `b`] - [0, 1]):unsigned64 by call to `bn_sub_part_words`.
  212.     case -4:
  213.         bn_sub_part_words(t, &(a[n]), a, tna, tna - n); /* - */
  214.         bn_sub_part_words(&(t[n]), b, &(b[n]), tnb, n - tnb); /* - */
               ^
  215.         break;
  216.     case -3:

#770
crypto/cms/cms_pwri.c:196: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_DecryptUpdate`.
  194.     }
  195.     /* setup IV by decrypting last two blocks */
  196.     if (!EVP_DecryptUpdate(ctx, tmp + inlen - 2 * blocklen, &outl,
                ^
  197.                            in + inlen - 2 * blocklen, blocklen * 2)
  198.         /*

#771
crypto/dh/dh_key.c:228: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  226.     ret = BN_bn2bin(tmp, key);
  227.  err:
  228.     BN_CTX_end(ctx);
           ^
  229.     BN_CTX_free(ctx);
  230.     return ret;

#772
crypto/srp/srp_lib.c:195: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  193.     if ((k = srp_Calc_k(N, g)) == NULL)
  194.         goto err;
  195.     if (!BN_mod_mul(tmp2, tmp, k, N, bn_ctx))
                ^
  196.         goto err;
  197.     if (!BN_mod_sub(tmp, B, tmp2, N, bn_ctx))

#773
crypto/srp/srp_lib.c:197: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_sub`.
  195.     if (!BN_mod_mul(tmp2, tmp, k, N, bn_ctx))
  196.         goto err;
  197.     if (!BN_mod_sub(tmp, B, tmp2, N, bn_ctx))
                ^
  198.         goto err;
  199.     if (!BN_mul(tmp3, u, x, bn_ctx))

#774
ssl/tls13_enc.c:262: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  260.                                              (unsigned char *)prevsecret,
  261.                                              prevsecretlen);
  262.     *p++ = OSSL_PARAM_construct_end();
            ^
  263. 
  264.     ret = EVP_KDF_CTX_set_params(kctx, params) <= 0

#775
crypto/pem/pem_all.c:177: error: Null Dereference
  pointer `ctx` last assigned on line 177 could be null and is dereferenced by call to `OSSL_SERIALIZER_to_bio()` at line 177, column 1.
  175. IMPLEMENT_PEM_write(DHxparams, DH, PEM_STRING_DHXPARAMS, DHxparams)
  176. #endif
  177. IMPLEMENT_PEM_provided_write(PUBKEY, EVP_PKEY, PEM_STRING_PUBLIC, PUBKEY)
       ^
  178. IMPLEMENT_PEM_read(PUBKEY, EVP_PKEY, PEM_STRING_PUBLIC, PUBKEY)

#776
crypto/pem/pem_all.c:177: error: Null Dereference
  pointer `ctx` last assigned on line 177 could be null and is dereferenced by call to `OSSL_SERIALIZER_to_fp()` at line 177, column 1.
  175. IMPLEMENT_PEM_write(DHxparams, DH, PEM_STRING_DHXPARAMS, DHxparams)
  176. #endif
  177. IMPLEMENT_PEM_provided_write(PUBKEY, EVP_PKEY, PEM_STRING_PUBLIC, PUBKEY)
       ^
  178. IMPLEMENT_PEM_read(PUBKEY, EVP_PKEY, PEM_STRING_PUBLIC, PUBKEY)

#777
crypto/serializer/serializer_pkey.c:186: error: Dead Store
  The value written to &prompt_idx (type int) is never used.
  184.     const char *prompt_info = NULL;
  185.     char *prompt = NULL, *vpass = NULL;
  186.     int prompt_idx = -1, verify_idx = -1;
           ^
  187.     UI *ui = NULL;
  188.     int ret = 0;

#778
crypto/serializer/serializer_pkey.c:186: error: Dead Store
  The value written to &verify_idx (type int) is never used.
  184.     const char *prompt_info = NULL;
  185.     char *prompt = NULL, *vpass = NULL;
  186.     int prompt_idx = -1, verify_idx = -1;
           ^
  187.     UI *ui = NULL;
  188.     int ret = 0;

#779
test/packettest.c:190: error: Integer Overflow L2
  ([0, +oo] - 247):unsigned64 by call to `PACKET_forward`.
  188.             || !TEST_char_eq(bytes[3], 8)
  189.             || !TEST_size_t_eq(PACKET_remaining(&pkt), BUF_LEN - 4)
  190.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 8))
                       ^
  191.             || !TEST_true(PACKET_copy_bytes(&pkt, bytes, 4))
  192.             || !TEST_uchar_eq(bytes[0], 0xf8)

#780
test/packettest.c:184: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `PACKET_copy_bytes`.
  182. 
  183.     if (!TEST_true(PACKET_buf_init(&pkt, smbuf, BUF_LEN))
  184.             || !TEST_true(PACKET_copy_bytes(&pkt, bytes, 4))
                       ^
  185.             || !TEST_char_eq(bytes[0], 2)
  186.             || !TEST_char_eq(bytes[1], 4)

#781
crypto/rsa/rsa_sp800_56b_gen.c:221: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  219.     if (rsa->n == NULL)
  220.         rsa->n = BN_new();
  221.     if (rsa->n == NULL || !BN_mul(rsa->n, rsa->p, rsa->q, ctx))
                                  ^
  222.         goto err;
  223. 

#782
crypto/rsa/rsa_sp800_56b_gen.c:209: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_inverse`.
  207.     /* (Step 3) d = (e^-1) mod (LCM(p-1, q-1)) */
  208.     rsa->d = BN_secure_new();
  209.     if (rsa->d == NULL || BN_mod_inverse(rsa->d, e, lcm, ctx) == NULL)
                                 ^
  210.         goto err;
  211. 

#783
test/testutil/driver.c:199: error: Buffer Overrun L3
  Offset: [4, 6] Size: [5, 7] by call to `opt_help`.
  197.             return ret;
  198.         case OPT_TEST_HELP:
  199.             opt_help(test_get_options());
                   ^
  200.             return 0;
  201.         case OPT_TEST_LIST:

#784
crypto/bn/bn_mod.c:188: error: Integer Overflow L2
  ([0, max(18446744073709551615, `r->d`)] - [0, 1]):unsigned64 by call to `BN_add`.
  186.         return 0;
  187.     if (r->neg)
  188.         return BN_add(r, r, m);
                      ^
  189.     return 1;
  190. }

#785
crypto/dsa/dsa_ossl.c:235: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range`.
  233.                                        dlen, ctx))
  234.                 goto err;
  235.         } else if (!BN_priv_rand_range(k, dsa->q))
                           ^
  236.             goto err;
  237.     } while (BN_is_zero(k));

#786
test/sslcorrupttest.c:241: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  239.  end:
  240.     SSL_free(server);
  241.     SSL_free(client);
           ^
  242.     SSL_CTX_free(sctx);
  243.     SSL_CTX_free(cctx);

#787
test/sslcorrupttest.c:241: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  239.  end:
  240.     SSL_free(server);
  241.     SSL_free(client);
           ^
  242.     SSL_CTX_free(sctx);
  243.     SSL_CTX_free(cctx);

#788
test/sslcorrupttest.c:240: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  238.     testresult = 1;
  239.  end:
  240.     SSL_free(server);
           ^
  241.     SSL_free(client);
  242.     SSL_CTX_free(sctx);

#789
test/sslcorrupttest.c:240: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  238.     testresult = 1;
  239.  end:
  240.     SSL_free(server);
           ^
  241.     SSL_free(client);
  242.     SSL_CTX_free(sctx);

#790
crypto/sparse_array.c:185: error: Dead Store
  The value written to &level (type int) is never used.
  183. int OPENSSL_SA_set(OPENSSL_SA *sa, ossl_uintmax_t posn, void *val)
  184. {
  185.     int i, level = 1;
           ^
  186.     ossl_uintmax_t n = posn;
  187.     void **p;

#791
test/verify_extra_test.c:219: error: Null Dereference
  pointer `bio` last assigned on line 192 could be null and is dereferenced by call to `BIO_free()` at line 219, column 5.
  217.  err:
  218.     X509_free(x);
  219.     BIO_free(bio);
           ^
  220.     return ret;
  221. }

#792
include/internal/constant_time.h:187: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  185.                                                  unsigned int b)
  186. {
  187.     return constant_time_is_zero(a ^ b);
                  ^
  188. }
  189. 

#793
crypto/engine/tb_asnmth.c:201: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `engine_table_doall`.
  199. 
  200.     CRYPTO_THREAD_write_lock(global_engine_lock);
  201.     engine_table_doall(pkey_asn1_meth_table, look_str_cb, &fstr);
           ^
  202.     /* If found obtain a structural reference to engine */
  203.     if (fstr.e) {

#794
crypto/property/property.c:257: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `alg_cleanup`.
  255. err:
  256.     ossl_property_unlock(store);
  257.     alg_cleanup(0, alg);
           ^
  258.     impl_free(impl);
  259.     return 0;

#795
crypto/sm2/sm2_sign.c:235: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  233.         }
  234. 
  235.         if (!EC_POINT_mul(group, kG, k, NULL, NULL, ctx)
                    ^
  236.                 || !EC_POINT_get_affine_coordinates(group, kG, x1, NULL,
  237.                                                     ctx)

#796
crypto/sm2/sm2_sign.c:230: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range`.
  228. 
  229.     for (;;) {
  230.         if (!BN_priv_rand_range(k, order)) {
                    ^
  231.             SM2err(SM2_F_SM2_SIG_GEN, ERR_R_INTERNAL_ERROR);
  232.             goto done;

#797
crypto/cms/cms_kari.c:211: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  209.     if (out == NULL)
  210.         goto err;
  211.     if (!EVP_CipherUpdate(kari->ctx, out, &outlen, in, inlen))
                ^
  212.         goto err;
  213.     *pout = out;

#798
crypto/cmp/cmp_status.c:216: error: Integer Overflow L2
  ([0, max(2147483647, `bufsize`)] - 1):unsigned64 by call to `BIO_snprintf`.
  214.     /* failInfo is optional and may be empty */
  215.     if ((fail_info = OSSL_CMP_CTX_get_failInfoCode(ctx)) > 0) {
  216.         printed_chars = BIO_snprintf(write_ptr, bufsize, "; PKIFailureInfo: ");
                               ^
  217.         ADVANCE_BUFFER;
  218.         for (failure = 0; failure <= OSSL_CMP_PKIFAILUREINFO_MAX; failure++) {

#799
crypto/cmp/cmp_status.c:222: error: Integer Overflow L2
  ([0, max(2147483647, `bufsize`)] - 1):unsigned64 by call to `BIO_snprintf`.
  220.                 failure_string = CMP_PKIFAILUREINFO_to_string(failure);
  221.                 if (failure_string != NULL) {
  222.                     printed_chars = BIO_snprintf(write_ptr, bufsize, "%s%s",
                                           ^
  223.                                                  failure > 0 ? ", " : "",
  224.                                                  failure_string);

#800
crypto/cmp/cmp_status.c:233: error: Integer Overflow L2
  ([0, max(2147483647, `bufsize`)] - 1):unsigned64 by call to `BIO_snprintf`.
  231.     if (!failinfo_found && status != OSSL_CMP_PKISTATUS_accepted
  232.             && status != OSSL_CMP_PKISTATUS_grantedWithMods) {
  233.         printed_chars = BIO_snprintf(write_ptr, bufsize, "; <no failure info>");
                               ^
  234.         ADVANCE_BUFFER;
  235.     }

#801
crypto/cmp/cmp_status.c:241: error: Integer Overflow L2
  ([0, max(2147483647, `bufsize`)] - 1):unsigned64 by call to `BIO_snprintf`.
  239.     n_status_strings = sk_ASN1_UTF8STRING_num(status_strings);
  240.     if (n_status_strings > 0) {
  241.         printed_chars = BIO_snprintf(write_ptr, bufsize, "; StatusString%s: ",
                               ^
  242.                                      n_status_strings > 1 ? "s" : "");
  243.         ADVANCE_BUFFER;

#802
test/servername_test.c:216: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  214. end:
  215.     SSL_free(serverssl);
  216.     SSL_free(clientssl);
           ^
  217.     SSL_CTX_free(sctx);
  218.     SSL_CTX_free(cctx);

#803
test/servername_test.c:216: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  214. end:
  215.     SSL_free(serverssl);
  216.     SSL_free(clientssl);
           ^
  217.     SSL_CTX_free(sctx);
  218.     SSL_CTX_free(cctx);

#804
test/servername_test.c:215: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  213.     testresult = 1;
  214. end:
  215.     SSL_free(serverssl);
           ^
  216.     SSL_free(clientssl);
  217.     SSL_CTX_free(sctx);

#805
test/servername_test.c:215: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  213.     testresult = 1;
  214. end:
  215.     SSL_free(serverssl);
           ^
  216.     SSL_free(clientssl);
  217.     SSL_CTX_free(sctx);

#806
crypto/ec/ecdsa_ossl.c:289: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul_montgomery`.
  287.          */
  288.         if (!bn_to_mont_fixed_top(s, s, group->mont_data, ctx)
  289.             || !BN_mod_mul_montgomery(s, s, ckinv, group->mont_data, ctx)) {
                       ^
  290.             ECerr(EC_F_ECDSA_SIMPLE_SIGN_SIG, ERR_R_BN_LIB);
  291.             goto err;

#807
crypto/ec/ecdsa_ossl.c:276: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_mul_mont_fixed_top`.
  274.          */
  275.         if (!bn_to_mont_fixed_top(s, ret->r, group->mont_data, ctx)
  276.             || !bn_mul_mont_fixed_top(s, s, priv_key, group->mont_data, ctx)) {
                       ^
  277.             ECerr(EC_F_ECDSA_SIMPLE_SIGN_SIG, ERR_R_BN_LIB);
  278.             goto err;

#808
crypto/ec/ecdsa_ossl.c:288: error: Integer Overflow L2
  ([0, 3] - 1):unsigned32 by call to `bn_to_mont_fixed_top`.
  286.          * such case we count on Montgomery reduction to tie it up.
  287.          */
  288.         if (!bn_to_mont_fixed_top(s, s, group->mont_data, ctx)
                    ^
  289.             || !BN_mod_mul_montgomery(s, s, ckinv, group->mont_data, ctx)) {
  290.             ECerr(EC_F_ECDSA_SIMPLE_SIGN_SIG, ERR_R_BN_LIB);

#809
crypto/dh/dh_check.c:221: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  219.     ok = 1;
  220.  err:
  221.     BN_CTX_end(ctx);
           ^
  222.     BN_CTX_free(ctx);
  223.     return ok;

#810
include/internal/constant_time.h:192: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `constant_time_is_zero_s`.
  190. static ossl_inline size_t constant_time_eq_s(size_t a, size_t b)
  191. {
  192.     return constant_time_is_zero_s(a ^ b);
                  ^
  193. }
  194. 

#811
test/asynctest.c:199: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `ASYNC_init_thread`.
  197.     currjob = NULL;
  198. 
  199.     if (       !ASYNC_init_thread(1, 0)
                       ^
  200.             || (waitctx = ASYNC_WAIT_CTX_new()) == NULL
  201.             || ASYNC_start_job(&job, waitctx, &funcret, save_current, NULL, 0)

#812
crypto/bn/bn_mod.c:218: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  216.     ret = 1;
  217.  err:
  218.     BN_CTX_end(ctx);
           ^
  219.     return ret;
  220. }

#813
crypto/bn/bn_mod.c:213: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_nnmod`.
  211.             goto err;
  212.     }
  213.     if (!BN_nnmod(r, t, m, ctx))
                ^
  214.         goto err;
  215.     bn_check_top(r);

#814
crypto/bn/bn_mod.c:218: error: Integer Overflow L2
  ([0, 3+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  216.     ret = 1;
  217.  err:
  218.     BN_CTX_end(ctx);
           ^
  219.     return ret;
  220. }

#815
crypto/bn/bn_mod.c:213: error: Integer Overflow L2
  ([0, 3+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_nnmod`.
  211.             goto err;
  212.     }
  213.     if (!BN_nnmod(r, t, m, ctx))
                ^
  214.         goto err;
  215.     bn_check_top(r);

#816
crypto/bio/bss_mem.c:196: error: Dead Store
  The value written to &ret (type int) is never used.
  194. static int mem_read(BIO *b, char *out, int outl)
  195. {
  196.     int ret = -1;
           ^
  197.     BIO_BUF_MEM *bbm = (BIO_BUF_MEM *)b->ptr;
  198.     BUF_MEM *bm = bbm->readp;

#817
crypto/des/des_enc.c:230: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  228.         }
  229.         if (l != -8) {
  230.             c2ln(in, tin0, tin1, l + 8);
                   ^
  231.             tin0 ^= tout0;
  232.             tin1 ^= tout1;

#818
crypto/des/des_enc.c:273: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  271.         if (l != -8) {
  272.             c2l(in, tin0);
  273.             c2l(in, tin1);
                   ^
  274. 
  275.             t0 = tin0;

#819
crypto/des/des_enc.c:213: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  211.     if (enc) {
  212.         c2l(iv, tout0);
  213.         c2l(iv, tout1);
               ^
  214.         for (l -= 8; l >= 0; l -= 8) {
  215.             c2l(in, tin0);

#820
crypto/des/des_enc.c:245: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  243.         iv = &(*ivec)[0];
  244.         l2c(tout0, iv);
  245.         l2c(tout1, iv);
               ^
  246.     } else {
  247.         register DES_LONG t0, t1;

#821
crypto/des/des_enc.c:250: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  248. 
  249.         c2l(iv, xor0);
  250.         c2l(iv, xor1);
               ^
  251.         for (l -= 8; l >= 0; l -= 8) {
  252.             c2l(in, tin0);

#822
crypto/des/des_enc.c:293: error: Dead Store
  The value written to &iv (type unsigned char*) is never used.
  291.         iv = &(*ivec)[0];
  292.         l2c(xor0, iv);
  293.         l2c(xor1, iv);
               ^
  294.     }
  295.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;

#823
crypto/des/des_enc.c:241: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  239. 
  240.             l2c(tout0, out);
  241.             l2c(tout1, out);
                   ^
  242.         }
  243.         iv = &(*ivec)[0];

#824
crypto/des/des_enc.c:286: error: Dead Store
  The value written to &out (type unsigned char*) is never used.
  284.             tout0 ^= xor0;
  285.             tout1 ^= xor1;
  286.             l2cn(tout0, tout1, out, l + 8);
                   ^
  287.             xor0 = t0;
  288.             xor1 = t1;

#825
crypto/des/des_enc.c:295: error: Dead Store
  The value written to &tin0 (type unsigned int) is never used.
  293.         l2c(xor1, iv);
  294.     }
  295.     tin0 = tin1 = tout0 = tout1 = xor0 = xor1 = 0;
           ^
  296.     tin[0] = tin[1] = 0;
  297. }

#826
ssl/statem/extensions_clnt.c:234: error: Buffer Overrun L2
  Offset: [0, max(10, `s->ext.supportedgroups_len`)] (<= [0, 1] + [0, -1+max(10, `s->ext.supportedgroups_len`)]) Size: 2.
  232.     /* Copy group ID if supported */
  233.     for (i = 0; i < num_groups; i++) {
  234.         uint16_t ctmp = pgroups[i];
                               ^
  235. 
  236.         if (tls_valid_group(s, ctmp, max_version)

#827
ssl/statem/extensions_clnt.c:225: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  223.                /* Sub-packet for supported_groups extension */
  224.             || !WPACKET_start_sub_packet_u16(pkt)
  225.             || !WPACKET_start_sub_packet_u16(pkt)
                       ^
  226.             || !WPACKET_set_flags(pkt, WPACKET_FLAGS_NON_ZERO_LENGTH)) {
  227.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#828
crypto/evp/evp_fetch.c:227: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_method_store_add`.
  225.         return 0;
  226. 
  227.     return ossl_method_store_add(store, prov, meth_id, propdef, method,
                  ^
  228.                                  methdata->refcnt_up_method,
  229.                                  methdata->destruct_method);

#829
crypto/engine/eng_dyn.c:218: error: Dead Store
  The value written to &new_idx (type int) is never used.
  216.             /* Good, someone didn't beat us to it */
  217.             dynamic_ex_data_idx = new_idx;
  218.             new_idx = -1;
                   ^
  219.         }
  220.         CRYPTO_THREAD_unlock(global_engine_lock);

#830
crypto/evp/bio_md.c:200: error: Dead Store
  The value written to &ret (type long) is never used.
  198. static long md_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  199. {
  200.     long ret = 1;
           ^
  201.     BIO *next;
  202. 

#831
crypto/bn/bn_conv.c:236: error: Integer Overflow L2
  ([4, 2147483584] + 64):signed32 by call to `bn_expand`.
  234. 
  235.     /* i is the number of digits, a bit of an over expand */
  236.     if (bn_expand(ret, i * 4) == NULL)
               ^
  237.         goto err;
  238. 

#832
test/rsa_sp800_56b_test.c:222: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_check_prime_factor_range`.
  220.           && TEST_ptr(ctx = BN_CTX_new())
  221.           && TEST_true(BN_set_word(p, 0xA))
  222.           && TEST_false(rsa_check_prime_factor_range(p, 8, ctx))
                    ^
  223.           && TEST_true(BN_set_word(p, 0x10))
  224.           && TEST_false(rsa_check_prime_factor_range(p, 8, ctx))

#833
crypto/asn1/tasn_enc.c:298: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
  296.             skcontlen += tmplen;
  297.         }
  298.         sklen = ASN1_object_size(ndef, skcontlen, sktag);
                       ^
  299.         if (sklen == -1)
  300.             return -1;

#834
crypto/rsa/rsa_sp800_56b_check.c:209: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  207.     int bitlen = (nbits >> 1) - 100;
  208. 
  209.     if (!BN_sub(diff, p, q))
                ^
  210.         return -1;
  211.     BN_set_negative(diff, 0);

#835
test/testutil/format_output.c:255: error: Buffer Overrun L2
  Offset: [min(1, `r[*].strlen`), max(4, `r[*].strlen`)] Size: 2.
  253.     else
  254.         r = BN_is_negative(bn) ? "-0" : "0";
  255.     strcpy(p - strlen(r), r);
           ^
  256.     return 0;
  257. }

#836
crypto/evp/pkey_mac.c:248: error: Dead Store
  The value written to &params_n (type unsigned long) is never used.
  246.                 OSSL_PARAM_construct_octet_string(OSSL_MAC_PARAM_KEY,
  247.                                                   key->data, key->length);
  248.         params[params_n++] = OSSL_PARAM_construct_end();
                      ^
  249.         rv = EVP_MAC_CTX_set_params(hctx->ctx, params);
  250.     }

#837
crypto/evp/pkey_mac.c:210: error: Dead Store
  The value written to &rv (type int) is never used.
  208.     MAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(ctx);
  209.     ASN1_OCTET_STRING *key = NULL;
  210.     int rv = 1;
           ^
  211.     /*
  212.      * For MACs with the EVP_PKEY_FLAG_SIGCTX_CUSTOM flag set and that

#838
test/cipherlist_test.c:211: error: Buffer Overrun L1
  Offset: [9, +oo] (<= [0, +oo] + 9) Size: 8 by call to `SSL_CTX_set_cipher_list`.
  209.     if (fixture == NULL)
  210.         return 0;
  211.     if (!TEST_true(SSL_CTX_set_cipher_list(fixture->server, "DEFAULT"))
                ^
  212.             || !TEST_true(SSL_CTX_set_cipher_list(fixture->client, "DEFAULT")))
  213.         tear_down(fixture);

#839
test/cipherlist_test.c:211: error: Buffer Overrun L2
  Offset: [0, 8] Size: 8 by call to `SSL_CTX_set_cipher_list`.
  209.     if (fixture == NULL)
  210.         return 0;
  211.     if (!TEST_true(SSL_CTX_set_cipher_list(fixture->server, "DEFAULT"))
                ^
  212.             || !TEST_true(SSL_CTX_set_cipher_list(fixture->client, "DEFAULT")))
  213.         tear_down(fixture);

#840
providers/implementations/kdfs/sshkdf.c:272: error: Buffer Overrun L3
  Offset added: [-1, +oo] Size: 64.
  270.         }
  271. 
  272.         memcpy(okey + cursize, digest, dsize);
               ^
  273.     }
  274. 

#841
test/sm2_internal_test.c:214: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 2 by call to `create_EC_group`.
  212.     int testresult = 0;
  213.     EC_GROUP *test_group =
  214.         create_EC_group
               ^
  215.         ("8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3",
  216.          "787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498",

#842
test/sm2_internal_test.c:214: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 2 by call to `create_EC_group`.
  212.     int testresult = 0;
  213.     EC_GROUP *test_group =
  214.         create_EC_group
               ^
  215.         ("8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3",
  216.          "787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498",

#843
crypto/x509/by_dir.c:224: error: Dead Store
  The value written to &postfix (type char*) is never used.
  222.     BUF_MEM *b = NULL;
  223.     X509_OBJECT stmp, *tmp;
  224.     const char *postfix = "";
           ^
  225. 
  226.     if (name == NULL)

#844
crypto/x509/by_dir.c:302: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `BIO_snprintf`.
  300.                              "%s%08lx.%s%d", ent->dir, h, postfix, k);
  301.             } else {
  302.                 BIO_snprintf(b->data, b->max,
                       ^
  303.                              "%s%c%08lx.%s%d", ent->dir, c, h, postfix, k);
  304.             }

#845
crypto/evp/e_chacha20_poly1305.c:344: error: Buffer Overrun L2
  Offset: [1, 57] Size: 16 by call to `Poly1305_Final`.
  342.     Poly1305_Update(POLY1305_ctx(actx), tohash, tohash_len);
  343.     OPENSSL_cleanse(buf, buf_len);
  344.     Poly1305_Final(POLY1305_ctx(actx), ctx->encrypt ? actx->tag
           ^
  345.                                                     : tohash);
  346. 

#846
crypto/evp/e_chacha20_poly1305.c:309: error: Buffer Overrun L3
  Offset added: [-13, 15] Size: 2048 by call to `Poly1305_Update`.
  307.         out += plen;
  308.         tail = (0 - plen) & (POLY1305_BLOCK_SIZE - 1);
  309.         Poly1305_Update(POLY1305_ctx(actx), zero, tail);
               ^
  310.     }
  311. 

#847
crypto/evp/e_chacha20_poly1305.c:308: error: Integer Overflow L1
  (0 - [max(193, `ctx->cipher_data->tls_payload_length`), `ctx->cipher_data->tls_payload_length`]):unsigned64.
  306.         in += plen;
  307.         out += plen;
  308.         tail = (0 - plen) & (POLY1305_BLOCK_SIZE - 1);
               ^
  309.         Poly1305_Update(POLY1305_ctx(actx), zero, tail);
  310.     }

#848
crypto/evp/e_chacha20_poly1305.c:342: error: Integer Overflow L2
  (16 - [1, 43]):unsigned64 by call to `Poly1305_Update`.
  340.     }
  341. 
  342.     Poly1305_Update(POLY1305_ctx(actx), tohash, tohash_len);
           ^
  343.     OPENSSL_cleanse(buf, buf_len);
  344.     Poly1305_Final(POLY1305_ctx(actx), ctx->encrypt ? actx->tag

#849
crypto/evp/e_chacha20_poly1305.c:309: error: Integer Overflow L2
  ([-15, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  307.         out += plen;
  308.         tail = (0 - plen) & (POLY1305_BLOCK_SIZE - 1);
  309.         Poly1305_Update(POLY1305_ctx(actx), zero, tail);
               ^
  310.     }
  311. 

#850
engines/e_afalg.c:214: error: Dead Store
  The value written to &r (type int) is never used.
  212. static int afalg_init_aio(afalg_aio *aio)
  213. {
  214.     int r = -1;
           ^
  215. 
  216.     /* Initialise for AIO */

#851
crypto/bn/bn_x931p.c:241: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  239. 
  240.  error:
  241.     BN_CTX_end(ctx);
           ^
  242. 
  243.     return ret;

#852
crypto/modes/gcm128.c:247: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  245.     REDUCE1BIT(V);
  246.     Htable[4] = V;
  247.     REDUCE1BIT(V);
           ^
  248.     Htable[2] = V;
  249.     REDUCE1BIT(V);

#853
test/ssltest_old.c:229: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_set_SSL_CTX`.
  227.             !strcasecmp(servername, sn_server2)) {
  228.             BIO_printf(bio_stdout, "Switching server context.\n");
  229.             SSL_set_SSL_CTX(s, s_ctx2);
                   ^
  230.         }
  231.     }

#854
crypto/ec/ecp_mont.c:257: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  255. 
  256.   err:
  257.     BN_CTX_end(ctx);
           ^
  258.     BN_CTX_free(new_ctx);
  259.     return ret;

#855
crypto/ec/ecp_mont.c:239: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  237.     if (!BN_set_word(e, 2))
  238.         goto err;
  239.     if (!BN_sub(e, group->field, e))
                ^
  240.         goto err;
  241.     /*-

#856
test/asynctest.c:226: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `ASYNC_init_thread`.
  224.     size_t numfds, numdelfds;
  225. 
  226.     if (       !ASYNC_init_thread(1, 0)
                       ^
  227.             || (waitctx = ASYNC_WAIT_CTX_new()) == NULL
  228.                /* On first run we're not expecting any wait fds */

#857
test/cipherlist_test.c:227: error: Buffer Overrun L1
  Offset: [9, +oo] (<= [0, +oo] + 9) Size: 8 by call to `SSL_CTX_set_cipher_list`.
  225.         return 0;
  226. 
  227.     if (!TEST_int_eq(SSL_CTX_set_cipher_list(fixture->server, "no-such"), 0))
                ^
  228.         goto end;
  229. 

#858
test/cipherlist_test.c:227: error: Buffer Overrun L2
  Offset: [0, 8] Size: 8 by call to `SSL_CTX_set_cipher_list`.
  225.         return 0;
  226. 
  227.     if (!TEST_int_eq(SSL_CTX_set_cipher_list(fixture->server, "no-such"), 0))
                ^
  228.         goto end;
  229. 

#859
test/ct_test.c:298: error: Null Dereference
  pointer `&scts` last assigned on line 223 could be null and is dereferenced by call to `o2i_SCT_LIST()` at line 298, column 14.
  296.         const unsigned char *p = fixture->tls_sct_list;
  297. 
  298.         if (!TEST_ptr(o2i_SCT_LIST(&scts, &p, fixture->tls_sct_list_len)))
                    ^
  299.             goto end;
  300. 

#860
test/bioprinttest.c:238: error: Dead Store
  The value written to &t (type int) is never used.
  236.         && TEST_true(dofptest(i, t++, 666.0 + frac, pwp->w, pwp->p))
  237.         && TEST_true(dofptest(i, t++, 6666.0 + frac, pwp->w, pwp->p))
  238.         && TEST_true(dofptest(i, t++, 66666.0 + frac, pwp->w, pwp->p));
                  ^
  239.     if (justprint)
  240.         printf("    },\n");

#861
crypto/bn/bn_mod.c:227: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
  225.         return 0;
  226.     /* r->neg == 0,  thus we don't need BN_nnmod */
  227.     return BN_mod(r, r, m, ctx);
                  ^
  228. }
  229. 

#862
crypto/bn/bn_mod.c:227: error: Integer Overflow L2
  ([0, 2+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_div`.
  225.         return 0;
  226.     /* r->neg == 0,  thus we don't need BN_nnmod */
  227.     return BN_mod(r, r, m, ctx);
                  ^
  228. }
  229. 

#863
crypto/rsa/rsa_sp800_56b_check.c:229: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_gcd`.
  227.            && BN_sub(q1, q, BN_value_one()) /* q-1 */
  228.            && BN_mul(p1q1, p1, q1, ctx)     /* (p-1)(q-1) */
  229.            && BN_gcd(gcd, p1, q1, ctx)
                     ^
  230.            && BN_div(lcm, NULL, p1q1, gcd, ctx); /* LCM((p-1, q-1)) */
  231. }

#864
crypto/rsa/rsa_sp800_56b_check.c:226: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  224.                 BIGNUM *p1q1)
  225. {
  226.     return BN_sub(p1, p, BN_value_one())    /* p-1 */
                  ^
  227.            && BN_sub(q1, q, BN_value_one()) /* q-1 */
  228.            && BN_mul(p1q1, p1, q1, ctx)     /* (p-1)(q-1) */

#865
crypto/rsa/rsa_sp800_56b_check.c:230: error: Integer Overflow L2
  ([0, 3+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_div`.
  228.            && BN_mul(p1q1, p1, q1, ctx)     /* (p-1)(q-1) */
  229.            && BN_gcd(gcd, p1, q1, ctx)
  230.            && BN_div(lcm, NULL, p1q1, gcd, ctx); /* LCM((p-1, q-1)) */
                     ^
  231. }
  232. 

#866
ssl/record/rec_layer_d1.c:230: error: Dead Store
  The value written to &replayok (type int) is never used.
  228.     DTLS1_BITMAP *bitmap;
  229.     unsigned int is_next_epoch;
  230.     int replayok = 1;
           ^
  231. 
  232.     item = pqueue_peek(s->rlayer.d->unprocessed_rcds.q);

#867
test/verify_extra_test.c:259: error: Null Dereference
  pointer `bio` last assigned on line 232 could be null and is dereferenced by call to `BIO_free()` at line 259, column 5.
  257.  err:
  258.     X509_REQ_free(x);
  259.     BIO_free(bio);
           ^
  260.     return ret;
  261. }

#868
test/bntest.c:248: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  246.             BN_set_negative(b, rand_neg());
  247.         }
  248.         if (!(TEST_true(BN_sub(c, a, b))
                     ^
  249.                 && TEST_true(BN_add(c, c, b))
  250.                 && TEST_true(BN_sub(c, c, a))

#869
apps/cms.c:273: error: Buffer Overrun L3
  Offset: [0, 21] Size: [1, 22] by call to `opt_help`.
  271.             goto end;
  272.         case OPT_HELP:
  273.             opt_help(cms_options);
                   ^
  274.             ret = 0;
  275.             goto end;

#870
apps/cms.c:634: error: Dead Store
  The value written to &argc (type int) is never used.
  632.         }
  633.     }
  634.     argc = opt_num_rest();
           ^
  635.     argv = opt_rest();
  636. 

#871
apps/cms.c:250: error: Dead Store
  The value written to &keyidx (type int) is never used.
  248.     char *to = NULL, *from = NULL, *subject = NULL, *prog;
  249.     cms_key_param *key_first = NULL, *key_param = NULL;
  250.     int flags = CMS_DETACHED, noout = 0, print = 0, keyidx = -1, vpmtouched = 0;
           ^
  251.     int informat = FORMAT_SMIME, outformat = FORMAT_SMIME;
  252.     int operation = 0, ret = 1, rr_print = 0, rr_allorfirst = -1;

#872
crypto/ec/ec_key.c:276: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  274. 
  275.     /* Step (8) : pub_key = priv_key * G (where G is a point on the curve) */
  276.     if (!EC_POINT_mul(group, pub_key, priv_key, NULL, NULL, ctx))
                ^
  277.         goto err;
  278. 

#873
crypto/ec/ec_key.c:264: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range_ex`.
  262.      */
  263.     do
  264.         if (!BN_priv_rand_range_ex(priv_key, order, ctx))
                    ^
  265.             goto err;
  266.     while (BN_is_zero(priv_key)) ;

#874
crypto/ec/curve448/curve448.c:237: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `curve448_scalar_halve`.
  235. 
  236.     curve448_scalar_add(scalar1x, scalar, precomputed_scalarmul_adjustment);
  237.     curve448_scalar_halve(scalar1x, scalar1x);
           ^
  238. 
  239.     for (i = s; i > 0; i--) {

#875
crypto/rand/drbg_ctr.c:237: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_CipherUpdate`.
  235.     /* correct key is already set up. */
  236.     inc_128(ctr);
  237.     if (!EVP_CipherUpdate(ctr->ctx, ctr->K, &outlen, ctr->V, AES_BLOCK_SIZE)
                ^
  238.         || outlen != AES_BLOCK_SIZE)
  239.         return 0;

#876
apps/req.c:276: error: Buffer Overrun L3
  Offset: [0, 14] Size: [1, 15] by call to `opt_help`.
  274.             goto end;
  275.         case OPT_HELP:
  276.             opt_help(req_options);
                   ^
  277.             ret = 0;
  278.             goto end;

#877
apps/req.c:264: error: Dead Store
  The value written to &cipher (type evp_cipher_st const *) is never used.
  262. 
  263. #ifndef OPENSSL_NO_DES
  264.     cipher = EVP_des_ede3_cbc();
           ^
  265. #endif
  266. 

#878
apps/req.c:364: error: Dead Store
  The value written to &nodes (type int) is never used.
  362.             break;
  363.         case OPT_NODES:
  364.             nodes = 1;
                   ^
  365.             break;
  366.         case OPT_NOOUT:

#879
apps/req.c:1035: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `lh_OPENSSL_STRING_doall`.
  1033.     sk_OPENSSL_STRING_free(pkeyopts);
  1034.     sk_OPENSSL_STRING_free(sigopts);
  1035.     lh_OPENSSL_STRING_doall(addexts, exts_cleanup);
            ^
  1036.     lh_OPENSSL_STRING_free(addexts);
  1037. #ifndef OPENSSL_NO_ENGINE

#880
apps/srp.c:254: error: Buffer Overrun L3
  Offset: [2, 9] Size: [3, 10] by call to `opt_help`.
  252.             goto end;
  253.         case OPT_HELP:
  254.             opt_help(srp_options);
                   ^
  255.             ret = 0;
  256.             goto end;

#881
apps/srp.c:410: error: Dead Store
  The value written to &userindex (type int) is never used.
  408. 
  409.     while (mode == OPT_LIST || user != NULL) {
  410.         int userindex = -1;
               ^
  411. 
  412.         if (user != NULL && verbose > 1)

#882
ssl/statem/statem_lib.c:329: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  327. #endif
  328. 
  329.     if (!WPACKET_sub_memcpy_u16(pkt, sig, siglen)) {
                ^
  330.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CERT_VERIFY,
  331.                  ERR_R_INTERNAL_ERROR);

#883
test/property_test.c:252: error: Buffer Overrun L3
  Offset added: [1, 11] Size: [0, +oo] by call to `ossl_method_store_add`.
  250. 
  251.     for (i = 0; i < OSSL_NELEM(impls); i++)
  252.         if (!TEST_true(ossl_method_store_add(store, NULL, impls[i].nid,
                    ^
  253.                                              impls[i].prop, impls[i].impl,
  254.                                              &up_ref, &down_ref))) {

#884
test/property_test.c:252: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_method_store_add`.
  250. 
  251.     for (i = 0; i < OSSL_NELEM(impls); i++)
  252.         if (!TEST_true(ossl_method_store_add(store, NULL, impls[i].nid,
                    ^
  253.                                              impls[i].prop, impls[i].impl,
  254.                                              &up_ref, &down_ref))) {

#885
crypto/asn1_dsa.c:243: error: Integer Overflow L2
  ([1, +oo] - [0, 127]):unsigned64 by call to `decode_der_length`.
  241.             || !PACKET_get_1(&pkt, &tag)
  242.             || tag != ID_SEQUENCE
  243.             || !decode_der_length(&pkt, &contpkt)
                       ^
  244.             || !decode_der_integer(&contpkt, r)
  245.             || !decode_der_integer(&contpkt, s)

#886
crypto/bn/bn_blind.c:294: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_exp`.
  292.             goto err;
  293.     } else {
  294.         if (!BN_mod_exp(ret->A, ret->A, ret->e, ret->mod, ctx))
                    ^
  295.             goto err;
  296.     }

#887
crypto/bn/bn_blind.c:299: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_to_mont_fixed_top`.
  297. 
  298.     if (ret->m_ctx != NULL) {
  299.         if (!bn_to_mont_fixed_top(ret->Ai, ret->Ai, ret->m_ctx, ctx)
                    ^
  300.             || !bn_to_mont_fixed_top(ret->A, ret->A, ret->m_ctx, ctx))
  301.             goto err;

#888
crypto/bn/bn_blind.c:300: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_to_mont_fixed_top`.
  298.     if (ret->m_ctx != NULL) {
  299.         if (!bn_to_mont_fixed_top(ret->Ai, ret->Ai, ret->m_ctx, ctx)
  300.             || !bn_to_mont_fixed_top(ret->A, ret->A, ret->m_ctx, ctx))
                       ^
  301.             goto err;
  302.     }

#889
crypto/bn/bn_blind.c:273: error: Integer Overflow L2
  ([0, `b->mod->d`] - [0, 1]):unsigned64 by call to `BN_priv_rand_range_ex`.
  271.     do {
  272.         int rv;
  273.         if (!BN_priv_rand_range_ex(ret->A, ret->mod, ctx))
                    ^
  274.             goto err;
  275.         if (int_bn_mod_inverse(ret->Ai, ret->A, ret->mod, ctx, &rv))

#890
crypto/rsa/rsa_ossl.c:295: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_get_blinding`.
  293. 
  294.     if (!(rsa->flags & RSA_FLAG_NO_BLINDING)) {
  295.         blinding = rsa_get_blinding(rsa, &local_blinding, ctx);
                          ^
  296.         if (blinding == NULL) {
  297.             RSAerr(RSA_F_RSA_OSSL_PRIVATE_ENCRYPT, ERR_R_INTERNAL_ERROR);

#891
crypto/rsa/rsa_ossl.c:345: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  343. 
  344.     if (padding == RSA_X931_PADDING) {
  345.         if (!BN_sub(f, rsa->n, ret))
                    ^
  346.             goto err;
  347.         if (BN_cmp(ret, f) > 0)

#892
crypto/bio/b_sock.c:237: error: Dead Store
  The value written to &ret (type int) is never used.
  235. {
  236.     BIO_ADDR res;
  237.     int ret = -1;
           ^
  238. 
  239.     ret = BIO_accept_ex(sock, &res, 0);

#893
crypto/bn/bn_rsa_fips186_4.c:291: error: Integer Overflow L2
  (0 - [0, max(1, `r2->top`)]):unsigned64 by call to `BN_mul`.
  289.             && BN_sub(R, R, tmp)
  290.             /* Calculate 2r1r2 */
  291.             && BN_mul(r1r2x2, r1x2, r2, ctx)))
                      ^
  292.         goto err;
  293.     /* Make positive by adding the modulus */

#894
crypto/bn/bn_rsa_fips186_4.c:286: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  284.             /* (Step 2) R = ((r2^-1 mod 2r1) * r2) - ((2r1^-1 mod r2)*2r1) */
  285.             && BN_mod_inverse(R, r2, r1x2, ctx)
  286.             && BN_mul(R, R, r2, ctx) /* R = (r2^-1 mod 2r1) * r2 */
                      ^
  287.             && BN_mod_inverse(tmp, r1x2, r2, ctx)
  288.             && BN_mul(tmp, tmp, r1x2, ctx) /* tmp = (2r1^-1 mod r2)*2r1 */

#895
crypto/bn/bn_rsa_fips186_4.c:276: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  274.         if (!BN_lshift(base, &bn_inv_sqrt_2, bits - BN_num_bits(&bn_inv_sqrt_2))
  275.             || !BN_lshift(range, BN_value_one(), bits)
  276.             || !BN_sub(range, range, base))
                       ^
  277.             goto err;
  278.     }

#896
crypto/txt_db/txt_db.c:275: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `lh_OPENSSL_STRING_delete`.
  273.             if ((db->qual[i] != NULL) && (db->qual[i] (row) == 0))
  274.                 continue;
  275.             (void)lh_OPENSSL_STRING_delete(db->index[i], row);
                         ^
  276.         }
  277.     }

#897
crypto/rsa/rsa_sp800_56b_check.c:277: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_gcd`.
  275.      * The modulus has no factors smaller than 752.
  276.      */
  277.     if (!BN_gcd(gcd, rsa->n, bn_get0_small_factors(), ctx) || !BN_is_one(gcd)) {
                ^
  278.         RSAerr(RSA_F_RSA_SP800_56B_CHECK_PUBLIC, RSA_R_INVALID_MODULUS);
  279.         goto err;

#898
apps/provider.c:255: error: Buffer Overrun L3
  Offset: [1, 8] Size: [2, 9] by call to `opt_help`.
  253.             goto end;
  254.         case OPT_HELP:
  255.             opt_help(provider_options);
                   ^
  256.             ret = 0;
  257.             goto end;

#899
apps/provider.c:270: error: Dead Store
  The value written to &argc (type int) is never used.
  268. 
  269.     /* Allow any trailing parameters as provider names. */
  270.     argc = opt_num_rest();
           ^
  271.     argv = opt_rest();
  272.     for ( ; *argv; argv++) {

#900
crypto/store/store_register.c:258: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `lh_OSSL_STORE_LOADER_delete`.
  256.     CRYPTO_THREAD_write_lock(registry_lock);
  257. 
  258.     loader = lh_OSSL_STORE_LOADER_delete(loader_register, &template);
                    ^
  259. 
  260.     if (loader == NULL) {

#901
apps/ocsp.c:300: error: Buffer Overrun L3
  Offset: [0, 19] Size: [1, 20] by call to `opt_help`.
  298.         case OPT_HELP:
  299.             ret = 0;
  300.             opt_help(ocsp_options);
                   ^
  301.             goto end;
  302.         case OPT_OUTFILE:

#902
crypto/bn/bn_mod.c:248: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  246.     bn_check_top(r);
  247.     if (BN_cmp(r, m) >= 0)
  248.         return BN_sub(r, r, m);
                      ^
  249.     return 1;
  250. }

#903
test/param_build_test.c:253: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 40 by call to `BN_hex2bn`.
  251.     if (!TEST_true(ossl_param_bld_push_uint(&bld, "i", 6))
  252.         || !TEST_ptr(bn = (n & 1) == 0 ? BN_new() : BN_secure_new())
  253.         || !TEST_true(BN_hex2bn(&bn, "ABCDEF78901234567890ABCDEF0987987654321"))
                   ^
  254.         || !TEST_true(ossl_param_bld_push_BN(&bld, "bn", bn))
  255.         || !TEST_true(ossl_param_bld_push_utf8_string(&bld, "utf8_s", "abc",

#904
test/param_build_test.c:253: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 40 by call to `BN_hex2bn`.
  251.     if (!TEST_true(ossl_param_bld_push_uint(&bld, "i", 6))
  252.         || !TEST_ptr(bn = (n & 1) == 0 ? BN_new() : BN_secure_new())
  253.         || !TEST_true(BN_hex2bn(&bn, "ABCDEF78901234567890ABCDEF0987987654321"))
                   ^
  254.         || !TEST_true(ossl_param_bld_push_BN(&bld, "bn", bn))
  255.         || !TEST_true(ossl_param_bld_push_utf8_string(&bld, "utf8_s", "abc",

#905
test/tls13ccstest.c:312: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  310.         SSL_shutdown(sssl);
  311.         SSL_free(sssl);
  312.         SSL_free(cssl);
               ^
  313.         sssl = cssl = NULL;
  314.     }

#906
test/tls13ccstest.c:312: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  310.         SSL_shutdown(sssl);
  311.         SSL_free(sssl);
  312.         SSL_free(cssl);
               ^
  313.         sssl = cssl = NULL;
  314.     }

#907
test/tls13ccstest.c:345: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  343.     if (tst >= 6) {
  344.         /* Early data */
  345.         if (!TEST_true(SSL_set_session(cssl, sess))
                    ^
  346.                 || !TEST_true(SSL_write_early_data(cssl, msg, strlen(msg),
  347.                                                    &written))

#908
crypto/ocsp/ocsp_ext.c:258: error: Integer Overflow L2
  ([2, 2147483645] + [1, 2147483644]):signed32 by call to `ASN1_object_size`.
  256.      * relies on library internals.
  257.      */
  258.     os.length = ASN1_object_size(0, len, V_ASN1_OCTET_STRING);
                       ^
  259.     if (os.length < 0)
  260.         return 0;

#909
apps/ca.c:300: error: Buffer Overrun L3
  Offset: [2, 17] Size: [3, 18] by call to `opt_help`.
  298.             goto end;
  299.         case OPT_HELP:
  300.             opt_help(ca_options);
                   ^
  301.             ret = 0;
  302.             goto end;

#910
apps/ca.c:1038: error: Dead Store
  The value written to &outdirlen (type unsigned long) is never used.
  1036.         }
  1037. 
  1038.         outdirlen = OPENSSL_strlcpy(new_cert, outdir, sizeof(new_cert));
                ^
  1039. #ifndef OPENSSL_SYS_VMS
  1040.         outdirlen = OPENSSL_strlcat(new_cert, "/", sizeof(new_cert));

#911
crypto/ec/ecp_smpl.c:293: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  291.         if (!BN_mod_sqr(tmp_1, a, p, ctx))
  292.             goto err;
  293.         if (!BN_mod_mul(tmp_2, tmp_1, a, p, ctx))
                    ^
  294.             goto err;
  295.         if (!BN_lshift(tmp_1, tmp_2, 2))

#912
crypto/ec/ecp_smpl.c:305: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_add`.
  303.         /* tmp_2 = 27*b^2 */
  304. 
  305.         if (!BN_mod_add(a, tmp_1, tmp_2, p, ctx))
                    ^
  306.             goto err;
  307.         if (BN_is_zero(a))

#913
crypto/ec/ecp_smpl.c:313: error: Integer Overflow L2
  ([0, 9+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  311. 
  312.  err:
  313.     BN_CTX_end(ctx);
           ^
  314.     BN_CTX_free(new_ctx);
  315.     return ret;

#914
crypto/pem/pem_info.c:303: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `PEM_dek_info`.
  301.             buf[0] = '\0';
  302.             PEM_proc_type(buf, PEM_TYPE_ENCRYPTED);
  303.             PEM_dek_info(buf, objstr, EVP_CIPHER_iv_length(enc),
                   ^
  304.                          (const char *)iv);
  305. 

#915
crypto/asn1/a_int.c:263: error: Integer Overflow L1
  (0 - 9223372036854775808):unsigned64.
  261.             /* This never happens if INT64_MAX == ABS_INT64_MIN, e.g.
  262.              * on ones'-complement system. */
  263.             *pr = (int64_t)(0 - r);
                   ^
  264.         } else {
  265.             ASN1err(ASN1_F_ASN1_GET_INT64, ASN1_R_TOO_SMALL);

#916
crypto/asn1/bio_asn1.c:271: error: Uninitialized Value
  The value read from ret was never initialized.
  269.         }
  270.     }
  271.     return ret;
           ^
  272. }
  273. 

#917
crypto/ec/ec2_oct.c:354: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  352. 
  353.  err:
  354.     BN_CTX_end(ctx);
           ^
  355. #ifndef FIPS_MODE
  356.     BN_CTX_free(new_ctx);

#918
crypto/modes/wrap128.c:314: error: Integer Overflow L2
  ([-1, `inlen` - 1] - 1):unsigned64.
  312.                 | ((unsigned int)aiv[6] <<  8)
  313.                 |  (unsigned int)aiv[7];
  314.     if (8 * (n - 1) >= ptext_len || ptext_len > 8 * n) {
               ^
  315.         OPENSSL_cleanse(out, inlen);
  316.         return 0;

#919
crypto/modes/wrap128.c:257: error: Integer Overflow L2
  ([0, `inlen`] - 1):unsigned64.
  255. {
  256.     /* n: number of 64-bit blocks in the padded key data */
  257.     size_t n = inlen / 8 - 1;
           ^
  258.     size_t padded_len;
  259.     size_t padding_len;

#920
crypto/objects/o_names.c:264: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `lh_OBJ_NAME_delete`.
  262.     on.name = name;
  263.     on.type = type;
  264.     ret = lh_OBJ_NAME_delete(names_lh, &on);
                 ^
  265.     if (ret != NULL) {
  266.         /* free things */

#921
apps/fipsinstall.c:281: error: Buffer Overrun L3
  Offset: [2, 13] Size: [3, 14] by call to `opt_help`.
  279.             goto end;
  280.         case OPT_HELP:
  281.             opt_help(fipsinstall_options);
                   ^
  282.             ret = 0;
  283.             goto end;

#922
apps/fipsinstall.c:412: error: Null Dereference
  pointer `fout` last assigned on line 255 could be null and is dereferenced by call to `BIO_free()` at line 412, column 5.
  410.     }
  411. 
  412.     BIO_free(fout);
           ^
  413.     BIO_free(mem_bio);
  414.     BIO_free(module_bio);

#923
crypto/bn/bn_mod.c:268: error: Integer Overflow L2
  ([0, `m->d`] - [0, 1]):unsigned64 by call to `BN_mod_lshift_quick`.
  266.     }
  267. 
  268.     ret = BN_mod_lshift_quick(r, r, n, (abs_m ? abs_m : m));
                 ^
  269.     bn_check_top(r);
  270. 

#924
test/tls13secretstest.c:382: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  380.  err:
  381.     SSL_free(s);
  382.     SSL_CTX_free(ctx);
           ^
  383.     return ret;
  384. }

#925
test/tls13secretstest.c:381: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  379.     ret = 1;
  380.  err:
  381.     SSL_free(s);
           ^
  382.     SSL_CTX_free(ctx);
  383.     return ret;

#926
test/tls13secretstest.c:381: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  379.     ret = 1;
  380.  err:
  381.     SSL_free(s);
           ^
  382.     SSL_CTX_free(ctx);
  383.     return ret;

#927
test/x509_time_test.c:267: error: Buffer Overrun L3
  Offset: [10, 33] Size: [12, 35] by call to `X509_cmp_time`.
  265.     t.flags = 0;
  266. 
  267.     result = X509_cmp_time(&t, &x509_cmp_tests[idx].cmp_time);
                    ^
  268.     if (!TEST_int_eq(result, x509_cmp_tests[idx].expected)) {
  269.         TEST_info("test_x509_cmp_time(%d) failed: expected %d, got %d\n",

#928
crypto/evp/bio_ok.c:278: error: Integer Overflow L2
  ([1, 4100] - [1, 4100]):unsigned64.
  276.     do {
  277.         BIO_clear_retry_flags(b);
  278.         n = ctx->buf_len - ctx->buf_off;
               ^
  279.         while (ctx->blockout && n > 0) {
  280.             i = BIO_write(next, &(ctx->buf[ctx->buf_off]), n);

#929
ssl/statem/extensions_clnt.c:292: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  290. 
  291.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_session_ticket)
  292.             || !WPACKET_sub_memcpy_u16(pkt, s->session->ext.tick, ticklen)) {
                       ^
  293.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  294.                  SSL_F_TLS_CONSTRUCT_CTOS_SESSION_TICKET, ERR_R_INTERNAL_ERROR);

#930
providers/implementations/ciphers/ciphercommon_ccm.c:265: error: Integer Overflow L1
  (0 - [8+max(0, `vctx->m`), 8+max(0, `vctx->m`)]):unsigned64 by call to `ccm_cipher_internal`.
  263.     int i;
  264. 
  265.     i = ccm_cipher_internal(ctx, out, outl, NULL, 0);
               ^
  266.     if (i <= 0)
  267.         return 0;

#931
crypto/ui/ui_lib.c:303: error: Null Dereference
  pointer `cancel_chars_copy` last assigned on line 269 could be null and is dereferenced by call to `general_allocate_boolean()` at line 303, column 12.
  301.     }
  302. 
  303.     return general_allocate_boolean(ui, prompt_copy, action_desc_copy,
                  ^
  304.                                     ok_chars_copy, cancel_chars_copy, 1,
  305.                                     UIT_BOOLEAN, flags, result_buf);

#932
test/bntest.c:290: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div_recp`.
  288.         BN_set_negative(b, rand_neg());
  289.         if (!(TEST_true(BN_RECP_CTX_set(recp, b, ctx))
  290.                 && TEST_true(BN_div_recp(d, c, a, recp, ctx))
                          ^
  291.                 && TEST_true(BN_mul(e, d, b, ctx))
  292.                 && TEST_true(BN_add(d, e, c))

#933
test/bntest.c:290: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_div_recp`.
  288.         BN_set_negative(b, rand_neg());
  289.         if (!(TEST_true(BN_RECP_CTX_set(recp, b, ctx))
  290.                 && TEST_true(BN_div_recp(d, c, a, recp, ctx))
                          ^
  291.                 && TEST_true(BN_mul(e, d, b, ctx))
  292.                 && TEST_true(BN_add(d, e, c))

#934
test/sm2_internal_test.c:297: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned32 by call to `sm2_do_sign`.
  295. 
  296.     start_fake_rand(k_hex);
  297.     sig = sm2_do_sign(key, EVP_sm3(), (const uint8_t *)userid, strlen(userid),
                 ^
  298.                       (const uint8_t *)message, msg_len);
  299.     if (!TEST_ptr(sig)

#935
test/sm2_internal_test.c:310: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq`.
  308.     if (!TEST_true(BN_hex2bn(&r, r_hex))
  309.             || !TEST_true(BN_hex2bn(&s, s_hex))
  310.             || !TEST_BN_eq(r, sig_r)
                       ^
  311.             || !TEST_BN_eq(s, sig_s))
  312.         goto done;

#936
test/sm2_internal_test.c:292: error: Integer Overflow L2
  ([0, 5] - 1):unsigned32 by call to `EC_POINT_mul`.
  290.     pt = EC_POINT_new(group);
  291.     if (!TEST_ptr(pt)
  292.             || !TEST_true(EC_POINT_mul(group, pt, priv, NULL, NULL, NULL))
                       ^
  293.             || !TEST_true(EC_KEY_set_public_key(key, pt)))
  294.         goto done;

#937
crypto/bn/bn_mont.c:351: error: Buffer Overrun L3
  Offset: [-1, 0] Size: 2 by call to `BN_mod_inverse`.
  349.         if (BN_is_one(&tmod))
  350.             BN_zero(Ri);
  351.         else if ((BN_mod_inverse(Ri, R, &tmod, ctx)) == NULL)
                         ^
  352.             goto err;
  353.         if (!BN_lshift(Ri, Ri, BN_BITS2))

#938
crypto/bn/bn_mont.c:363: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
  361.                 goto err;       /* Ri-- (mod word size) */
  362.         }
  363.         if (!BN_div(Ri, NULL, Ri, &tmod, ctx))
                    ^
  364.             goto err;
  365.         /*

#939
crypto/bn/bn_mont.c:397: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
  395.     if (!BN_set_bit(&(mont->RR), mont->ri * 2))
  396.         goto err;
  397.     if (!BN_mod(&(mont->RR), &(mont->RR), &(mont->N), ctx))
                ^
  398.         goto err;
  399. 

#940
crypto/bn/bn_mont.c:351: error: Integer Overflow L2
  ([0, `mod->d`] - [0, 1]):unsigned64 by call to `BN_mod_inverse`.
  349.         if (BN_is_one(&tmod))
  350.             BN_zero(Ri);
  351.         else if ((BN_mod_inverse(Ri, R, &tmod, ctx)) == NULL)
                         ^
  352.             goto err;
  353.         if (!BN_lshift(Ri, Ri, BN_BITS2))

#941
crypto/sm2/sm2_crypt.c:346: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `BN_bn2binpad`.
  344.     }
  345. 
  346.     if (BN_bn2binpad(x2, x2y2, field_size) < 0
               ^
  347.             || BN_bn2binpad(y2, x2y2 + field_size, field_size) < 0
  348.             || !ecdh_KDF_X9_63(msg_mask, msg_len, x2y2, 2 * field_size, NULL, 0,

#942
crypto/sm2/sm2_crypt.c:339: error: Integer Overflow L2
  ([0, 5] - 1):unsigned32 by call to `EC_POINT_mul`.
  337.     if (!EC_POINT_set_affine_coordinates(group, C1, sm2_ctext->C1x,
  338.                                          sm2_ctext->C1y, ctx)
  339.             || !EC_POINT_mul(group, C1, NULL, C1, EC_KEY_get0_private_key(key),
                       ^
  340.                              ctx)
  341.             || !EC_POINT_get_affine_coordinates(group, C1, x2, y2, ctx)) {

#943
test/testutil/format_output.c:331: error: Dead Store
  The value written to &p (type char*) is never used.
  329.                 real_diff = diff = 1;
  330.             }
  331.         *p++ = '\0';
                ^
  332.         if (!diff) {
  333.             test_printf_stderr(" %s:% 5d\n", n2 > n1 ? b2 : b1, cnt);

#944
test/testutil/format_output.c:316: error: Integer Overflow L2
  ([1, +oo] - 32):unsigned64.
  314. 
  315.     while (len > 0) {
  316.         cnt = 8 * (len - bytes);
               ^
  317.         n1 = convert_bn_memory(m1, bytes, b1, &lz1, bn1);
  318.         n2 = convert_bn_memory(m2, bytes, b2, &lz2, bn2);

#945
crypto/bn/bn_div.c:435: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  433.          * then (q-1) * sdiv is less or equal than wnum)
  434.          */
  435.         for (l0 = 0 - l0, j = 0; j < div_n; j++)
                    ^
  436.             tmp->d[j] = sdiv->d[j] & l0;
  437.         l0 = bn_add_words(wnum, wnum, tmp->d, div_n);

#946
crypto/bn/bn_prime.c:295: error: Integer Overflow L2
  (0 - [0, 17863]):unsigned64 by call to `BN_mod_word`.
  293. 
  294.         for (i = 1; i < trial_divisions; i++) {
  295.             BN_ULONG mod = BN_mod_word(w, primes[i]);
                                  ^
  296.             if (mod == (BN_ULONG)-1)
  297.                 return -1;

#947
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:370: error: Buffer Overrun L2
  Offset: [1, 70+max(15, `bctx->poly1305.num`)] Size: 16 by call to `Poly1305_Final`.
  368.             Poly1305_Update(poly, temp, POLY1305_BLOCK_SIZE);
  369.         }
  370.         Poly1305_Final(poly, bctx->enc ? ctx->tag : temp);
               ^
  371.         ctx->mac_inited = 0;
  372. 

#948
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:321: error: Integer Overflow L2
  (16 - [1, 14+max(15, `bctx->poly1305.num`)]):unsigned64 by call to `Poly1305_Update`.
  319.             if (bctx->enc) { /* plaintext */
  320.                 ctx->chacha.base.hw->cipher(&ctx->chacha.base, out, in, plen);
  321.                 Poly1305_Update(poly, out, plen);
                       ^
  322.                 in += plen;
  323.                 out += plen;

#949
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:326: error: Integer Overflow L2
  (16 - [1, 14+max(15, `bctx->poly1305.num`)]):unsigned64 by call to `Poly1305_Update`.
  324.                 ctx->len.text += plen;
  325.             } else { /* ciphertext */
  326.                 Poly1305_Update(poly, in, plen);
                       ^
  327.                 ctx->chacha.base.hw->cipher(&ctx->chacha.base, out, in, plen);
  328.                 in += plen;

#950
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:341: error: Integer Overflow L2
  (16 - [1, 28+max(15, `bctx->poly1305.num`)]):unsigned64 by call to `Poly1305_Update`.
  339.         if (ctx->aad) {                        /* wrap up aad */
  340.             if ((rem = (size_t)ctx->len.aad % POLY1305_BLOCK_SIZE))
  341.                 Poly1305_Update(poly, zero, POLY1305_BLOCK_SIZE - rem);
                       ^
  342.             ctx->aad = 0;
  343.         }

#951
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:346: error: Integer Overflow L2
  (16 - [1, 42+max(15, `bctx->poly1305.num`)]):unsigned64 by call to `Poly1305_Update`.
  344. 
  345.         if ((rem = (size_t)ctx->len.text % POLY1305_BLOCK_SIZE))
  346.             Poly1305_Update(poly, zero, POLY1305_BLOCK_SIZE - rem);
                   ^
  347. 
  348.         if (is_endian.little) {

#952
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:349: error: Integer Overflow L2
  (16 - [1, 56+max(15, `bctx->poly1305.num`)]):unsigned64 by call to `Poly1305_Update`.
  347. 
  348.         if (is_endian.little) {
  349.             Poly1305_Update(poly, (unsigned char *)&ctx->len,
                   ^
  350.                             POLY1305_BLOCK_SIZE);
  351.         } else {

#953
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:309: error: Integer Overflow L2
  ([-14, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  307.             if (ctx->aad) { /* wrap up aad */
  308.                 if ((rem = (size_t)ctx->len.aad % POLY1305_BLOCK_SIZE))
  309.                     Poly1305_Update(poly, zero, POLY1305_BLOCK_SIZE - rem);
                           ^
  310.                 ctx->aad = 0;
  311.             }

#954
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:321: error: Integer Overflow L2
  ([-15, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  319.             if (bctx->enc) { /* plaintext */
  320.                 ctx->chacha.base.hw->cipher(&ctx->chacha.base, out, in, plen);
  321.                 Poly1305_Update(poly, out, plen);
                       ^
  322.                 in += plen;
  323.                 out += plen;

#955
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:326: error: Integer Overflow L2
  ([-15, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  324.                 ctx->len.text += plen;
  325.             } else { /* ciphertext */
  326.                 Poly1305_Update(poly, in, plen);
                       ^
  327.                 ctx->chacha.base.hw->cipher(&ctx->chacha.base, out, in, plen);
  328.                 in += plen;

#956
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:294: error: Integer Overflow L2
  ([-2, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  292.         ctx->mac_inited = 1;
  293.         if (plen != NO_TLS_PAYLOAD_LENGTH) {
  294.             Poly1305_Update(poly, ctx->tls_aad, EVP_AEAD_TLS1_AAD_LEN);
                   ^
  295.             ctx->len.aad = EVP_AEAD_TLS1_AAD_LEN;
  296.             ctx->aad = 1;

#957
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:321: error: Integer Overflow L2
  ([0, +oo] - [2-max(15, `bctx->poly1305.num`), 15]):unsigned64 by call to `Poly1305_Update`.
  319.             if (bctx->enc) { /* plaintext */
  320.                 ctx->chacha.base.hw->cipher(&ctx->chacha.base, out, in, plen);
  321.                 Poly1305_Update(poly, out, plen);
                       ^
  322.                 in += plen;
  323.                 out += plen;

#958
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:326: error: Integer Overflow L2
  ([0, +oo] - [2-max(15, `bctx->poly1305.num`), 15]):unsigned64 by call to `Poly1305_Update`.
  324.                 ctx->len.text += plen;
  325.             } else { /* ciphertext */
  326.                 Poly1305_Update(poly, in, plen);
                       ^
  327.                 ctx->chacha.base.hw->cipher(&ctx->chacha.base, out, in, plen);
  328.                 in += plen;

#959
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:341: error: Integer Overflow L2
  ([1, 31] - [-12-max(15, `bctx->poly1305.num`), 15]):unsigned64 by call to `Poly1305_Update`.
  339.         if (ctx->aad) {                        /* wrap up aad */
  340.             if ((rem = (size_t)ctx->len.aad % POLY1305_BLOCK_SIZE))
  341.                 Poly1305_Update(poly, zero, POLY1305_BLOCK_SIZE - rem);
                       ^
  342.             ctx->aad = 0;
  343.         }

#960
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:346: error: Integer Overflow L2
  ([1, 31] - [-26-max(15, `bctx->poly1305.num`), 15]):unsigned64 by call to `Poly1305_Update`.
  344. 
  345.         if ((rem = (size_t)ctx->len.text % POLY1305_BLOCK_SIZE))
  346.             Poly1305_Update(poly, zero, POLY1305_BLOCK_SIZE - rem);
                   ^
  347. 
  348.         if (is_endian.little) {

#961
providers/implementations/ciphers/cipher_chacha20_poly1305_hw.c:309: error: Integer Overflow L2
  ([1, 31] - [16-max(15, `bctx->poly1305.num`), 15]):unsigned64 by call to `Poly1305_Update`.
  307.             if (ctx->aad) { /* wrap up aad */
  308.                 if ((rem = (size_t)ctx->len.aad % POLY1305_BLOCK_SIZE))
  309.                     Poly1305_Update(poly, zero, POLY1305_BLOCK_SIZE - rem);
                           ^
  310.                 ctx->aad = 0;
  311.             }

#962
test/dtlstest.c:289: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  287.  end:
  288.     SSL_free(serverssl);
  289.     SSL_free(clientssl);
           ^
  290.     SSL_CTX_free(sctx);
  291.     SSL_CTX_free(cctx);

#963
test/dtlstest.c:289: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  287.  end:
  288.     SSL_free(serverssl);
  289.     SSL_free(clientssl);
           ^
  290.     SSL_CTX_free(sctx);
  291.     SSL_CTX_free(cctx);

#964
crypto/lhash/lhash.c:286: error: Integer Overflow L2
  ([0, `lh->pmax`] - 1):unsigned32.
  284.         lh->num_alloc_nodes /= 2;
  285.         lh->pmax /= 2;
  286.         lh->p = lh->pmax - 1;
               ^
  287.         lh->b = n;
  288.     } else

#965
test/testutil/driver.c:276: error: Dead Store
  The value written to &verdict (type int) is never used.
  274. {
  275.     int num_failed = 0;
  276.     int verdict = 1;
           ^
  277.     int ii, i, jj, j, jstep;
  278.     int permute[OSSL_NELEM(all_tests)];

#966
test/testutil/driver.c:302: error: Uninitialized Value
  The value read from permute[_] was never initialized.
  300.         for (i = num_tests - 1; i >= 1; i--) {
  301.             j = test_random() % (1 + i);
  302.             ii = permute[j];
                   ^
  303.             permute[j] = permute[i];
  304.             permute[i] = ii;

#967
test/testutil/driver.c:303: error: Uninitialized Value
  The value read from permute[_] was never initialized.
  301.             j = test_random() % (1 + i);
  302.             ii = permute[j];
  303.             permute[j] = permute[i];
                   ^
  304.             permute[i] = ii;
  305.         }

#968
test/testutil/driver.c:308: error: Uninitialized Value
  The value read from permute[_] was never initialized.
  306. 
  307.     for (ii = 0; ii != num_tests; ++ii) {
  308.         i = permute[ii];
               ^
  309. 
  310.         if (single_test != -1 && ((i+1) != single_test)) {

#969
crypto/ec/ecp_oct.c:369: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  367. 
  368.  err:
  369.     BN_CTX_end(ctx);
           ^
  370.     BN_CTX_free(new_ctx);
  371.     return ret;

#970
crypto/rand/drbg_ctr.c:288: error: Buffer Overrun L3
  Offset added: 32 Size: [0, +oo].
  286.         return 0;
  287. 
  288.     memset(ctr->K, 0, sizeof(ctr->K));
           ^
  289.     memset(ctr->V, 0, sizeof(ctr->V));
  290.     if (!EVP_CipherInit_ex(ctr->ctx, ctr->cipher, NULL, ctr->K, NULL, 1))

#971
crypto/bn/bn_mod.c:314: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  312. 
  313.         if (BN_cmp(r, m) >= 0) {
  314.             if (!BN_sub(r, r, m))
                        ^
  315.                 return 0;
  316.         }

#972
test/property_test.c:320: error: Buffer Overrun L3
  Offset added: [1, 37] Size: [0, +oo] by call to `ossl_method_store_add`.
  318. 
  319.     for (i = 0; i < OSSL_NELEM(impls); i++)
  320.         if (!TEST_true(ossl_method_store_add(store, NULL, impls[i].nid,
                    ^
  321.                                              impls[i].prop, impls[i].impl,
  322.                                              &up_ref, &down_ref))) {

#973
test/property_test.c:329: error: Buffer Overrun L3
  Offset: [2, +oo] (<= [1, +oo] + 1) Size: [1, 22] by call to `ossl_method_store_fetch`.
  327.         OSSL_PROPERTY_LIST *pq = NULL;
  328. 
  329.         if (!TEST_true(ossl_method_store_fetch(store, queries[i].nid,
                    ^
  330.                                                queries[i].prop, &result))
  331.             || !TEST_str_eq((char *)result, queries[i].expected)) {

#974
test/property_test.c:329: error: Buffer Overrun L3
  Offset: [2, +oo] Size: [1, 22] by call to `ossl_method_store_fetch`.
  327.         OSSL_PROPERTY_LIST *pq = NULL;
  328. 
  329.         if (!TEST_true(ossl_method_store_fetch(store, queries[i].nid,
                    ^
  330.                                                queries[i].prop, &result))
  331.             || !TEST_str_eq((char *)result, queries[i].expected)) {

#975
test/property_test.c:320: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_method_store_add`.
  318. 
  319.     for (i = 0; i < OSSL_NELEM(impls); i++)
  320.         if (!TEST_true(ossl_method_store_add(store, NULL, impls[i].nid,
                    ^
  321.                                              impls[i].prop, impls[i].impl,
  322.                                              &up_ref, &down_ref))) {

#976
test/v3nametest.c:295: error: Buffer Overrun L2
  Offset added: [1, 28] Size: 2.
  293.         int match, ret;
  294. 
  295.         memcpy(name, *pname, namelen);
               ^
  296. 
  297.         match = -1;

#977
providers/implementations/macs/kmac_prov.c:296: error: Buffer Overrun L2
  Offset: [1, 8] Size: 3 by call to `right_encode`.
  294.     lbits = (kctx->xof_mode ? 0 : (kctx->out_len * 8));
  295. 
  296.     ok = right_encode(encoded_outlen, &len, lbits)
                ^
  297.         && EVP_DigestUpdate(ctx, encoded_outlen, len)
  298.         && EVP_DigestFinalXOF(ctx, out, kctx->out_len);

#978
test/rsa_sp800_56b_test.c:319: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_check_private_exponent`.
  317.     }
  318.     /* fails since d >= lcm(p-1, q-1) */
  319.     ret = TEST_false(rsa_check_private_exponent(key, 8, ctx))
                 ^
  320.           && TEST_true(BN_set_word(d, 45))
  321.           /* d is correct size and 1 = e.d mod lcm(p-1, q-1) */

#979
test/asynctest.c:291: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `ASYNC_init_thread`.
  289.     ASYNC_WAIT_CTX *waitctx = NULL;
  290. 
  291.     if (       !ASYNC_init_thread(1, 0)
                       ^
  292.             || (waitctx = ASYNC_WAIT_CTX_new()) == NULL
  293.             || ASYNC_start_job(&job, waitctx, &funcret, blockpause, NULL, 0)

#980
crypto/sm2/sm2_sign.c:344: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  342.     }
  343. 
  344.     if (!EC_POINT_mul(group, pt, s, EC_KEY_get0_public_key(key), t, ctx)
                ^
  345.             || !EC_POINT_get_affine_coordinates(group, pt, x1, NULL, ctx)) {
  346.         SM2err(SM2_F_SM2_SIG_VERIFY, ERR_R_EC_LIB);

#981
crypto/sm2/sm2_sign.c:334: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_add`.
  332.     }
  333. 
  334.     if (!BN_mod_add(t, r, s, order, ctx)) {
                ^
  335.         SM2err(SM2_F_SM2_SIG_VERIFY, ERR_R_BN_LIB);
  336.         goto done;

#982
test/packettest.c:292: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `PACKET_forward`.
  290. 
  291.     if (!TEST_true(PACKET_buf_init(&pkt, smbuf, BUF_LEN))
  292.             || !TEST_true(PACKET_forward(&pkt, 1))
                       ^
  293.             || !TEST_true(PACKET_get_bytes(&pkt, &byte, 1))
  294.             || !TEST_uchar_eq(byte[0], 4)

#983
test/packettest.c:295: error: Integer Overflow L2
  ([0, +oo] - 252):unsigned64 by call to `PACKET_forward`.
  293.             || !TEST_true(PACKET_get_bytes(&pkt, &byte, 1))
  294.             || !TEST_uchar_eq(byte[0], 4)
  295.             || !TEST_true(PACKET_forward(&pkt, BUF_LEN - 3))
                       ^
  296.             || !TEST_true(PACKET_get_bytes(&pkt, &byte, 1))
  297.             || !TEST_uchar_eq(byte[0], 0xfe))

#984
crypto/rsa/rsa_sp800_56b_gen.c:321: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_sp800_56b_derive_params_from_pq`.
  319.             goto err;
  320.         /* (Steps 3-5) Compute params d, n, dP, dQ, qInv */
  321.         ok = rsa_sp800_56b_derive_params_from_pq(rsa, nbits, e, ctx);
                    ^
  322.         if (ok < 0)
  323.             goto err;

#985
test/asynciotest.c:382: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  380.     /* Also frees the BIOs */
  381.     SSL_free(clientssl);
  382.     SSL_free(serverssl);
           ^
  383.     clientssl = serverssl = NULL;
  384. 

#986
test/asynciotest.c:382: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  380.     /* Also frees the BIOs */
  381.     SSL_free(clientssl);
  382.     SSL_free(serverssl);
           ^
  383.     clientssl = serverssl = NULL;
  384. 

#987
test/asynciotest.c:388: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  386. 
  387.  end:
  388.     SSL_free(clientssl);
           ^
  389.     SSL_free(serverssl);
  390.     SSL_CTX_free(clientctx);

#988
test/asynciotest.c:388: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  386. 
  387.  end:
  388.     SSL_free(clientssl);
           ^
  389.     SSL_free(serverssl);
  390.     SSL_CTX_free(clientctx);

#989
test/dtlsv1listentest.c:344: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  342.     /* Also frees up outbio */
  343.     SSL_free(ssl);
  344.     SSL_CTX_free(ctx);
           ^
  345.     BIO_free(inbio);
  346.     OPENSSL_free(peer);

#990
test/dtlsv1listentest.c:320: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `DTLSv1_listen`.
  318. 
  319.     /* Process the incoming packet */
  320.     if (!TEST_int_ge(ret = DTLSv1_listen(ssl, peer), 0))
                ^
  321.         goto err;
  322.     datalen = BIO_get_mem_data(outbio, &data);

#991
test/dtlsv1listentest.c:343: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  341.  err:
  342.     /* Also frees up outbio */
  343.     SSL_free(ssl);
           ^
  344.     SSL_CTX_free(ctx);
  345.     BIO_free(inbio);

#992
test/dtlsv1listentest.c:343: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  341.  err:
  342.     /* Also frees up outbio */
  343.     SSL_free(ssl);
           ^
  344.     SSL_CTX_free(ctx);
  345.     BIO_free(inbio);

#993
crypto/store/store_register.c:295: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `lh_OSSL_STORE_LOADER_doall_void`.
  293.                               void *do_arg)
  294. {
  295.     lh_OSSL_STORE_LOADER_doall_void(loader_register, do_function, do_arg);
           ^
  296.     return 1;
  297. }

#994
crypto/ec/ec_lib.c:335: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  333.     ret = 1;
  334.  err:
  335.     BN_CTX_end(ctx);
           ^
  336.     BN_CTX_free(ctx);
  337.     return ret;

#995
crypto/ec/ec_lib.c:327: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  325.     /* compute h = \lfloor (q + 1)/n \rceil = \lfloor (q + 1 + n/2)/n \rfloor */
  326.     if (!BN_rshift1(group->cofactor, group->order) /* n/2 */
  327.         || !BN_add(group->cofactor, group->cofactor, q) /* q + n/2 */
                   ^
  328.         /* q + 1 + n/2 */
  329.         || !BN_add(group->cofactor, group->cofactor, BN_value_one())

#996
ssl/t1_lib.c:298: error: Null Dereference
  pointer `ginfo` last assigned on line 295 could be null and is dereferenced at line 298, column 14.
  296. 
  297.     if (version < TLS1_3_VERSION) {
  298.         if ((ginfo->flags & TLS_GROUP_ONLY_FOR_TLS1_3) != 0)
                    ^
  299.             return 0;
  300.     }

#997
test/crltest.c:295: error: Buffer Overrun L3
  Offset: [23, 65] Size: [24, 66] by call to `CRL_from_strings`.
  293. static int test_basic_crl(void)
  294. {
  295.     X509_CRL *basic_crl = CRL_from_strings(kBasicCRL);
                                 ^
  296.     X509_CRL *revoked_crl = CRL_from_strings(kRevokedCRL);
  297.     int r;

#998
test/danetest.c:329: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  327.         SSL_set_connect_state(ssl);
  328.         if (SSL_dane_enable(ssl, base_name) <= 0) {
  329.             SSL_free(ssl);
                   ^
  330.             return 0;
  331.         }

#999
test/danetest.c:329: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  327.         SSL_set_connect_state(ssl);
  328.         if (SSL_dane_enable(ssl, base_name) <= 0) {
  329.             SSL_free(ssl);
                   ^
  330.             return 0;
  331.         }

#1000
test/danetest.c:337: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  335.         for (i = 0; i < ntlsa; ++i) {
  336.             if ((line = read_to_eol(f)) == NULL || !tlsa_import_rr(ssl, line)) {
  337.                 SSL_free(ssl);
                       ^
  338.                 return 0;
  339.             }

#1001
test/danetest.c:337: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  335.         for (i = 0; i < ntlsa; ++i) {
  336.             if ((line = read_to_eol(f)) == NULL || !tlsa_import_rr(ssl, line)) {
  337.                 SSL_free(ssl);
                       ^
  338.                 return 0;
  339.             }

#1002
crypto/evp/bio_enc.c:345: error: Buffer Overrun L1
  Offset: [-oo, -1] Size: 32 by call to `EVP_CipherFinal_ex`.
  343.             ctx->finished = 1;
  344.             ctx->buf_off = 0;
  345.             ret = EVP_CipherFinal_ex(ctx->cipher,
                         ^
  346.                                      (unsigned char *)ctx->buf,
  347.                                      &(ctx->buf_len));

#1003
crypto/evp/bio_enc.c:345: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned32 by call to `EVP_CipherFinal_ex`.
  343.             ctx->finished = 1;
  344.             ctx->buf_off = 0;
  345.             ret = EVP_CipherFinal_ex(ctx->cipher,
                         ^
  346.                                      (unsigned char *)ctx->buf,
  347.                                      &(ctx->buf_len));

#1004
test/params_conversion_test.c:298: error: Buffer Overrun L2
  Offset: [max(0, `i`), 399] Size: 100 by call to `test_get_argument`.
  296.     STANZA *s;
  297.     PARAM_CONVERSION pc;
  298.     const char *testfile = test_get_argument(i);
                                  ^
  299.     int res = 1;
  300. 

#1005
crypto/des/set_key.c:312: error: Dead Store
  The value written to &in (type unsigned char const *) is never used.
  310. 
  311.     c2l(in, c);
  312.     c2l(in, d);
           ^
  313. 
  314.     /*

#1006
crypto/bio/b_sock.c:301: error: Dead Store
  The value written to &l (type int) is never used.
  299.     int l;
  300. 
  301.     l = mode;
           ^
  302. # ifdef FIONBIO
  303.     l = mode;

#1007
crypto/bio/b_sock.c:298: error: Dead Store
  The value written to &ret (type int) is never used.
  296. int BIO_socket_nbio(int s, int mode)
  297. {
  298.     int ret = -1;
           ^
  299.     int l;
  300. 

#1008
crypto/bn/bn_exp.c:412: error: Dead Store
  The value written to &j (type int) is never used.
  410.          * set bit before the end of the window
  411.          */
  412.         j = wstart;
               ^
  413.         wvalue = 1;
  414.         wend = 0;

#1009
crypto/bn/bn_exp.c:300: error: Dead Store
  The value written to &start (type int) is never used.
  298. {
  299.     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
  300.     int start = 1;
           ^
  301.     BIGNUM *d, *r;
  302.     const BIGNUM *aa;

#1010
crypto/bn/bn_exp.c:354: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_nnmod`.
  352. 
  353.     if (a->neg || BN_ucmp(a, m) >= 0) {
  354.         if (!BN_nnmod(val[0], a, m, ctx))
                    ^
  355.             goto err;
  356.         aa = val[0];

#1011
crypto/bn/bn_exp.c:364: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_mul_mont_fixed_top`.
  362.     window = BN_window_bits_for_exponent_size(bits);
  363.     if (window > 1) {
  364.         if (!bn_mul_mont_fixed_top(d, val[0], val[0], mont, ctx))
                    ^
  365.             goto err;           /* 2 */
  366.         j = 1 << (window - 1);

#1012
crypto/bn/bn_exp.c:359: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_to_mont_fixed_top`.
  357.     } else
  358.         aa = a;
  359.     if (!bn_to_mont_fixed_top(val[0], aa, mont, ctx))
                ^
  360.         goto err;               /* 1 */
  361. 

#1013
test/dtlstest.c:324: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  322.  end:
  323.     SSL_free(serverssl);
  324.     SSL_free(clientssl);
           ^
  325.     SSL_CTX_free(sctx);
  326.     SSL_CTX_free(cctx);

#1014
test/dtlstest.c:324: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  322.  end:
  323.     SSL_free(serverssl);
  324.     SSL_free(clientssl);
           ^
  325.     SSL_CTX_free(sctx);
  326.     SSL_CTX_free(cctx);

#1015
test/dtlstest.c:323: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  321.     testresult = 1;
  322.  end:
  323.     SSL_free(serverssl);
           ^
  324.     SSL_free(clientssl);
  325.     SSL_CTX_free(sctx);

#1016
test/dtlstest.c:323: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  321.     testresult = 1;
  322.  end:
  323.     SSL_free(serverssl);
           ^
  324.     SSL_free(clientssl);
  325.     SSL_CTX_free(sctx);

#1017
apps/engine.c:423: error: Buffer Overrun L3
  Offset: [1, 54] Size: [2, 55] by call to `append_buf`.
  421.                 n = fn_c(e, NULL, &nids, 0);
  422.                 for (k = 0; k < n; ++k)
  423.                     if (!append_buf(&cap_buf, &cap_size, OBJ_nid2sn(nids[k])))
                                ^
  424.                         goto end;
  425. 

#1018
apps/engine.c:364: error: Dead Store
  The value written to &argc (type int) is never used.
  362. 
  363.     /* Allow any trailing parameters as engine names. */
  364.     argc = opt_num_rest();
           ^
  365.     argv = opt_rest();
  366.     for ( ; *argv; argv++) {

#1019
crypto/dsa/dsa_ossl.c:361: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  359. 
  360.     /* u1 = M * w mod q */
  361.     if (!BN_mod_mul(u1, u1, u2, dsa->q, ctx))
                ^
  362.         goto err;
  363. 

#1020
crypto/dsa/dsa_ossl.c:365: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  363. 
  364.     /* u2 = r * w mod q */
  365.     if (!BN_mod_mul(u2, r, u2, dsa->q, ctx))
                ^
  366.         goto err;
  367. 

#1021
crypto/dsa/dsa_ossl.c:346: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_inverse`.
  344.      * Calculate W = inv(S) mod Q save W in u2
  345.      */
  346.     if ((BN_mod_inverse(u2, s, dsa->q, ctx)) == NULL)
                ^
  347.         goto err;
  348. 

#1022
crypto/objects/o_names.c:308: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `lh_OBJ_NAME_doall_OBJ_DOALL`.
  306.     d.arg = arg;
  307. 
  308.     lh_OBJ_NAME_doall_OBJ_DOALL(names_lh, do_all_fn, &d);
           ^
  309. }
  310. 

#1023
crypto/ec/ec_key.c:306: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  304.      * pub_key = priv_key * G (where G is a point on the curve)
  305.      */
  306.     return EC_POINT_mul(eckey->group, eckey->pub_key, eckey->priv_key, NULL,
                  ^
  307.                         NULL, NULL);
  308. }

#1024
ssl/statem/extensions_clnt.c:316: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  314.             || !WPACKET_start_sub_packet_u16(pkt)
  315.                /* Sub-packet for the actual list */
  316.             || !WPACKET_start_sub_packet_u16(pkt)
                       ^
  317.             || !tls12_copy_sigalgs(s, pkt, salg, salglen)
  318.             || !WPACKET_close(pkt)

#1025
crypto/bio/bf_lbuf.c:304: error: Dead Store
  The value written to &ret (type long) is never used.
  302. static long linebuffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  303. {
  304.     long ret = 1;
           ^
  305. 
  306.     if (b->next_bio == NULL)

#1026
crypto/evp/encode.c:306: error: Dead Store
  The value written to &rv (type int) is never used.
  304.                      const unsigned char *in, int inl)
  305. {
  306.     int seof = 0, eof = 0, rv = -1, ret = 0, i, v, tmp, n, decoded_len;
           ^
  307.     unsigned char *d;
  308.     const unsigned char *table;

#1027
test/tls13encryptiontest.c:409: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  407.     OPENSSL_free(seq);
  408.     SSL_free(s);
  409.     SSL_CTX_free(ctx);
           ^
  410.     return ret;
  411. }

#1028
test/tls13encryptiontest.c:408: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  406.     OPENSSL_free(iv);
  407.     OPENSSL_free(seq);
  408.     SSL_free(s);
           ^
  409.     SSL_CTX_free(ctx);
  410.     return ret;

#1029
test/tls13encryptiontest.c:408: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  406.     OPENSSL_free(iv);
  407.     OPENSSL_free(seq);
  408.     SSL_free(s);
           ^
  409.     SSL_CTX_free(ctx);
  410.     return ret;

#1030
test/tls13encryptiontest.c:371: error: Integer Overflow L2
  ([9, +oo] - [8, 16]):unsigned64 by call to `tls13_enc`.
  369. 
  370.         /* Encrypt it */
  371.         if (!TEST_size_t_eq(tls13_enc(s, &rec, 1, 1), 1)) {
                    ^
  372.             TEST_info("Failed to encrypt record %zu", ctr);
  373.             goto err;

#1031
test/sslapitest.c:333: error: Buffer Overrun L1
  Offset: 7 Size: 4 by call to `SSL_CTX_set_cipher_list`.
  331. 
  332.     /* We also want to ensure that we use RSA-based key exchange. */
  333.     if (!TEST_true(SSL_CTX_set_cipher_list(cctx, "RSA")))
                ^
  334.         goto end;
  335. 

#1032
test/sslapitest.c:333: error: Buffer Overrun L1
  Offset: [9, +oo] (<= [0, +oo] + 9) Size: 4 by call to `SSL_CTX_set_cipher_list`.
  331. 
  332.     /* We also want to ensure that we use RSA-based key exchange. */
  333.     if (!TEST_true(SSL_CTX_set_cipher_list(cctx, "RSA")))
                ^
  334.         goto end;
  335. 

#1033
test/sslapitest.c:333: error: Buffer Overrun L2
  Offset: [0, 8] Size: 4 by call to `SSL_CTX_set_cipher_list`.
  331. 
  332.     /* We also want to ensure that we use RSA-based key exchange. */
  333.     if (!TEST_true(SSL_CTX_set_cipher_list(cctx, "RSA")))
                ^
  334.         goto end;
  335. 

#1034
test/sslapitest.c:379: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  377. end:
  378.     SSL_free(serverssl);
  379.     SSL_free(clientssl);
           ^
  380.     SSL_CTX_free(sctx);
  381.     SSL_CTX_free(cctx);

#1035
test/sslapitest.c:379: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  377. end:
  378.     SSL_free(serverssl);
  379.     SSL_free(clientssl);
           ^
  380.     SSL_CTX_free(sctx);
  381.     SSL_CTX_free(cctx);

#1036
test/sslapitest.c:378: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  376. 
  377. end:
  378.     SSL_free(serverssl);
           ^
  379.     SSL_free(clientssl);
  380.     SSL_CTX_free(sctx);

#1037
test/sslapitest.c:378: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  376. 
  377. end:
  378.     SSL_free(serverssl);
           ^
  379.     SSL_free(clientssl);
  380.     SSL_CTX_free(sctx);

#1038
test/bntest.c:329: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  327.         if (!(TEST_true(BN_mod(c, a, b, ctx))
  328.                 && TEST_true(BN_div(d, e, a, b, ctx))
  329.                 && TEST_true(BN_sub(e, e, c))
                          ^
  330.                 && TEST_BN_eq_zero(e)))
  331.             goto err;

#1039
crypto/pem/pem_lib.c:382: error: Integer Overflow L2
  ([0, 2147483647] - 1):unsigned64 by call to `PEM_dek_info`.
  380.         buf[0] = '\0';
  381.         PEM_proc_type(buf, PEM_TYPE_ENCRYPTED);
  382.         PEM_dek_info(buf, objstr, EVP_CIPHER_iv_length(enc), (char *)iv);
               ^
  383.         /* k=strlen(buf); */
  384. 

#1040
test/test_test.c:317: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 2 by call to `BN_dec2bn`.
  315.     int r = 0;
  316. 
  317.     if (!TEST(1, TEST_int_eq(BN_dec2bn(&a, "0"), 1))
                ^
  318.         | !TEST(1, TEST_BN_eq_word(a, 0))
  319.         | !TEST(0, TEST_BN_eq_word(a, 30))

#1041
crypto/rand/drbg_lib.c:316: error: Dead Store
  The value written to &ret (type int) is never used.
  314. int RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags)
  315. {
  316.     int ret = 1;
           ^
  317. 
  318.     if (type == 0 && flags == 0) {

#1042
crypto/rsa/rsa_sp800_56b_check.c:363: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  361.     BN_CTX_start(ctx);
  362.     r = BN_CTX_get(ctx);
  363.     if (r == NULL || !BN_mul(r, rsa->p, rsa->q, ctx))
                             ^
  364.         goto err;
  365.     /* (Step 4.c): Check n = pq */

#1043
crypto/rsa/rsa_sp800_56b_check.c:378: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_check_crt_components`.
  376.           && rsa_check_private_exponent(rsa, nbits, ctx)
  377.           /* 6.4.1.2.3 (Step 7): Check the CRT components */
  378.           && rsa_check_crt_components(rsa, ctx);
                    ^
  379.     if (ret != 1)
  380.         RSAerr(RSA_F_RSA_SP800_56B_CHECK_KEYPAIR, RSA_R_INVALID_KEYPAIR);

#1044
crypto/bn/bn_nist.c:431: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  429.      * this is what happens below, but without explicit if:-) a.
  430.      */
  431.     mask =
           ^
  432.         0 - (PTR_SIZE_INT) bn_sub_words(c_d, r_d, _nist_p_192[0],
  433.                                         BN_NIST_192_TOP);

#1045
crypto/ec/ec_ameth.c:325: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_GROUP_cmp`.
  323.     if (group_a == NULL || group_b == NULL)
  324.         return -2;
  325.     if (EC_GROUP_cmp(group_a, group_b, NULL))
               ^
  326.         return 0;
  327.     else

#1046
crypto/evp/evp_lib.c:330: error: Dead Store
  The value written to &ret (type int) is never used.
  328.          * if in == NULL.  Regardless of which, we return what we got.
  329.          */
  330.         int ret = -1;
               ^
  331.         size_t outl = 0;
  332.         size_t blocksize = EVP_CIPHER_CTX_block_size(ctx);

#1047
test/crltest.c:321: error: Buffer Overrun L3
  Offset: [23, 65] Size: [24, 66] by call to `CRL_from_strings`.
  319. static int test_bad_issuer_crl(void)
  320. {
  321.     X509_CRL *bad_issuer_crl = CRL_from_strings(kBadIssuerCRL);
                                      ^
  322.     int r;
  323. 

#1048
crypto/ec/curve448/curve448.c:335: error: Integer Overflow L2
  ([0, `enc`] - 1):unsigned32 by call to `constant_time_is_zero_32`.
  333. 
  334.     succ = gf_deserialize(p->y, enc2, 1, 0);
  335.     succ &= word_is_zero(enc2[EDDSA_448_PRIVATE_BYTES - 1]);
                   ^
  336. 
  337.     gf_sqr(p->x, p->y);

#1049
crypto/bn/bn_mul.c:466: error: Integer Overflow L2
  ([0, 18446744073709551615] + 1):unsigned64.
  464.                 p++;
  465.                 lo = *p;
  466.                 ln = (lo + 1) & BN_MASK2;
                       ^
  467.                 *p = ln;
  468.             } while (ln == 0);

#1050
crypto/bn/bn_mul.c:340: error: Integer Overflow L2
  ([0, `a`] - 1):unsigned64 by call to `bn_sub_part_words`.
  338.     switch (c1 * 3 + c2) {
  339.     case -4:
  340.         bn_sub_part_words(t, &(a[n]), a, tna, tna - n); /* - */
               ^
  341.         bn_sub_part_words(&(t[n]), b, &(b[n]), tnb, n - tnb); /* - */
  342.         break;

#1051
crypto/bn/bn_mul.c:340: error: Integer Overflow L2
  ([0, `a`] - [0, 1]):unsigned64 by call to `bn_sub_part_words`.
  338.     switch (c1 * 3 + c2) {
  339.     case -4:
  340.         bn_sub_part_words(t, &(a[n]), a, tna, tna - n); /* - */
               ^
  341.         bn_sub_part_words(&(t[n]), b, &(b[n]), tnb, n - tnb); /* - */
  342.         break;

#1052
crypto/bn/bn_mul.c:353: error: Integer Overflow L2
  ([0, `a`] - [0, 1]):unsigned64 by call to `bn_sub_part_words`.
  351.     case 1:
  352.     case 2:
  353.         bn_sub_part_words(t, a, &(a[n]), tna, n - tna); /* + */
               ^
  354.         bn_sub_part_words(&(t[n]), b, &(b[n]), tnb, n - tnb); /* - */
  355.         neg = 1;

#1053
crypto/bn/bn_mul.c:341: error: Integer Overflow L2
  ([0, `b`] - 1):unsigned64 by call to `bn_sub_part_words`.
  339.     case -4:
  340.         bn_sub_part_words(t, &(a[n]), a, tna, tna - n); /* - */
  341.         bn_sub_part_words(&(t[n]), b, &(b[n]), tnb, n - tnb); /* - */
               ^
  342.         break;
  343.     case -3:

#1054
crypto/bn/bn_mul.c:341: error: Integer Overflow L2
  ([0, `b`] - [0, 1]):unsigned64 by call to `bn_sub_part_words`.
  339.     case -4:
  340.         bn_sub_part_words(t, &(a[n]), a, tna, tna - n); /* - */
  341.         bn_sub_part_words(&(t[n]), b, &(b[n]), tnb, n - tnb); /* - */
               ^
  342.         break;
  343.     case -3:

#1055
crypto/bn/bn_mul.c:346: error: Integer Overflow L2
  ([0, `b`] - [0, 1]):unsigned64 by call to `bn_sub_part_words`.
  344.     case -2:
  345.         bn_sub_part_words(t, &(a[n]), a, tna, tna - n); /* - */
  346.         bn_sub_part_words(&(t[n]), &(b[n]), b, tnb, tnb - n); /* + */
               ^
  347.         neg = 1;
  348.         break;

#1056
apps/passwd.c:483: error: Buffer Overrun L2
  Offset: [15, 17] Size: 16.
  481.         }
  482.         assert(i == 15);
  483.         *output++ = cov_2char[buf_perm[i] & 0x3f];
                                     ^
  484.         *output++ = cov_2char[buf_perm[i] >> 6];
  485.         *output = 0;

#1057
crypto/bio/bss_mem.c:329: error: Dead Store
  The value written to &ret (type int) is never used.
  327. {
  328.     int i, j;
  329.     int ret = -1;
           ^
  330.     char *p;
  331.     BIO_BUF_MEM *bbm = (BIO_BUF_MEM *)bp->ptr;

#1058
test/handshake_helper.c:333: error: Null Dereference
  pointer `ex_data` last assigned on line 331 could be null and is dereferenced at line 333, column 5.
  331.     HANDSHAKE_EX_DATA *ex_data =
  332.         (HANDSHAKE_EX_DATA*)(SSL_get_ex_data(s, ex_data_idx));
  333.     ex_data->session_ticket_do_not_call = 1;
           ^
  334.     return 0;
  335. }

#1059
crypto/ec/ecdsa_ossl.c:333: error: Dead Store
  The value written to &derlen (type int) is never used.
  331.     const unsigned char *p = sigbuf;
  332.     unsigned char *der = NULL;
  333.     int derlen = -1;
           ^
  334.     int ret = -1;
  335. 

#1060
test/params_test.c:335: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 9 by call to `BN_hex2bn`.
  333.     app_p1 = app_p1_init;
  334.     app_p2 = app_p2_init;
  335.     if (!BN_hex2bn(&app_p3, app_p3_init)
                ^
  336.         || (l = BN_bn2nativepad(app_p3, bignumbin, sizeof(bignumbin))) < 0)
  337.         return 0;

#1061
test/params_test.c:335: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 9 by call to `BN_hex2bn`.
  333.     app_p1 = app_p1_init;
  334.     app_p2 = app_p2_init;
  335.     if (!BN_hex2bn(&app_p3, app_p3_init)
                ^
  336.         || (l = BN_bn2nativepad(app_p3, bignumbin, sizeof(bignumbin))) < 0)
  337.         return 0;

#1062
test/ssltest_old.c:356: error: Null Dereference
  pointer `client_proto` last assigned on line 332 could be null and is dereferenced by call to `memcmp()` at line 356, column 10.
  354.     if (alpn_expected != NULL &&
  355.         (client_proto_len != strlen(alpn_expected) ||
  356.          memcmp(client_proto, alpn_expected, client_proto_len) != 0)) {
                ^
  357.         BIO_printf(bio_stdout,
  358.                    "ALPN selected protocols not equal to expected protocol: %s\n",

#1063
test/ssltest_old.c:344: error: Null Dereference
  pointer `server_proto` last assigned on line 333 could be null and is dereferenced by call to `memcmp()` at line 344, column 9.
  342. 
  343.     if (client_proto != NULL &&
  344.         memcmp(client_proto, server_proto, client_proto_len) != 0) {
               ^
  345.         BIO_printf(bio_stdout, "ALPN selected protocols differ!\n");
  346.         goto err;

#1064
ssl/statem/extensions_clnt.c:347: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 5]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  345.             || !WPACKET_put_bytes_u8(pkt, TLSEXT_STATUSTYPE_ocsp)
  346.                /* Sub-packet for the ids */
  347.             || !WPACKET_start_sub_packet_u16(pkt)) {
                       ^
  348.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  349.                  SSL_F_TLS_CONSTRUCT_CTOS_STATUS_REQUEST, ERR_R_INTERNAL_ERROR);

#1065
test/sm2_internal_test.c:336: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 2 by call to `create_EC_group`.
  334.     /* From draft-shen-sm2-ecdsa-02 */
  335.     EC_GROUP *test_group =
  336.         create_EC_group
               ^
  337.         ("8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3",
  338.          "787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498",

#1066
test/sm2_internal_test.c:336: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 2 by call to `create_EC_group`.
  334.     /* From draft-shen-sm2-ecdsa-02 */
  335.     EC_GROUP *test_group =
  336.         create_EC_group
               ^
  337.         ("8542D69E4C044F18E8B92435BF6FF7DE457283915C45517D722EDB8B08F1DFC3",
  338.          "787968B4FA32C3FD2417842E73BBFEFF2F3C848B6831D7E0EC65228B3937E498",

#1067
test/bftest.c:338: error: Buffer Overrun L2
  Offset: [0, 71] Size: 25 by call to `BF_set_key`.
  336.     unsigned char out[8];
  337. 
  338.     BF_set_key(&key, n+1, key_test);
           ^
  339.     BF_ecb_encrypt(key_data, out, &key, BF_ENCRYPT);
  340.     /* mips-sgi-irix6.5-gcc  vv  -mabi=64 bug workaround */

#1068
test/bftest.c:338: error: Buffer Overrun L2
  Offset: [1+min(71, `n`), 72] Size: 25 by call to `BF_set_key`.
  336.     unsigned char out[8];
  337. 
  338.     BF_set_key(&key, n+1, key_test);
           ^
  339.     BF_ecb_encrypt(key_data, out, &key, BF_ENCRYPT);
  340.     /* mips-sgi-irix6.5-gcc  vv  -mabi=64 bug workaround */

#1069
test/crltest.c:335: error: Buffer Overrun L3
  Offset: [21, 65] Size: [22, 66] by call to `CRL_from_strings`.
  333. static int test_known_critical_crl(void)
  334. {
  335.     X509_CRL *known_critical_crl = CRL_from_strings(kKnownCriticalCRL);
                                          ^
  336.     int r;
  337. 

#1070
crypto/bn/bn_prime.c:393: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_gcd`.
  391.         if (enhanced) {
  392.             /* (Step 4.3) */
  393.             if (!BN_gcd(g, b, w, ctx))
                        ^
  394.                 goto err;
  395.             /* (Step 4.4) */

#1071
crypto/bn/bn_prime.c:411: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  409.         for (j = 1; j < a ; ++j) {
  410.             /* (Step 4.7.1 - 4.7.2) x = z. z = x^2 mod w */
  411.             if (!BN_copy(x, z) || !BN_mod_mul(z, x, x, w, ctx))
                                          ^
  412.                 goto err;
  413.             /* (Step 4.7.3) */

#1072
crypto/bn/bn_prime.c:387: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range_ex`.
  385.     for (i = 0; i < iterations; ++i) {
  386.         /* (Step 4.1) obtain a Random string of bits b where 1 < b < w-1 */
  387.         if (!BN_priv_rand_range_ex(b, w3, ctx)
                    ^
  388.                 || !BN_add_word(b, 2)) /* 1 < b < w-1 */
  389.             goto err;

#1073
test/rsa_sp800_56b_test.c:366: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_sp800_56b_derive_params_from_pq`.
  364.         goto end;
  365.     }
  366.     ret = TEST_true(rsa_sp800_56b_derive_params_from_pq(key, 8, e, ctx))
                 ^
  367.           && TEST_BN_eq_word(key->n, N)
  368.           && TEST_BN_eq_word(key->dmp1, DP)

#1074
ssl/record/rec_layer_d1.c:409: error: Integer Overflow L2
  ([0, max(1, `s->rlayer.numwpipes`)] - 1):unsigned64 by call to `dtls1_handle_timeout`.
  407. 
  408.     /* Check for timeout */
  409.     if (dtls1_handle_timeout(s) > 0) {
               ^
  410.         goto start;
  411.     } else if (ossl_statem_in_error(s)) {

#1075
ssl/record/rec_layer_d1.c:422: error: Integer Overflow L2
  ([0, max(1, `s->rlayer.numwpipes`)] - 1):unsigned64 by call to `dtls1_read_failed`.
  420.         iret = dtls1_get_record(s);
  421.         if (iret <= 0) {
  422.             iret = dtls1_read_failed(s, iret);
                          ^
  423.             /*
  424.              * Anything other than a timeout is an error. SSLfatal() already

#1076
ssl/record/rec_layer_s3.c:625: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `do_ssl3_write`.
  623.         }
  624. 
  625.         i = do_ssl3_write(s, type, &(buf[tot]), pipelens, numpipes, 0,
                   ^
  626.                           &tmpwrit);
  627.         if (i <= 0) {

#1077
ssl/record/rec_layer_s3.c:529: error: Integer Overflow L2
  ([0, max(1, `s->rlayer.numwpipes`)] - 1):unsigned64 by call to `ssl3_write_pending`.
  527.             s->rlayer.wpend_ret = nw;
  528. 
  529.             i = ssl3_write_pending(s, type, &buf[tot], nw, &tmpwrit);
                       ^
  530.             if (i <= 0) {
  531.                 /* SSLfatal() already called if appropriate */

#1078
crypto/ec/ec_ameth.c:356: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_KEY_key2buf`.
  354. 
  355.     if (ktype != EC_KEY_PRINT_PARAM && EC_KEY_get0_public_key(x) != NULL) {
  356.         publen = EC_KEY_key2buf(x, EC_KEY_get_conv_form(x), &pub, NULL);
                        ^
  357.         if (publen == 0)
  358.             goto err;

#1079
crypto/rsa/rsa_sp800_56b_gen.c:362: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  360.         RSAerr(RSA_F_RSA_SP800_56B_PAIRWISE_TEST, RSA_R_PAIRWISE_TEST_FAILURE);
  361. err:
  362.     BN_CTX_end(ctx);
           ^
  363.     return ret;
  364. }

#1080
test/property_test.c:361: error: Buffer Overrun L3
  Offset added: [1, +oo] Size: [0, +oo] by call to `ossl_method_store_add`.
  359.         v[i] = 2 * i;
  360.         BIO_snprintf(buf, sizeof(buf), "n=%d\n", i);
  361.         if (!TEST_true(ossl_method_store_add(store, NULL, i, buf, "abc",
                    ^
  362.                                              &up_ref, &down_ref))
  363.                 || !TEST_true(ossl_method_store_cache_set(store, i, buf, v + i,

#1081
test/property_test.c:361: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ossl_method_store_add`.
  359.         v[i] = 2 * i;
  360.         BIO_snprintf(buf, sizeof(buf), "n=%d\n", i);
  361.         if (!TEST_true(ossl_method_store_add(store, NULL, i, buf, "abc",
                    ^
  362.                                              &up_ref, &down_ref))
  363.                 || !TEST_true(ossl_method_store_cache_set(store, i, buf, v + i,

#1082
crypto/err/err.c:358: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `lh_ERR_STRING_DATA_delete`.
  356.      */
  357.     for (; str->error; str++)
  358.         (void)lh_ERR_STRING_DATA_delete(int_error_hash, str);
                     ^
  359.     CRYPTO_THREAD_unlock(err_string_lock);
  360. 

#1083
test/bftest.c:356: error: Buffer Overrun L1
  Offset: [16, 72] Size: 16 by call to `BF_set_key`.
  354.     len = strlen(cbc_data) + 1;
  355. 
  356.     BF_set_key(&key, 16, cbc_key);
           ^
  357.     memset(cbc_in, 0, sizeof(cbc_in));
  358.     memset(cbc_out, 0, sizeof(cbc_out));

#1084
test/bftest.c:356: error: Buffer Overrun L2
  Offset: [0, 71] Size: 16 by call to `BF_set_key`.
  354.     len = strlen(cbc_data) + 1;
  355. 
  356.     BF_set_key(&key, 16, cbc_key);
           ^
  357.     memset(cbc_in, 0, sizeof(cbc_in));
  358.     memset(cbc_out, 0, sizeof(cbc_out));

#1085
ssl/statem/statem_lib.c:474: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `BUF_reverse`.
  472.                 goto err;
  473.             }
  474.             BUF_reverse(gost_data, data, len);
                   ^
  475.             data = gost_data;
  476.         }

#1086
crypto/bn/bn_gcd.c:471: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  469.          */
  470. 
  471.         if (!BN_mul(tmp, D, X, ctx))
                    ^
  472.             goto err;
  473.         if (!BN_add(tmp, tmp, Y))

#1087
crypto/bn/bn_gcd.c:503: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_nnmod`.
  501.                 goto err;
  502.         } else {
  503.             if (!BN_nnmod(R, Y, n, ctx))
                        ^
  504.                 goto err;
  505.         }

#1088
crypto/bn/bn_gcd.c:473: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  471.         if (!BN_mul(tmp, D, X, ctx))
  472.             goto err;
  473.         if (!BN_add(tmp, tmp, Y))
                    ^
  474.             goto err;
  475. 

#1089
crypto/ec/ecdsa_ossl.c:439: error: Integer Overflow L2
  (0 - [0, max(1, `eckey->group->order->top`)]):unsigned64 by call to `EC_POINT_mul`.
  437.         goto err;
  438.     }
  439.     if (!EC_POINT_mul(group, point, u1, pub_key, u2, ctx)) {
                ^
  440.         ECerr(EC_F_ECDSA_SIMPLE_VERIFY_SIG, ERR_R_EC_LIB);
  441.         goto err;

#1090
crypto/ec/ecdsa_ossl.c:425: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  423.     }
  424.     /* u1 = m * tmp mod order */
  425.     if (!BN_mod_mul(u1, m, u2, order, ctx)) {
                ^
  426.         ECerr(EC_F_ECDSA_SIMPLE_VERIFY_SIG, ERR_R_BN_LIB);
  427.         goto err;

#1091
crypto/ec/ecdsa_ossl.c:430: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  428.     }
  429.     /* u2 = r * w mod q */
  430.     if (!BN_mod_mul(u2, sig->r, u2, order, ctx)) {
                ^
  431.         ECerr(EC_F_ECDSA_SIMPLE_VERIFY_SIG, ERR_R_BN_LIB);
  432.         goto err;

#1092
crypto/ec/ecdsa_ossl.c:439: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  437.         goto err;
  438.     }
  439.     if (!EC_POINT_mul(group, point, u1, pub_key, u2, ctx)) {
                ^
  440.         ECerr(EC_F_ECDSA_SIMPLE_VERIFY_SIG, ERR_R_EC_LIB);
  441.         goto err;

#1093
crypto/cmp/cmp_msg.c:367: error: Dead Store
  The value written to &status (type int) is never used.
  365.     OSSL_CMP_CERTREPMESSAGE *repMsg = NULL;
  366.     OSSL_CMP_CERTRESPONSE *resp = NULL;
  367.     int status = -1;
           ^
  368. 
  369.     if (!ossl_assert(ctx != NULL && si != NULL))

#1094
test/crltest.c:362: error: Buffer Overrun L3
  Offset: [23, 65] Size: [24, 66] by call to `CRL_from_strings`.
  360. static int test_reuse_crl(void)
  361. {
  362.     X509_CRL *reused_crl = CRL_from_strings(kBasicCRL);
                                  ^
  363.     char *p;
  364.     BIO *b = glue2bio(kRevokedCRL, &p);

#1095
crypto/objects/obj_dat.c:387: error: Integer Overflow L2
  ([2, 2147483645] + [1, 2147483644]):signed32 by call to `ASN1_object_size`.
  385.     }
  386.     /* Work out total size */
  387.     j = ASN1_object_size(0, i, V_ASN1_OBJECT);
               ^
  388.     if (j < 0)
  389.         return NULL;

#1096
engines/e_afalg.c:370: error: Null Dereference
  pointer `null` is dereferenced by call to `perror()` at line 370, column 9.
  368.     ret = setsockopt(actx->bfd, SOL_ALG, ALG_SET_KEY, key, klen);
  369.     if (ret < 0) {
  370.         ALG_PERR("%s(%d): Failed to set socket option : ", __FILE__, __LINE__);
               ^
  371.         AFALGerr(AFALG_F_AFALG_SET_KEY, AFALG_R_SOCKET_SET_KEY_FAILED);
  372.         return 0;

#1097
crypto/evp/e_chacha20_poly1305.c:470: error: Buffer Overrun L2
  Offset: [1, 70+max(15, `ctx->cipher_data->num`)] Size: 16 by call to `Poly1305_Final`.
  468.             Poly1305_Update(POLY1305_ctx(actx), temp, POLY1305_BLOCK_SIZE);
  469.         }
  470.         Poly1305_Final(POLY1305_ctx(actx), ctx->encrypt ? actx->tag
               ^
  471.                                                         : temp);
  472.         actx->mac_inited = 0;

#1098
crypto/evp/e_chacha20_poly1305.c:414: error: Integer Overflow L2
  (16 - [1, 14+max(15, `ctx->cipher_data->num`)]):unsigned64 by call to `Poly1305_Update`.
  412.             if (ctx->encrypt) {                 /* plaintext */
  413.                 chacha_cipher(ctx, out, in, plen);
  414.                 Poly1305_Update(POLY1305_ctx(actx), out, plen);
                       ^
  415.                 in += plen;
  416.                 out += plen;

#1099
crypto/evp/e_chacha20_poly1305.c:419: error: Integer Overflow L2
  (16 - [1, 14+max(15, `ctx->cipher_data->num`)]):unsigned64 by call to `Poly1305_Update`.
  417.                 actx->len.text += plen;
  418.             } else {                            /* ciphertext */
  419.                 Poly1305_Update(POLY1305_ctx(actx), in, plen);
                       ^
  420.                 chacha_cipher(ctx, out, in, plen);
  421.                 in += plen;

#1100
crypto/evp/e_chacha20_poly1305.c:437: error: Integer Overflow L2
  (16 - [1, 28+max(15, `ctx->cipher_data->num`)]):unsigned64 by call to `Poly1305_Update`.
  435.         if (actx->aad) {                        /* wrap up aad */
  436.             if ((rem = (size_t)actx->len.aad % POLY1305_BLOCK_SIZE))
  437.                 Poly1305_Update(POLY1305_ctx(actx), zero,
                       ^
  438.                                 POLY1305_BLOCK_SIZE - rem);
  439.             actx->aad = 0;

#1101
crypto/evp/e_chacha20_poly1305.c:443: error: Integer Overflow L2
  (16 - [1, 42+max(15, `ctx->cipher_data->num`)]):unsigned64 by call to `Poly1305_Update`.
  441. 
  442.         if ((rem = (size_t)actx->len.text % POLY1305_BLOCK_SIZE))
  443.             Poly1305_Update(POLY1305_ctx(actx), zero,
                   ^
  444.                             POLY1305_BLOCK_SIZE - rem);
  445. 

#1102
crypto/evp/e_chacha20_poly1305.c:447: error: Integer Overflow L2
  (16 - [1, 56+max(15, `ctx->cipher_data->num`)]):unsigned64 by call to `Poly1305_Update`.
  445. 
  446.         if (is_endian.little) {
  447.             Poly1305_Update(POLY1305_ctx(actx),
                   ^
  448.                             (unsigned char *)&actx->len, POLY1305_BLOCK_SIZE);
  449.         } else {

#1103
crypto/evp/e_chacha20_poly1305.c:414: error: Integer Overflow L2
  ([-15, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  412.             if (ctx->encrypt) {                 /* plaintext */
  413.                 chacha_cipher(ctx, out, in, plen);
  414.                 Poly1305_Update(POLY1305_ctx(actx), out, plen);
                       ^
  415.                 in += plen;
  416.                 out += plen;

#1104
crypto/evp/e_chacha20_poly1305.c:419: error: Integer Overflow L2
  ([-15, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  417.                 actx->len.text += plen;
  418.             } else {                            /* ciphertext */
  419.                 Poly1305_Update(POLY1305_ctx(actx), in, plen);
                       ^
  420.                 chacha_cipher(ctx, out, in, plen);
  421.                 in += plen;

#1105
crypto/evp/e_chacha20_poly1305.c:385: error: Integer Overflow L2
  ([-2, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  383.         actx->mac_inited = 1;
  384.         if (plen != NO_TLS_PAYLOAD_LENGTH) {
  385.             Poly1305_Update(POLY1305_ctx(actx), actx->tls_aad,
                   ^
  386.                             EVP_AEAD_TLS1_AAD_LEN);
  387.             actx->len.aad = EVP_AEAD_TLS1_AAD_LEN;

#1106
crypto/evp/e_chacha20_poly1305.c:413: error: Integer Overflow L2
  ([0, +oo] - [0, 63]):unsigned64 by call to `chacha_cipher`.
  411. 
  412.             if (ctx->encrypt) {                 /* plaintext */
  413.                 chacha_cipher(ctx, out, in, plen);
                       ^
  414.                 Poly1305_Update(POLY1305_ctx(actx), out, plen);
  415.                 in += plen;

#1107
crypto/evp/e_chacha20_poly1305.c:420: error: Integer Overflow L2
  ([0, +oo] - [0, 63]):unsigned64 by call to `chacha_cipher`.
  418.             } else {                            /* ciphertext */
  419.                 Poly1305_Update(POLY1305_ctx(actx), in, plen);
  420.                 chacha_cipher(ctx, out, in, plen);
                       ^
  421.                 in += plen;
  422.                 out += plen;

#1108
crypto/evp/e_chacha20_poly1305.c:414: error: Integer Overflow L2
  ([0, +oo] - [2-max(15, `ctx->cipher_data->num`), 15]):unsigned64 by call to `Poly1305_Update`.
  412.             if (ctx->encrypt) {                 /* plaintext */
  413.                 chacha_cipher(ctx, out, in, plen);
  414.                 Poly1305_Update(POLY1305_ctx(actx), out, plen);
                       ^
  415.                 in += plen;
  416.                 out += plen;

#1109
crypto/evp/e_chacha20_poly1305.c:419: error: Integer Overflow L2
  ([0, +oo] - [2-max(15, `ctx->cipher_data->num`), 15]):unsigned64 by call to `Poly1305_Update`.
  417.                 actx->len.text += plen;
  418.             } else {                            /* ciphertext */
  419.                 Poly1305_Update(POLY1305_ctx(actx), in, plen);
                       ^
  420.                 chacha_cipher(ctx, out, in, plen);
  421.                 in += plen;

#1110
crypto/evp/e_chacha20_poly1305.c:437: error: Integer Overflow L2
  ([1, 31] - [-12-max(15, `ctx->cipher_data->num`), 15]):unsigned64 by call to `Poly1305_Update`.
  435.         if (actx->aad) {                        /* wrap up aad */
  436.             if ((rem = (size_t)actx->len.aad % POLY1305_BLOCK_SIZE))
  437.                 Poly1305_Update(POLY1305_ctx(actx), zero,
                       ^
  438.                                 POLY1305_BLOCK_SIZE - rem);
  439.             actx->aad = 0;

#1111
crypto/evp/e_chacha20_poly1305.c:443: error: Integer Overflow L2
  ([1, 31] - [-26-max(15, `ctx->cipher_data->num`), 15]):unsigned64 by call to `Poly1305_Update`.
  441. 
  442.         if ((rem = (size_t)actx->len.text % POLY1305_BLOCK_SIZE))
  443.             Poly1305_Update(POLY1305_ctx(actx), zero,
                   ^
  444.                             POLY1305_BLOCK_SIZE - rem);
  445. 

#1112
crypto/evp/e_chacha20_poly1305.c:401: error: Integer Overflow L2
  ([1, 31] - [16-max(15, `ctx->cipher_data->num`), 15]):unsigned64 by call to `Poly1305_Update`.
  399.             if (actx->aad) {                    /* wrap up aad */
  400.                 if ((rem = (size_t)actx->len.aad % POLY1305_BLOCK_SIZE))
  401.                     Poly1305_Update(POLY1305_ctx(actx), zero,
                           ^
  402.                                     POLY1305_BLOCK_SIZE - rem);
  403.                 actx->aad = 0;

#1113
crypto/rsa/rsa_ossl.c:416: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_get_blinding`.
  414. 
  415.     if (!(rsa->flags & RSA_FLAG_NO_BLINDING)) {
  416.         blinding = rsa_get_blinding(rsa, &local_blinding, ctx);
                          ^
  417.         if (blinding == NULL) {
  418.             RSAerr(RSA_F_RSA_OSSL_PRIVATE_DECRYPT, ERR_R_INTERNAL_ERROR);

#1114
crypto/evp/digest.c:386: error: Dead Store
  The value written to &i (type unsigned long) is never used.
  384. 
  385.     params[i++] = OSSL_PARAM_construct_size_t(OSSL_DIGEST_PARAM_XOFLEN, &size);
  386.     params[i++] = OSSL_PARAM_construct_end();
                  ^
  387. 
  388.     if (EVP_MD_CTX_set_params(ctx, params) > 0)

#1115
test/bftest.c:382: error: Buffer Overrun L1
  Offset: [16, 72] Size: 16 by call to `BF_set_key`.
  380.     len = strlen(cbc_data) + 1;
  381. 
  382.     BF_set_key(&key, 16, cbc_key);
           ^
  383.     memset(cbc_in, 0, 40);
  384.     memset(cbc_out, 0, 40);

#1116
test/bftest.c:382: error: Buffer Overrun L2
  Offset: [0, 71] Size: 16 by call to `BF_set_key`.
  380.     len = strlen(cbc_data) + 1;
  381. 
  382.     BF_set_key(&key, 16, cbc_key);
           ^
  383.     memset(cbc_in, 0, 40);
  384.     memset(cbc_out, 0, 40);

#1117
crypto/ct/ct_sct.c:383: error: Dead Store
  The value written to &is_sct_valid (type int) is never used.
  381. 
  382.     for (i = 0; i < sct_count; ++i) {
  383.         int is_sct_valid = -1;
               ^
  384.         SCT *sct = sk_SCT_value(scts, i);
  385. 

#1118
crypto/ec/ec_key.c:419: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_mul`.
  417.     }
  418.     /* 5.6.2.3.3 (Step 4) : pub_key * order is the point at infinity. */
  419.     if (!EC_POINT_mul(eckey->group, point, NULL, eckey->pub_key, order, ctx)) {
                ^
  420.         ECerr(EC_F_EC_KEY_SIMPLE_CHECK_KEY, ERR_R_EC_LIB);
  421.         goto err;

#1119
crypto/ec/ec_key.c:402: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ec_key_public_range_check`.
  400. 
  401.     /* 5.6.2.3.3 (Step 2) Test if the public key is in range */
  402.     if (!ec_key_public_range_check(ctx, eckey)) {
                ^
  403.         ECerr(EC_F_EC_KEY_SIMPLE_CHECK_KEY, EC_R_COORDINATES_OUT_OF_RANGE);
  404.         goto err;

#1120
engines/e_afalg.c:381: error: Dead Store
  The value written to &r (type int) is never used.
  379. {
  380.     struct sockaddr_alg sa;
  381.     int r = -1;
           ^
  382. 
  383.     actx->bfd = actx->sfd = -1;

#1121
test/bad_dtls_test.c:395: error: Integer Overflow L2
  ([2, +oo] - 10):unsigned64 by call to `PACKET_forward`.
  393.         return 0;
  394.     /* Skip the rest of the record header */
  395.     if (!PACKET_forward(&pkt, DTLS1_RT_HEADER_LENGTH - 3))
                ^
  396.         return 0;
  397. 

#1122
test/params_test.c:393: error: Dead Store
  The value written to &n (type unsigned long) is never used.
  391.                                                 sizeof(app_p6_init));
  392.     params[n++] = OSSL_PARAM_construct_octet_string("foo", &foo, sizeof(foo));
  393.     params[n++] = OSSL_PARAM_construct_end();
                  ^
  394. 
  395.     return params;

#1123
crypto/ec/curve448/curve448.c:405: error: Integer Overflow L2
  (0 - [0, 1]):unsigned32.
  403. 
  404.         k_t = (sb >> (t % 8)) & 1;
  405.         k_t = 0 - k_t;             /* set to all 0s or all 1s */
               ^
  406. 
  407.         swap ^= k_t;

#1124
crypto/ts/ts_rsp_verify.c:428: error: Null Dereference
  pointer `signer` last assigned on line 390 could be null and is dereferenced by call to `ts_check_signer_name()` at line 428, column 25.
  426.         goto err;
  427.     if ((flags & TS_VFY_SIGNER)
  428.         && tsa_name && !ts_check_signer_name(tsa_name, signer)) {
                               ^
  429.         TSerr(TS_F_INT_TS_RESP_VERIFY_TOKEN, TS_R_TSA_NAME_MISMATCH);
  430.         goto err;

#1125
test/bntest.c:505: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 129 by call to `BN_hex2bn`.
  503.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
  504.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"))
  505.          && TEST_true(BN_hex2bn(&n,
                   ^
  506.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
  507.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"))

#1126
test/bntest.c:505: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 129 by call to `BN_hex2bn`.
  503.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
  504.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"))
  505.          && TEST_true(BN_hex2bn(&n,
                   ^
  506.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
  507.         "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"))

#1127
test/bntest.c:486: error: Buffer Overrun L3
  Offset: [54, 64] Size: [55, 65] by call to `parse_bigBN`.
  484.         };
  485. 
  486.         if (!(TEST_true(parse_bigBN(&a, ahex))
                     ^
  487.                 && TEST_true(parse_bigBN(&n, nhex))))
  488.             goto err;

#1128
test/bntest.c:557: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_eq`.
  555.         goto err;
  556.     BN_zero(d);
  557.     if (!TEST_BN_eq(c, d))
                ^
  558.         goto err;
  559. 

#1129
test/bntest.c:574: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `BN_MONT_CTX_set`.
  572.      */
  573.     if (!(TEST_true(BN_one(a))
  574.             && TEST_true(BN_MONT_CTX_set(mont, m, ctx))))
                      ^
  575.         goto err;
  576.     if (!TEST_true(BN_from_montgomery(e, a, mont, ctx))

#1130
test/bntest.c:436: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul_montgomery`.
  434. 
  435.     if (!(TEST_true(BN_MONT_CTX_set(mont, n, ctx))
  436.             && TEST_true(BN_mod_mul_montgomery(c, a, b, mont, ctx))
                      ^
  437.             && TEST_true(BN_mod_mul_montgomery(d, b, a, mont, ctx))
  438.             && TEST_BN_eq(c, d)))

#1131
apps/openssl.c:405: error: Buffer Overrun L3
  Offset: [4, 7] Size: [5, 8] by call to `opt_help`.
  403.             return 1;
  404.         case OPT_hHELP:
  405.             opt_help(help_options);
                   ^
  406.             return 0;
  407.         }

#1132
include/internal/constant_time.h:403: error: Integer Overflow L2
  ([0, `idx`] - 1):unsigned64 by call to `constant_time_is_zero_s`.
  401.     /* Note idx may underflow - but that is well defined */
  402.     for (i = 0; i < numrows; i++, idx--) {
  403.         mask = (unsigned char)constant_time_is_zero_s(idx);
                                     ^
  404.         for (j = 0; j < rowsize; j++)
  405.             *(outc + j) |= constant_time_select_8(mask, *(tablec++), 0);

#1133
test/sslapitest.c:457: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  455.     SSL_shutdown(serverssl);
  456.     SSL_free(serverssl);
  457.     SSL_free(clientssl);
           ^
  458.     serverssl = clientssl = NULL;
  459. 

#1134
test/sslapitest.c:457: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  455.     SSL_shutdown(serverssl);
  456.     SSL_free(serverssl);
  457.     SSL_free(clientssl);
           ^
  458.     serverssl = clientssl = NULL;
  459. 

#1135
crypto/evp/bio_enc.c:391: error: Dead Store
  The value written to &ret (type long) is never used.
  389. static long enc_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  390. {
  391.     long ret = 1;
           ^
  392.     BIO *next = BIO_next(b);
  393. 

#1136
crypto/property/property.c:398: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `impl_cache_flush_alg`.
  396.     if (alg != NULL) {
  397.         store->nelem -= lh_QUERY_num_items(alg->cache);
  398.         impl_cache_flush_alg(0, alg);
               ^
  399.     }
  400. }

#1137
crypto/evp/e_aria.c:425: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo] by call to `CRYPTO_gcm128_tag`.
  423.         out += len;
  424.         /* Finally write tag */
  425.         CRYPTO_gcm128_tag(&gctx->gcm, out, EVP_GCM_TLS_TAG_LEN);
               ^
  426.         rv = len + EVP_GCM_TLS_EXPLICIT_IV_LEN + EVP_GCM_TLS_TAG_LEN;
  427.     } else {

#1138
ssl/bio_ssl.c:397: error: Dead Store
  The value written to &ret (type long) is never used.
  395.     SSL *ssl;
  396.     BIO_SSL *bs;
  397.     long ret = 1;
           ^
  398. 
  399.     bs = BIO_get_data(b);

#1139
apps/lib/s_cb.c:415: error: Null Dereference
  pointer `ec` last assigned on line 412 could be null and is dereferenced by call to `EC_KEY_get0_group()` at line 415, column 43.
  413.             int nid;
  414.             const char *cname;
  415.             nid = EC_GROUP_get_curve_name(EC_KEY_get0_group(ec));
                                                 ^
  416.             EC_KEY_free(ec);
  417.             cname = EC_curve_nid2nist(nid);

#1140
crypto/evp/e_aes_cbc_hmac_sha1.c:709: error: Dead Store
  The value written to &maxpad (type unsigned int) is never used.
  707.                     i += 1 & cmask;
  708.                 }
  709.                 maxpad -= SHA_DIGEST_LENGTH;
                       ^
  710. 
  711.                 res = 0 - ((0 - res) >> (sizeof(res) * 8 - 1));

#1141
crypto/evp/e_aes_cbc_hmac_sha1.c:479: error: Integer Overflow L1
  (0 - 32):unsigned64.
  477. 
  478.         /* arrange cache line alignment */
  479.         pmac = (void *)(((size_t)mac.c + 31) & ((size_t)0 - 32));
               ^
  480. 
  481.         if (plen != NO_PAYLOAD_LENGTH) { /* "TLS" mode of operation */

#1142
crypto/evp/e_aes_cbc_hmac_sha1.c:432: error: Integer Overflow L1
  (18446744073709551615 + [8, 504]):unsigned32 by call to `sha1_update`.
  430.         if (plen > (sha_off + iv)
  431.             && (blocks = (plen - (sha_off + iv)) / SHA_CBLOCK)) {
  432.             SHA1_Update(&key->md, in + iv, sha_off);
                   ^
  433. 
  434.             aesni_cbc_sha1_enc(in, out, blocks, &key->ks,

#1143
crypto/evp/e_aes_cbc_hmac_sha1.c:432: error: Integer Overflow L1
  (64 - 18446744073709551615):unsigned64 by call to `sha1_update`.
  430.         if (plen > (sha_off + iv)
  431.             && (blocks = (plen - (sha_off + iv)) / SHA_CBLOCK)) {
  432.             SHA1_Update(&key->md, in + iv, sha_off);
                   ^
  433. 
  434.             aesni_cbc_sha1_enc(in, out, blocks, &key->ks,

#1144
crypto/evp/e_aes_cbc_hmac_sha1.c:432: error: Integer Overflow L1
  ([1, 63] + 18446744073709551615):unsigned64 by call to `sha1_update`.
  430.         if (plen > (sha_off + iv)
  431.             && (blocks = (plen - (sha_off + iv)) / SHA_CBLOCK)) {
  432.             SHA1_Update(&key->md, in + iv, sha_off);
                   ^
  433. 
  434.             aesni_cbc_sha1_enc(in, out, blocks, &key->ks,

#1145
crypto/evp/e_aes_cbc_hmac_sha1.c:432: error: Integer Overflow L1
  ([18446744073709551615, 18446744073709551616] + [0, 63]):unsigned32 by call to `sha1_update`.
  430.         if (plen > (sha_off + iv)
  431.             && (blocks = (plen - (sha_off + iv)) / SHA_CBLOCK)) {
  432.             SHA1_Update(&key->md, in + iv, sha_off);
                   ^
  433. 
  434.             aesni_cbc_sha1_enc(in, out, blocks, &key->ks,

#1146
crypto/evp/e_aes_cbc_hmac_sha1.c:432: error: Integer Overflow L2
  ([-63, +oo] - [-63, 63]):unsigned64 by call to `sha1_update`.
  430.         if (plen > (sha_off + iv)
  431.             && (blocks = (plen - (sha_off + iv)) / SHA_CBLOCK)) {
  432.             SHA1_Update(&key->md, in + iv, sha_off);
                   ^
  433. 
  434.             aesni_cbc_sha1_enc(in, out, blocks, &key->ks,

#1147
crypto/evp/e_aes_cbc_hmac_sha1.c:576: error: Integer Overflow L2
  ([-63, +oo] - [-63, 63]):unsigned64 by call to `sha1_update`.
  574.                 j = (len - (256 + SHA_CBLOCK)) & (0 - SHA_CBLOCK);
  575.                 j += SHA_CBLOCK - key->md.num;
  576.                 SHA1_Update(&key->md, out, j);
                       ^
  577.                 out += j;
  578.                 len -= j;

#1148
crypto/evp/e_aes_cbc_hmac_sha1.c:449: error: Integer Overflow L2
  ([0, +oo] - [-oo, 63]):unsigned64 by call to `sha1_update`.
  447. # endif
  448.         sha_off += iv;
  449.         SHA1_Update(&key->md, in + sha_off, plen - sha_off);
               ^
  450. 
  451.         if (plen != len) {      /* "TLS" mode of operation */

#1149
crypto/evp/e_aes_cbc_hmac_sha1.c:576: error: Integer Overflow L2
  ([0, +oo] - [-oo, 63]):unsigned64 by call to `sha1_update`.
  574.                 j = (len - (256 + SHA_CBLOCK)) & (0 - SHA_CBLOCK);
  575.                 j += SHA_CBLOCK - key->md.num;
  576.                 SHA1_Update(&key->md, out, j);
                       ^
  577.                 out += j;
  578.                 len -= j;

#1150
crypto/evp/e_aes_cbc_hmac_sha1.c:759: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `sha1_update`.
  757.                                   EVP_CIPHER_CTX_iv_noconst(ctx), 0);
  758. 
  759.             SHA1_Update(&key->md, out, len);
                   ^
  760.         }
  761.     }

#1151
test/test_test.c:427: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 65 by call to `BN_hex2bn`.
  425.         && TEST_true(BN_hex2bn(&b, bs))
  426.         && TEST_true(BN_hex2bn(&c, cs))
  427.         && TEST_true(BN_hex2bn(&d, ds))
                  ^
  428.         && (TEST(0, TEST_BN_eq(a, b))
  429.             & TEST(0, TEST_BN_eq(b, a))

#1152
test/test_test.c:427: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 65 by call to `BN_hex2bn`.
  425.         && TEST_true(BN_hex2bn(&b, bs))
  426.         && TEST_true(BN_hex2bn(&c, cs))
  427.         && TEST_true(BN_hex2bn(&d, ds))
                  ^
  428.         && (TEST(0, TEST_BN_eq(a, b))
  429.             & TEST(0, TEST_BN_eq(b, a))

#1153
ssl/statem/extensions_clnt.c:414: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  412.      */
  413.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_next_proto_neg)
  414.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                       ^
  415.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_NPN,
  416.                  ERR_R_INTERNAL_ERROR);

#1154
test/params_api_test.c:411: error: Uninitialized Value
  The value read from p was never initialized.
  409.     param.data = &p;
  410.     return TEST_true(OSSL_PARAM_set_double(&param, 3.14159))
  411.            && TEST_double_eq(p, 3.14159);
                     ^
  412. }
  413. 

#1155
test/bftest.c:414: error: Buffer Overrun L1
  Offset: [16, 72] Size: 16 by call to `BF_set_key`.
  412.     len = strlen(cbc_data) + 1;
  413. 
  414.     BF_set_key(&key, 16, cbc_key);
           ^
  415.     memset(cbc_in, 0, 40);
  416.     memset(cbc_out, 0, 40);

#1156
test/bftest.c:414: error: Buffer Overrun L2
  Offset: [0, 71] Size: 16 by call to `BF_set_key`.
  412.     len = strlen(cbc_data) + 1;
  413. 
  414.     BF_set_key(&key, 16, cbc_key);
           ^
  415.     memset(cbc_in, 0, 40);
  416.     memset(cbc_out, 0, 40);

#1157
crypto/evp/bio_ok.c:409: error: Dead Store
  The value written to &ret (type long) is never used.
  407. static long ok_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  408. {
  409.     long ret = 1;
           ^
  410.     BIO *next;
  411. 

#1158
crypto/ec/ec_mult.c:581: error: Dead Store
  The value written to &numblocks (type unsigned long) is never used.
  579.                  */
  580. 
  581.                 numblocks = 1;
                       ^
  582.                 totalnum = num + 1; /* don't use wNAF splitting */
  583.                 wNAF[num] = tmp_wNAF;

#1159
crypto/ec/ec_mult.c:422: error: Dead Store
  The value written to &r_is_at_infinity (type int) is never used.
  420.     int k;
  421.     int r_is_inverted = 0;
  422.     int r_is_at_infinity = 1;
           ^
  423.     size_t *wsize = NULL;       /* individual window sizes */
  424.     signed char **wNAF = NULL;  /* individual wNAFs */

#1160
crypto/ec/ec_mult.c:603: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64.
  601.                      * possibly we can do with fewer blocks than estimated
  602.                      */
  603.                     numblocks = (tmp_len + blocksize - 1) / blocksize;
                           ^
  604.                     if (numblocks > pre_comp->numblocks) {
  605.                         ECerr(EC_F_EC_WNAF_MUL, ERR_R_INTERNAL_ERROR);

#1161
crypto/pem/pem_lib.c:454: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_DecryptUpdate`.
  452.     ok = EVP_DecryptInit_ex(ctx, cipher->cipher, NULL, key, &(cipher->iv[0]));
  453.     if (ok)
  454.         ok = EVP_DecryptUpdate(ctx, data, &ilen, data, ilen);
                    ^
  455.     if (ok) {
  456.         /* Squirrel away the length of data decrypted so far. */

#1162
crypto/bio/bf_buff.c:413: error: Dead Store
  The value written to &ret (type long) is never used.
  411. static long buffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  412. {
  413.     long ret = 1;
           ^
  414. 
  415.     if (b->next_bio == NULL)

#1163
crypto/evp/e_aes_cbc_hmac_sha256.c:713: error: Dead Store
  The value written to &maxpad (type unsigned int) is never used.
  711.                     i += 1 & cmask;
  712.                 }
  713.                 maxpad -= SHA256_DIGEST_LENGTH;
                       ^
  714. 
  715.                 res = 0 - ((0 - res) >> (sizeof(res) * 8 - 1));

#1164
crypto/evp/e_aes_cbc_hmac_sha256.c:508: error: Integer Overflow L1
  (0 - 64):unsigned64.
  506. 
  507.         /* arrange cache line alignment */
  508.         pmac = (void *)(((size_t)mac.c + 63) & ((size_t)0 - 64));
               ^
  509. 
  510.         /* decrypt HMAC|padding at once */

#1165
crypto/evp/e_aes_cbc_hmac_sha256.c:461: error: Integer Overflow L1
  (18446744073709551615 + [8, 504]):unsigned32 by call to `sha256_update`.
  459.             plen > (sha_off + iv) &&
  460.             (blocks = (plen - (sha_off + iv)) / SHA256_CBLOCK)) {
  461.             SHA256_Update(&key->md, in + iv, sha_off);
                   ^
  462. 
  463.             (void)aesni_cbc_sha256_enc(in, out, blocks, &key->ks,

#1166
crypto/evp/e_aes_cbc_hmac_sha256.c:461: error: Integer Overflow L1
  (64 - 18446744073709551615):unsigned64 by call to `sha256_update`.
  459.             plen > (sha_off + iv) &&
  460.             (blocks = (plen - (sha_off + iv)) / SHA256_CBLOCK)) {
  461.             SHA256_Update(&key->md, in + iv, sha_off);
                   ^
  462. 
  463.             (void)aesni_cbc_sha256_enc(in, out, blocks, &key->ks,

#1167
crypto/evp/e_aes_cbc_hmac_sha256.c:461: error: Integer Overflow L1
  ([1, 63] + 18446744073709551615):unsigned64 by call to `sha256_update`.
  459.             plen > (sha_off + iv) &&
  460.             (blocks = (plen - (sha_off + iv)) / SHA256_CBLOCK)) {
  461.             SHA256_Update(&key->md, in + iv, sha_off);
                   ^
  462. 
  463.             (void)aesni_cbc_sha256_enc(in, out, blocks, &key->ks,

#1168
crypto/evp/e_aes_cbc_hmac_sha256.c:461: error: Integer Overflow L1
  ([18446744073709551615, 18446744073709551616] + [0, 63]):unsigned32 by call to `sha256_update`.
  459.             plen > (sha_off + iv) &&
  460.             (blocks = (plen - (sha_off + iv)) / SHA256_CBLOCK)) {
  461.             SHA256_Update(&key->md, in + iv, sha_off);
                   ^
  462. 
  463.             (void)aesni_cbc_sha256_enc(in, out, blocks, &key->ks,

#1169
crypto/evp/e_aes_cbc_hmac_sha256.c:461: error: Integer Overflow L2
  ([-63, +oo] - [-63, 63]):unsigned64 by call to `sha256_update`.
  459.             plen > (sha_off + iv) &&
  460.             (blocks = (plen - (sha_off + iv)) / SHA256_CBLOCK)) {
  461.             SHA256_Update(&key->md, in + iv, sha_off);
                   ^
  462. 
  463.             (void)aesni_cbc_sha256_enc(in, out, blocks, &key->ks,

#1170
crypto/evp/e_aes_cbc_hmac_sha256.c:557: error: Integer Overflow L2
  ([-63, +oo] - [-63, 63]):unsigned64 by call to `sha256_update`.
  555.             /* calculate HMAC */
  556.             key->md = key->head;
  557.             SHA256_Update(&key->md, key->aux.tls_aad, plen);
                   ^
  558. 
  559. # if 1      /* see original reference version in #else */

#1171
crypto/evp/e_aes_cbc_hmac_sha256.c:564: error: Integer Overflow L2
  ([-63, +oo] - [-63, 63]):unsigned64 by call to `sha256_update`.
  562.                 j = (len - (256 + SHA256_CBLOCK)) & (0 - SHA256_CBLOCK);
  563.                 j += SHA256_CBLOCK - key->md.num;
  564.                 SHA256_Update(&key->md, out, j);
                       ^
  565.                 out += j;
  566.                 len -= j;

#1172
crypto/evp/e_aes_cbc_hmac_sha256.c:478: error: Integer Overflow L2
  ([0, +oo] - [-oo, 63]):unsigned64 by call to `sha256_update`.
  476. # endif
  477.         sha_off += iv;
  478.         SHA256_Update(&key->md, in + sha_off, plen - sha_off);
               ^
  479. 
  480.         if (plen != len) {      /* "TLS" mode of operation */

#1173
crypto/evp/e_aes_cbc_hmac_sha256.c:557: error: Integer Overflow L2
  ([0, +oo] - [-oo, 63]):unsigned64 by call to `sha256_update`.
  555.             /* calculate HMAC */
  556.             key->md = key->head;
  557.             SHA256_Update(&key->md, key->aux.tls_aad, plen);
                   ^
  558. 
  559. # if 1      /* see original reference version in #else */

#1174
crypto/evp/e_aes_cbc_hmac_sha256.c:564: error: Integer Overflow L2
  ([0, +oo] - [-oo, 63]):unsigned64 by call to `sha256_update`.
  562.                 j = (len - (256 + SHA256_CBLOCK)) & (0 - SHA256_CBLOCK);
  563.                 j += SHA256_CBLOCK - key->md.num;
  564.                 SHA256_Update(&key->md, out, j);
                       ^
  565.                 out += j;
  566.                 len -= j;

#1175
crypto/evp/e_aes_cbc_hmac_sha256.c:735: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `sha256_update`.
  733.             return ret;
  734.         } else {
  735.             SHA256_Update(&key->md, out, len);
                   ^
  736.         }
  737.     }

#1176
crypto/bn/bn_lib.c:436: error: Integer Overflow L2
  ([min(0, `len`), `len`] - 1):unsigned32.
  434.         return ret;
  435.     }
  436.     i = ((n - 1) / BN_BYTES) + 1;
           ^
  437.     m = ((n - 1) % (BN_BYTES));
  438.     if (bn_wexpand(ret, (int)i) == NULL) {

#1177
ssl/s3_enc.c:423: error: Dead Store
  The value written to &n (type int) is never used.
  421.                                                     (void *)session->master_key,
  422.                                                     session->master_key_length);
  423.     params[n++] = OSSL_PARAM_construct_end();
                  ^
  424. }
  425. 

#1178
ssl/bio_ssl.c:435: error: Null Dereference
  pointer `ssl` last assigned on line 428 could be null and is dereferenced by call to `BIO_free()` at line 435, column 5.
  433.  err:
  434.     BIO_free(buf);
  435.     BIO_free(ssl);
           ^
  436. #endif
  437.     return NULL;

#1179
test/testutil/format_output.c:482: error: Dead Store
  The value written to &p (type char*) is never used.
  480.                     *p++ = ' ';
  481.             }
  482.             *p++ = '\0';
                    ^
  483.         }
  484. 

#1180
crypto/modes/ccm128.c:430: error: Buffer Overrun S2
  Offset added: [max(2, `len`), min(16, `len`)] Size: [0, +oo].
  428.     if (len != M)
  429.         return 0;
  430.     memcpy(tag, ctx->cmac.c, M);
           ^
  431.     return M;
  432. }

#1181
crypto/dsa/dsa_ossl.c:440: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  438.     else
  439.         BN_free(r);
  440.     BN_CTX_end(ctx);
           ^
  441.     return res;
  442. }

#1182
crypto/dsa/dsa_ossl.c:435: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  433.     if ((e = BN_CTX_get(ctx)) != NULL
  434.             && BN_set_word(r, 2)
  435.             && BN_sub(e, q, r)
                      ^
  436.             && BN_mod_exp_mont(r, k, e, q, ctx, NULL))
  437.         res = r;

#1183
ssl/statem/extensions_clnt.c:436: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  434.                /* Sub-packet ALPN extension */
  435.             || !WPACKET_start_sub_packet_u16(pkt)
  436.             || !WPACKET_sub_memcpy_u16(pkt, s->ext.alpn, s->ext.alpn_len)
                       ^
  437.             || !WPACKET_close(pkt)) {
  438.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_ALPN,

#1184
ssl/statem/extensions_clnt.c:436: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 6]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  434.                /* Sub-packet ALPN extension */
  435.             || !WPACKET_start_sub_packet_u16(pkt)
  436.             || !WPACKET_sub_memcpy_u16(pkt, s->ext.alpn, s->ext.alpn_len)
                       ^
  437.             || !WPACKET_close(pkt)) {
  438.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_ALPN,

#1185
test/testutil/tests.c:436: error: Null Dereference
  pointer `aa` last assigned on line 435 could be null and is dereferenced by call to `BN_set_negative()` at line 436, column 5.
  434.     bw = BN_new();
  435.     aa = BN_dup(a);
  436.     BN_set_negative(aa, 0);
           ^
  437.     BN_set_word(bw, w);
  438.     test_fail_bignum_message(NULL, file, line, "BIGNUM", bns, ws, "abs==",

#1186
test/params_test.c:501: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 9 by call to `BN_hex2bn`.
  499.     verify_p3 = NULL;
  500. 
  501.     if (!TEST_true(BN_hex2bn(&verify_p3, app_p3_init))) {
                ^
  502.         errcnt++;
  503.         goto fin;

#1187
test/params_test.c:501: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 9 by call to `BN_hex2bn`.
  499.     verify_p3 = NULL;
  500. 
  501.     if (!TEST_true(BN_hex2bn(&verify_p3, app_p3_init))) {
                ^
  502.         errcnt++;
  503.         goto fin;

#1188
test/params_test.c:461: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq`.
  459.         || !TEST_ptr(p = OSSL_PARAM_locate(params, "p3"))
  460.         || !TEST_ptr(BN_native2bn(bignumbin, p->return_size, app_p3))
  461.         || !TEST_BN_eq(app_p3, verify_p3)       /* "provider" value */
                   ^
  462.         || !TEST_str_eq(app_p4, p4_init)        /* "provider" value */
  463.         || !TEST_ptr(p = OSSL_PARAM_locate(params, "p5"))

#1189
crypto/asn1/tasn_enc.c:489: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
  487. 
  488.     if (usetag)
  489.         return ASN1_object_size(ndef, len, tag);
                      ^
  490.     return len;
  491. }

#1190
test/rsa_sp800_56b_test.c:489: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  487.           /* check p  */
  488.           && TEST_true(BN_sub_word(p, 2))
  489.           && TEST_true(BN_mul(n, p, q, ctx))
                    ^
  490.           && TEST_false(rsa_sp800_56b_check_keypair(key, NULL, -1, 2048))
  491.           && TEST_true(BN_add_word(p, 2))

#1191
crypto/sm2/sm2_sign.c:447: error: Dead Store
  The value written to &derlen (type int) is never used.
  445.     const unsigned char *p = sig;
  446.     unsigned char *der = NULL;
  447.     int derlen = -1;
           ^
  448.     int ret = -1;
  449. 

#1192
crypto/dsa/dsa_ameth.c:466: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `ASN1_bn_print`.
  464.             goto err;
  465. 
  466.         if (!ASN1_bn_print(bp, "r:   ", r, NULL, indent))
                    ^
  467.             goto err;
  468.         if (!ASN1_bn_print(bp, "s:   ", s, NULL, indent))

#1193
crypto/ec/ec_asn1.c:485: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_point2buf`.
  483.     form = EC_GROUP_get_point_conversion_form(group);
  484. 
  485.     len = EC_POINT_point2buf(group, point, form, &buffer, NULL);
                 ^
  486.     if (len == 0) {
  487.         ECerr(EC_F_EC_GROUP_GET_ECPARAMETERS, ERR_R_EC_LIB);

#1194
test/bad_dtls_test.c:576: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  574.     BIO_free(wbio);
  575.     SSL_free(con);
  576.     SSL_CTX_free(ctx);
           ^
  577.     EVP_MD_CTX_free(handshake_md);
  578. 

#1195
test/bad_dtls_test.c:483: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  481.     con = SSL_new(ctx);
  482.     if (!TEST_ptr(con)
  483.             || !TEST_true(SSL_set_session(con, sess)))
                       ^
  484.         goto end;
  485.     SSL_SESSION_free(sess);

#1196
crypto/ts/ts_rsp_verify.c:478: error: Buffer Overrun L2
  Offset: [6, 19] Size: 7.
  476.                 else
  477.                     first = 0;
  478.                 strcat(failure_text, ts_failure_info[i].text);
                       ^
  479.             }
  480.         }

#1197
crypto/ts/ts_rsp_verify.c:482: error: Uninitialized Value
  The value read from failure_text[_] was never initialized.
  480.         }
  481.     }
  482.     if (failure_text[0] == '\0')
               ^
  483.         strcpy(failure_text, "unspecified");
  484. 

#1198
ssl/d1_lib.c:571: error: Integer Overflow L2
  ([1, +oo] - 8):unsigned64 by call to `PACKET_copy_bytes`.
  569.         if (!PACKET_forward(&pkt, 1)
  570.             /* Save the sequence number: 64 bits, with top 2 bytes = epoch */
  571.             || !PACKET_copy_bytes(&pkt, seq, SEQ_NUM_SIZE)
                       ^
  572.             || !PACKET_get_length_prefixed_2(&pkt, &msgpkt)) {
  573.             SSLerr(SSL_F_DTLSV1_LISTEN, SSL_R_LENGTH_MISMATCH);

#1199
ssl/d1_lib.c:646: error: Integer Overflow L2
  ([2, +oo] - 32):unsigned64 by call to `PACKET_forward`.
  644.         }
  645. 
  646.         if (!PACKET_forward(&msgpayload, SSL3_RANDOM_SIZE)
                    ^
  647.             || !PACKET_get_length_prefixed_1(&msgpayload, &session)
  648.             || !PACKET_get_length_prefixed_1(&msgpayload, &cookiepkt)) {

#1200
test/ssltestlib.c:541: error: Uninitialized Value
  The value read from allpkts[_] was never initialized.
  539.      */
  540.     for (i = 0; i < (duprec ? 3 : 1); i++) {
  541.         thispkt = allpkts[i];
               ^
  542.         if (!sk_MEMPACKET_push(ctx->pkts, thispkt))
  543.             goto err;

#1201
test/test_test.c:475: error: Dead Store
  The value written to &c (type char) is never used.
  473.            && TEST_char_ne('d', --c)
  474.            && TEST_char_le('b', --c)
  475.            && TEST_char_lt(c++, 'c')
                     ^
  476.            /* unsigned char */
  477.            && TEST_uchar_eq(22, uc++)

#1202
test/test_test.c:469: error: Dead Store
  The value written to &l (type long) is never used.
  467.            && TEST_long_eq(++l, -9000L)
  468.            && TEST_long_ne(-9000L, l /= 2)
  469.            && TEST_long_lt(--l, -4500L)
                     ^
  470.            /* char */
  471.            && TEST_char_eq(++c, 'e')

#1203
test/test_test.c:500: error: Dead Store
  The value written to &p (type char*) is never used.
  498.            && TEST_mem_eq(--p, sizeof("3456"), "3456", sizeof("3456"))
  499.            && TEST_mem_ne(p++, sizeof("456"), "456", sizeof("456"))
  500.            && TEST_mem_eq(p--, sizeof("456"), "456", sizeof("456"));
                     ^
  501. }
  502. 

#1204
crypto/evp/e_aria.c:486: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo] by call to `CRYPTO_gcm128_tag`.
  484.         return 0;
  485.     }
  486.     CRYPTO_gcm128_tag(&gctx->gcm, EVP_CIPHER_CTX_buf_noconst(ctx), 16);
           ^
  487.     gctx->taglen = 16;
  488.     /* Don't reuse the IV */

#1205
crypto/x509/v3_cpols.c:468: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned32 by call to `i2s_ASN1_INTEGER`.
  466.                 BIO_puts(out, "(null)");
  467.             else {
  468.                 tmp = i2s_ASN1_INTEGER(NULL, num);
                             ^
  469.                 if (tmp == NULL)
  470.                     return;

#1206
ssl/statem/extensions_clnt.c:463: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  461.             || !WPACKET_start_sub_packet_u16(pkt)
  462.                /* Sub-packet for the protection profile list */
  463.             || !WPACKET_start_sub_packet_u16(pkt)) {
                       ^
  464.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_USE_SRTP,
  465.                  ERR_R_INTERNAL_ERROR);

#1207
test/ct_test.c:463: error: Buffer Overrun L1
  Offset: [-oo, -1] Size: 1 by call to `SCT_new_from_base64`.
  461. 
  462.     fixture->sct_list = sk_SCT_new_null();
  463.     if (!TEST_ptr(sct = SCT_new_from_base64(SCT_VERSION_V1, log_id,
                ^
  464.                                             CT_LOG_ENTRY_TYPE_X509, timestamp,
  465.                                             extensions, signature)))

#1208
test/ct_test.c:463: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `SCT_new_from_base64`.
  461. 
  462.     fixture->sct_list = sk_SCT_new_null();
  463.     if (!TEST_ptr(sct = SCT_new_from_base64(SCT_VERSION_V1, log_id,
                ^
  464.                                             CT_LOG_ENTRY_TYPE_X509, timestamp,
  465.                                             extensions, signature)))

#1209
ssl/tls13_enc.c:670: error: Buffer Overrun L3
  Offset added: [-1, +oo] Size: 64.
  668.      */
  669.     if (label == server_application_traffic)
  670.         memcpy(s->server_finished_hash, hashval, hashlen);
               ^
  671. 
  672.     if (label == server_handshake_traffic)

#1210
test/evp_extra_test.c:480: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_DecryptUpdate`.
  478. 
  479.     if (!TEST_true(EVP_OpenInit(ctx, type, kek, kek_len, iv, keypair))
  480.             || !TEST_true(EVP_OpenUpdate(ctx, plaintext, &plaintext_len,
                       ^
  481.                                          ciphertext, ciphertext_len))
  482.             || !TEST_true(EVP_OpenFinal(ctx, plaintext + plaintext_len, &len)))

#1211
apps/s_server.c:482: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_set_SSL_CTX`.
  480.         if (ctx2 != NULL) {
  481.             BIO_printf(p->biodebug, "Switching server context.\n");
  482.             SSL_set_SSL_CTX(s, ctx2);
                   ^
  483.         }
  484.     }

#1212
crypto/bn/bn_nist.c:582: error: Dead Store
  The value written to &carry (type int) is never used.
  580.         carry -= (int)bn_sub_words(r_d, r_d, t_d, BN_NIST_224_TOP);
  581.         nist_set_224(t_d, buf.bn, 0, 0, 0, 0, 13, 12, 11);
  582.         carry -= (int)bn_sub_words(r_d, r_d, t_d, BN_NIST_224_TOP);
               ^
  583. 
  584. # if BN_BITS2==64

#1213
crypto/bn/bn_nist.c:591: error: Dead Store
  The value written to &carry (type int) is never used.
  589.     u.f = bn_sub_words;
  590.     if (carry > 0) {
  591.         carry =
               ^
  592.             (int)bn_sub_words(r_d, r_d, _nist_p_224[carry - 1],
  593.                               BN_NIST_224_TOP);

#1214
crypto/bn/bn_nist.c:617: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  615.     mask =
  616.         0 - (PTR_SIZE_INT) (*u.f) (c_d, r_d, _nist_p_224[0], BN_NIST_224_TOP);
  617.     mask &= 0 - (PTR_SIZE_INT) carry;
           ^
  618.     res = c_d;
  619.     res = (BN_ULONG *)(((PTR_SIZE_INT) res & ~mask) |

#1215
crypto/bn/bn_nist.c:575: error: Uninitialized Value
  The value read from t_d[_] was never initialized.
  573.         BN_ULONG t_d[BN_NIST_224_TOP];
  574. 
  575.         nist_set_224(t_d, buf.bn, 10, 9, 8, 7, 0, 0, 0);
               ^
  576.         carry = (int)bn_add_words(r_d, r_d, t_d, BN_NIST_224_TOP);
  577.         nist_set_224(t_d, buf.bn, 0, 13, 12, 11, 0, 0, 0);

#1216
crypto/ec/ec_ameth.c:519: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_KEY_key2buf`.
  517. 
  518.     case ASN1_PKEY_CTRL_GET1_TLS_ENCPT:
  519.         return EC_KEY_key2buf(EVP_PKEY_get0_EC_KEY(pkey),
                      ^
  520.                               POINT_CONVERSION_UNCOMPRESSED, arg2, NULL);
  521. 

#1217
crypto/ec/ec_key.c:511: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  509. 
  510.  err:
  511.     BN_CTX_end(ctx);
           ^
  512.     BN_CTX_free(ctx);
  513.     EC_POINT_free(point);

#1218
apps/lib/opt.c:500: error: Null Dereference
  pointer `xptmp` last assigned on line 497 could be null and is dereferenced by call to `X509_PURPOSE_get_id()` at line 500, column 13.
  498. 
  499.         /* purpose object -> purpose value */
  500.         i = X509_PURPOSE_get_id(xptmp);
                   ^
  501. 
  502.         if (!X509_VERIFY_PARAM_set_purpose(vpm, i)) {

#1219
ssl/ssl_lib.c:488: error: Dead Store
  The value written to &max_version (type int) is never used.
  486.             min_version = DTLS1_VERSION;
  487.         if (max_version == 0)
  488.             max_version = DTLS1_2_VERSION;
                   ^
  489. #ifdef OPENSSL_NO_DTLS1_2
  490.         if (max_version == DTLS1_2_VERSION)

#1220
ssl/ssl_lib.c:486: error: Dead Store
  The value written to &min_version (type int) is never used.
  484.         if (min_version == 0)
  485.             /* Ignore DTLS1_BAD_VER */
  486.             min_version = DTLS1_VERSION;
                   ^
  487.         if (max_version == 0)
  488.             max_version = DTLS1_2_VERSION;

#1221
crypto/poly1305/poly1305.c:506: error: Buffer Overrun L3
  Offset added: [-15, 15] Size: [0, +oo].
  504. 
  505.     if (rem)
  506.         memcpy(ctx->data, inp, rem);
               ^
  507. 
  508.     ctx->num = rem;

#1222
apps/rehash.c:488: error: Buffer Overrun L3
  Offset: [1, 9] Size: [2, 10] by call to `opt_help`.
  486.             goto end;
  487.         case OPT_HELP:
  488.             opt_help(rehash_options);
                   ^
  489.             goto end;
  490.         case OPT_COMPAT:

#1223
apps/rehash.c:504: error: Dead Store
  The value written to &argc (type int) is never used.
  502.         }
  503.     }
  504.     argc = opt_num_rest();
           ^
  505.     argv = opt_rest();
  506. 

#1224
apps/rehash.c:517: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `do_dir`.
  515.         m = OPENSSL_strdup(env);
  516.         for (e = strtok(m, lsc); e != NULL; e = strtok(NULL, lsc))
  517.             errs += do_dir(e, h);
                           ^
  518.         OPENSSL_free(m);
  519.     } else {

#1225
crypto/ec/curve448/curve448.c:491: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `curve448_scalar_halve`.
  489.     /* Compensate for the encoding ratio */
  490.     for (i = 1; i < X448_ENCODE_RATIO; i <<= 1)
  491.         curve448_scalar_halve(the_scalar, the_scalar);
               ^
  492. 
  493.     curve448_precomputed_scalarmul(p, curve448_precomputed_base, the_scalar);

#1226
crypto/bn/bn_prime.c:491: error: Integer Overflow L2
  (0 - [0, 17863]):unsigned64 by call to `BN_mod_word`.
  489.     /* we now have a random number 'rnd' to test. */
  490.     for (i = 1; i < trial_divisions; i++) {
  491.         BN_ULONG mod = BN_mod_word(rnd, (BN_ULONG)primes[i]);
                              ^
  492.         if (mod == (BN_ULONG)-1)
  493.             return 0;

#1227
ssl/bio_ssl.c:489: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_copy_session_id`.
  487.     if ((tdata->ssl == NULL) || (fdata->ssl == NULL))
  488.         return 0;
  489.     if (!SSL_copy_session_id(tdata->ssl, (fdata->ssl)))
                ^
  490.         return 0;
  491.     return 1;

#1228
crypto/conf/conf_mod.c:488: error: Dead Store
  The value written to &sep (type char*) is never used.
  486. char *CONF_get1_default_config_file(void)
  487. {
  488.     char *file, *sep = "";
           ^
  489.     int len;
  490. 

#1229
ssl/statem/extensions_clnt.c:500: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  498. 
  499.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_encrypt_then_mac)
  500.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                       ^
  501.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_ETM,
  502.                  ERR_R_INTERNAL_ERROR);

#1230
crypto/ec/ecp_smpl.c:607: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  605. 
  606.  err:
  607.     BN_CTX_end(ctx);
           ^
  608.     BN_CTX_free(new_ctx);
  609.     return ret;

#1231
crypto/ec/ecp_smpl.c:607: error: Integer Overflow L2
  ([0, 3+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  605. 
  606.  err:
  607.     BN_CTX_end(ctx);
           ^
  608.     BN_CTX_free(new_ctx);
  609.     return ret;

#1232
crypto/x509/x_name.c:505: error: Null Dereference
  pointer `null` is dereferenced by call to `X509_NAME_oneline()` at line 505, column 9.
  503.     l = 80 - 2 - obase;
  504. 
  505.     b = X509_NAME_oneline(name, NULL, 0);
               ^
  506.     if (b == NULL)
  507.         return 0;

#1233
crypto/property/property.c:523: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `lh_QUERY_delete`.
  521.     if (method == NULL) {
  522.         elem.query = prop_query;
  523.         if ((old = lh_QUERY_delete(alg->cache, &elem)) != NULL) {
                          ^
  524.             impl_cache_free(old);
  525.             store->nelem--;

#1234
crypto/property/property.c:525: error: Integer Overflow L2
  ([0, `store->nelem`] - 1):unsigned64.
  523.         if ((old = lh_QUERY_delete(alg->cache, &elem)) != NULL) {
  524.             impl_cache_free(old);
  525.             store->nelem--;
                   ^
  526.         }
  527.         goto end;

#1235
ssl/ssl_sess.c:587: error: Integer Overflow L2
  ([0, 1+max(0, `s->session_ctx->sessions->num_items`)] - 1):unsigned64 by call to `SSL_CTX_remove_session`.
  585.         if (try_session_cache) {
  586.             /* session was from the cache, so remove it */
  587.             SSL_CTX_remove_session(s->session_ctx, ret);
                   ^
  588.         }
  589.         goto err;

#1236
crypto/rsa/rsa_ossl.c:595: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  593. 
  594.  err:
  595.     BN_CTX_end(ctx);
           ^
  596.     BN_CTX_free(ctx);
  597.     OPENSSL_clear_free(buf, num);

#1237
crypto/rsa/rsa_ossl.c:570: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  568. 
  569.     if ((padding == RSA_X931_PADDING) && ((bn_get_words(ret)[0] & 0xf) != 12))
  570.         if (!BN_sub(ret, rsa->n, ret))
                    ^
  571.             goto err;
  572. 

#1238
test/rsa_sp800_56b_test.c:543: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `rsa_sp800_56b_derive_params_from_pq`.
  541.                                                      Xp2, q1, q2, NULL, Xq, Xq1,
  542.                                                      Xq2, 2048, e, ctx, NULL))
  543.           && TEST_true(rsa_sp800_56b_derive_params_from_pq(key, 2048, e, ctx))
                    ^
  544.           && TEST_BN_eq(p1_exp, p1)
  545.           && TEST_BN_eq(p2_exp, p2)

#1239
test/rsa_sp800_56b_test.c:544: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq`.
  542.                                                      Xq2, 2048, e, ctx, NULL))
  543.           && TEST_true(rsa_sp800_56b_derive_params_from_pq(key, 2048, e, ctx))
  544.           && TEST_BN_eq(p1_exp, p1)
                    ^
  545.           && TEST_BN_eq(p2_exp, p2)
  546.           && TEST_BN_eq(q1_exp, q1)

#1240
apps/passwd.c:683: error: Buffer Overrun L3
  Offset added: [-31, 64] Size: 64.
  681.     for (cp = s_bytes, n = salt_len; n > buf_size; n -= buf_size, cp += buf_size)
  682.         memcpy(cp, temp_buf, buf_size);
  683.     memcpy(cp, temp_buf, n);
           ^
  684. 
  685.     for (n = 0; n < rounds; n++) {

#1241
apps/passwd.c:681: error: Integer Overflow L2
  ([33, +oo] - [32, 64]):unsigned64.
  679.     if ((s_bytes = OPENSSL_zalloc(salt_len)) == NULL)
  680.         goto err;
  681.     for (cp = s_bytes, n = salt_len; n > buf_size; n -= buf_size, cp += buf_size)
                                                          ^
  682.         memcpy(cp, temp_buf, buf_size);
  683.     memcpy(cp, temp_buf, n);

#1242
apps/s_server.c:527: error: Null Dereference
  pointer `x` last assigned on line 526 could be null and is dereferenced by call to `X509_get1_ocsp()` at line 527, column 11.
  525.     /* Build up OCSP query from server certificate */
  526.     x = SSL_get_certificate(s);
  527.     aia = X509_get1_ocsp(x);
                 ^
  528.     if (aia != NULL) {
  529.         if (!OCSP_parse_url(sk_OPENSSL_STRING_value(aia, 0),

#1243
crypto/asn1/tasn_dec.c:525: error: Dead Store
  The value written to &q (type unsigned char const *) is never used.
  523. 
  524.     p = *in;
  525.     q = p;
           ^
  526. 
  527.     /*

#1244
ssl/statem/extensions_clnt.c:521: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  519. 
  520.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_signed_certificate_timestamp)
  521.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                       ^
  522.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_SCT,
  523.                  ERR_R_INTERNAL_ERROR);

#1245
engines/e_afalg.c:565: error: Buffer Overrun L3
  Offset added: 64 Size: [0, +oo] by call to `afalg_init_aio`.
  563. 
  564.     /* Setup AIO ctx to allow async AFALG crypto processing */
  565.     if (afalg_init_aio(&actx->aio) == 0)
               ^
  566.         goto err;
  567. 

#1246
crypto/bn/bn_exp.c:540: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  538. 
  539.             for (j = 0; j < width; j++) {
  540.                 acc |= table[j] &
                       ^
  541.                        ((BN_ULONG)0 - (constant_time_eq_int(j,idx)&1));
  542.             }

#1247
crypto/bn/bn_exp.c:553: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  551.         idx &= xstride - 1;             /* equivalent of idx % xstride */
  552. 
  553.         y0 = (BN_ULONG)0 - (constant_time_eq_int(i,0)&1);
               ^
  554.         y1 = (BN_ULONG)0 - (constant_time_eq_int(i,1)&1);
  555.         y2 = (BN_ULONG)0 - (constant_time_eq_int(i,2)&1);

#1248
test/test_test.c:527: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 4 by call to `BN_hex2bn`.
  525. 
  526.     if (bn_output_tests[n] != NULL
  527.             && !TEST_true(BN_hex2bn(&b, bn_output_tests[n])))
                       ^
  528.         return 0;
  529.     test_output_bignum(bn_output_tests[n], b);

#1249
test/test_test.c:527: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 4 by call to `BN_hex2bn`.
  525. 
  526.     if (bn_output_tests[n] != NULL
  527.             && !TEST_true(BN_hex2bn(&b, bn_output_tests[n])))
                       ^
  528.         return 0;
  529.     test_output_bignum(bn_output_tests[n], b);

#1250
crypto/bn/bn_lib.c:547: error: Integer Overflow L2
  ([min(0, `len`), `len`] - 1):unsigned32.
  545.         return ret;
  546.     }
  547.     i = ((n - 1) / BN_BYTES) + 1;
           ^
  548.     m = ((n - 1) % (BN_BYTES));
  549.     if (bn_wexpand(ret, (int)i) == NULL) {

#1251
ssl/statem/statem_dtls.c:535: error: Dead Store
  The value written to &i (type int) is never used.
  533.     hm_fragment *frag = NULL;
  534.     pitem *item = NULL;
  535.     int i = -1, is_complete;
           ^
  536.     unsigned char seq64be[8];
  537.     size_t frag_len = msg_hdr->frag_len;

#1252
ssl/statem/statem_dtls.c:616: error: Dead Store
  The value written to &i (type int) is never used.
  614.         item = pitem_new(seq64be, frag);
  615.         if (item == NULL) {
  616.             i = -1;
                   ^
  617.             goto err;
  618.         }

#1253
crypto/bn/bn_gcd.c:606: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  604.         /* elimination step */
  605.         delta++;
  606.         if (!BN_add(temp, g, r))
                    ^
  607.             goto err;
  608.         BN_consttime_swap(g->d[0] & 1 /* g is odd */

#1254
crypto/bn/bn_gcd.c:587: error: Integer Overflow L2
  ([0, 1] - 1):unsigned64 by call to `BN_consttime_swap`.
  585. 
  586.     /* re arrange inputs s.t. r is odd */
  587.     BN_consttime_swap((~r->d[0]) & 1, r, g, top);
           ^
  588. 
  589.     /* compute the number of iterations */

#1255
ssl/statem/extensions_clnt.c:538: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  536. 
  537.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_extended_master_secret)
  538.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                       ^
  539.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_EMS,
  540.                  ERR_R_INTERNAL_ERROR);

#1256
crypto/bn/bn_prime.c:576: error: Integer Overflow L2
  (0 - [0, 17863]):unsigned64 by call to `BN_mod_word`.
  574.     /* we now have a random number 'rnd' to test. */
  575.     for (i = 1; i < trial_divisions; i++) {
  576.         BN_ULONG mod = BN_mod_word(rnd, (BN_ULONG)primes[i]);
                              ^
  577.         if (mod == (BN_ULONG)-1)
  578.             goto err;

#1257
crypto/bn/bn_prime.c:602: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  600. 
  601.  err:
  602.     BN_CTX_end(ctx);
           ^
  603.     bn_check_top(rnd);
  604.     return ret;

#1258
crypto/bn/bn_prime.c:556: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
  554.     /* we need ((rnd-rem) % add) == 0 */
  555. 
  556.     if (!BN_mod(t1, rnd, add, ctx))
                ^
  557.         goto err;
  558.     if (!BN_sub(rnd, rnd, t1))

#1259
crypto/bn/bn_prime.c:564: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  562.             goto err;
  563.     } else {
  564.         if (!BN_add(rnd, rnd, rem))
                    ^
  565.             goto err;
  566.     }

#1260
crypto/bn/bn_prime.c:558: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  556.     if (!BN_mod(t1, rnd, add, ctx))
  557.         goto err;
  558.     if (!BN_sub(rnd, rnd, t1))
                ^
  559.         goto err;
  560.     if (rem == NULL) {

#1261
crypto/bn/bn_prime.c:570: error: Integer Overflow L2
  ([0, `add->d`] - [0, 1]):unsigned64 by call to `BN_add`.
  568.     if (BN_num_bits(rnd) < bits
  569.             || BN_get_word(rnd) < (safe ? 5u : 3u)) {
  570.         if (!BN_add(rnd, rnd, add))
                    ^
  571.             goto err;
  572.     }

#1262
crypto/evp/bio_b64.c:537: error: Dead Store
  The value written to &ret (type long) is never used.
  535. static long b64_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  536. {
  537.     long ret = 1;
           ^
  538.     BIO *next = BIO_next(b);
  539. 

#1263
crypto/x509/x509_lu.c:575: error: Null Dereference
  pointer `obj` last assigned on line 574 could be null and is dereferenced at line 575, column 13.
  573.     for (i = 0; i < cnt; i++, idx++) {
  574.         obj = sk_X509_OBJECT_value(store->objs, idx);
  575.         x = obj->data.x509;
                   ^
  576.         if (!X509_up_ref(x)) {
  577.             X509_STORE_unlock(store);

#1264
crypto/evp/bio_ok.c:549: error: Integer Overflow L1
  (0 - 4):unsigned64.
  547.     md_size = EVP_MD_size(digest);
  548. 
  549.     tl = ctx->buf_len - OK_BLOCK_BLOCK;
           ^
  550.     ctx->buf[0] = (unsigned char)(tl >> 24);
  551.     ctx->buf[1] = (unsigned char)(tl >> 16);

#1265
crypto/aria/aria.c:616: error: Buffer Overrun L1
  Offset: 11 Size: 4.
  614.     reg1 ^= ck[9];
  615.     reg2 ^= ck[10];
  616.     reg3 ^= ck[11];
                   ^
  617. 
  618.     ARIA_SUBST_DIFF_ODD(reg0, reg1, reg2, reg3);

#1266
crypto/aria/aria.c:599: error: Buffer Overrun L1
  Offset: 7 Size: 4.
  597.     reg1 ^= ck[5];
  598.     reg2 ^= ck[6];
  599.     reg3 ^= ck[7];
                   ^
  600. 
  601.     ARIA_SUBST_DIFF_EVEN(reg0, reg1, reg2, reg3);

#1267
crypto/bio/b_print.c:659: error: Integer Overflow L2
  ([min(1, `fvalue`), 18446744073709551615] + 1):unsigned64.
  657. 
  658.     if (fracpart >= max10) {
  659.         intpart++;
               ^
  660.         fracpart -= max10;
  661.     }

#1268
crypto/bio/b_print.c:788: error: Uninitialized Value
  The value read from econvert[_] was never initialized.
  786.         }
  787.         while (eplace > 0) {
  788.             if (!doapr_outch(sbuffer, buffer, currlen, maxlen,
                        ^
  789.                              econvert[--eplace]))
  790.                 return 0;

#1269
test/sslapitest.c:581: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  579. end:
  580.     SSL_free(serverssl);
  581.     SSL_free(clientssl);
           ^
  582.     SSL_CTX_free(sctx);
  583.     SSL_CTX_free(cctx);

#1270
test/sslapitest.c:581: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  579. end:
  580.     SSL_free(serverssl);
  581.     SSL_free(clientssl);
           ^
  582.     SSL_CTX_free(sctx);
  583.     SSL_CTX_free(cctx);

#1271
test/sslapitest.c:580: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  578. 
  579. end:
  580.     SSL_free(serverssl);
           ^
  581.     SSL_free(clientssl);
  582.     SSL_CTX_free(sctx);

#1272
test/sslapitest.c:580: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  578. 
  579. end:
  580.     SSL_free(serverssl);
           ^
  581.     SSL_free(clientssl);
  582.     SSL_CTX_free(sctx);

#1273
ssl/statem/extensions_clnt.c:569: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  567.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_supported_versions)
  568.             || !WPACKET_start_sub_packet_u16(pkt)
  569.             || !WPACKET_start_sub_packet_u8(pkt)) {
                       ^
  570.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  571.                  SSL_F_TLS_CONSTRUCT_CTOS_SUPPORTED_VERSIONS,

#1274
crypto/ec/ec_ameth.c:568: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_GROUP_check`.
  566.     }
  567. 
  568.     return EC_GROUP_check(eckey->group, NULL);
                  ^
  569. }
  570. 

#1275
test/drbgtest.c:565: error: Null Dereference
  pointer `ctx` last assigned on line 563 could be null and is dereferenced at line 565, column 9.
  563.     HOOK_CTX *ctx = get_hook_ctx(drbg);
  564. 
  565.     if (ctx->fail != 0)
               ^
  566.         return 0;
  567. 

#1276
ssl/ssl_conf.c:581: error: Null Dereference
  pointer `in` last assigned on line 565 could be null and is dereferenced by call to `BIO_free()` at line 581, column 5.
  579.  end:
  580.     DH_free(dh);
  581.     BIO_free(in);
           ^
  582.     return rv > 0;
  583. }

#1277
apps/lib/apps.c:630: error: Null Dereference
  pointer `key` last assigned on line 605 could be null and is dereferenced by call to `BIO_free()` at line 630, column 5.
  628.     }
  629.  end:
  630.     BIO_free(key);
           ^
  631.     if (pkey == NULL) {
  632.         BIO_printf(bio_err, "unable to load %s\n", key_descrip);

#1278
crypto/conf/conf_def.c:703: error: Integer Overflow L2
  ([0, +oo] - [0, 65536]):unsigned64 by call to `BUF_MEM_grow_clean`.
  701.                 goto err;
  702.             }
  703.             if (!BUF_MEM_grow_clean(buf, newsize)) {
                        ^
  704.                 CONFerr(CONF_F_STR_COPY, ERR_R_MALLOC_FAILURE);
  705.                 goto err;

#1279
crypto/ec/ecp_nistz256.c:716: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `copy_conditional`.
  714. 
  715.             ecp_nistz256_neg(temp[1].Y, temp[0].Y);
  716.             copy_conditional(temp[0].Y, temp[1].Y, (wvalue & 1));
                   ^
  717. 
  718.             ecp_nistz256_point_add(r, r, &temp[0]);

#1280
crypto/ec/ecp_nistz256.c:740: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `copy_conditional`.
  738. 
  739.         ecp_nistz256_neg(temp[1].Y, temp[0].Y);
  740.         copy_conditional(temp[0].Y, temp[1].Y, wvalue & 1);
               ^
  741. 
  742.         ecp_nistz256_point_add(r, r, &temp[0]);

#1281
test/drbgtest.c:591: error: Null Dereference
  pointer `ctx` last assigned on line 589 could be null and is dereferenced at line 591, column 25.
  589.     HOOK_CTX *ctx = get_hook_ctx(drbg);
  590. 
  591.     drbg->get_entropy = ctx->get_entropy;
                               ^
  592.     CRYPTO_free_ex_data(CRYPTO_EX_INDEX_RAND_DRBG, drbg, &drbg->ex_data);
  593. }

#1282
test/sslapitest.c:626: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  624. end:
  625.     SSL_free(serverssl);
  626.     SSL_free(clientssl);
           ^
  627.     SSL_CTX_free(sctx);
  628.     SSL_CTX_free(cctx);

#1283
test/sslapitest.c:626: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  624. end:
  625.     SSL_free(serverssl);
  626.     SSL_free(clientssl);
           ^
  627.     SSL_CTX_free(sctx);
  628.     SSL_CTX_free(cctx);

#1284
test/sslapitest.c:625: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  623. 
  624. end:
  625.     SSL_free(serverssl);
           ^
  626.     SSL_free(clientssl);
  627.     SSL_CTX_free(sctx);

#1285
test/sslapitest.c:625: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  623. 
  624. end:
  625.     SSL_free(serverssl);
           ^
  626.     SSL_free(clientssl);
  627.     SSL_CTX_free(sctx);

#1286
ssl/statem/extensions_clnt.c:607: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 5]):unsigned64 by call to `WPACKET_put_bytes__`.
  605.             || !WPACKET_start_sub_packet_u16(pkt)
  606.             || !WPACKET_start_sub_packet_u8(pkt)
  607.             || !WPACKET_put_bytes_u8(pkt, TLSEXT_KEX_MODE_KE_DHE)
                       ^
  608.             || (nodhe && !WPACKET_put_bytes_u8(pkt, TLSEXT_KEX_MODE_KE))
  609.             || !WPACKET_close(pkt)

#1287
ssl/statem/extensions_clnt.c:608: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 6]):unsigned64 by call to `WPACKET_put_bytes__`.
  606.             || !WPACKET_start_sub_packet_u8(pkt)
  607.             || !WPACKET_put_bytes_u8(pkt, TLSEXT_KEX_MODE_KE_DHE)
  608.             || (nodhe && !WPACKET_put_bytes_u8(pkt, TLSEXT_KEX_MODE_KE))
                                 ^
  609.             || !WPACKET_close(pkt)
  610.             || !WPACKET_close(pkt)) {

#1288
crypto/rsa/rsa_ossl.c:672: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_from_mont_fixed_top`.
  670.          */
  671.         if (/* m1 = I moq q */
  672.             !bn_from_mont_fixed_top(m1, I, rsa->_method_mod_q, ctx)
                    ^
  673.             || !bn_to_mont_fixed_top(m1, m1, rsa->_method_mod_q, ctx)
  674.             /* m1 = m1^dmq1 mod q */

#1289
crypto/rsa/rsa_ossl.c:694: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_mul_mont_fixed_top`.
  692.             /* r1 = r1 * iqmp mod p */
  693.             || !bn_to_mont_fixed_top(r1, r1, rsa->_method_mod_p, ctx)
  694.             || !bn_mul_mont_fixed_top(r1, r1, rsa->iqmp, rsa->_method_mod_p,
                       ^
  695.                                       ctx)
  696.             /* r0 = r1 * q + m1 */

#1290
crypto/rsa/rsa_ossl.c:693: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `bn_to_mont_fixed_top`.
  691. 
  692.             /* r1 = r1 * iqmp mod p */
  693.             || !bn_to_mont_fixed_top(r1, r1, rsa->_method_mod_p, ctx)
                       ^
  694.             || !bn_mul_mont_fixed_top(r1, r1, rsa->iqmp, rsa->_method_mod_p,
  695.                                       ctx)

#1291
crypto/rsa/rsa_ossl.c:817: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  815.      */
  816.     if (BN_is_negative(r0))
  817.         if (!BN_add(r0, r0, rsa->p))
                    ^
  818.             goto err;
  819. 

#1292
crypto/rsa/rsa_ossl.c:810: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  808.     }
  809. 
  810.     if (!BN_sub(r0, r0, m1))
                ^
  811.         goto err;
  812.     /*

#1293
crypto/ec/ecp_smpl.c:792: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  790. 
  791.  end:
  792.     BN_CTX_end(ctx);
           ^
  793.     BN_CTX_free(new_ctx);
  794.     return ret;

#1294
crypto/ec/ecp_smpl.c:702: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_sub_quick`.
  700. 
  701.     /* n5, n6 */
  702.     if (!BN_mod_sub_quick(n5, n1, n3, p))
                ^
  703.         goto end;
  704.     if (!BN_mod_sub_quick(n6, n2, n4, p))

#1295
ssl/statem/extensions_clnt.c:659: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  657.     /* Create KeyShareEntry */
  658.     if (!WPACKET_put_bytes_u16(pkt, curve_id)
  659.             || !WPACKET_sub_memcpy_u16(pkt, encoded_point, encodedlen)) {
                       ^
  660.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_ADD_KEY_SHARE,
  661.                  ERR_R_INTERNAL_ERROR);

#1296
test/sslapitest.c:703: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  701.     X509_free(chaincert);
  702.     SSL_free(serverssl);
  703.     SSL_free(clientssl);
           ^
  704.     SSL_CTX_free(sctx);
  705.     SSL_CTX_free(cctx);

#1297
test/sslapitest.c:703: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  701.     X509_free(chaincert);
  702.     SSL_free(serverssl);
  703.     SSL_free(clientssl);
           ^
  704.     SSL_CTX_free(sctx);
  705.     SSL_CTX_free(cctx);

#1298
crypto/evp/pmeth_lib.c:657: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  655.                                             name,
  656.                                             sizeof(name));
  657.     *p++ = OSSL_PARAM_construct_end();
            ^
  658. 
  659.     if (!EVP_PKEY_CTX_get_params(ctx, sig_md_params))

#1299
ssl/ssl_sess.c:703: error: Integer Overflow L2
  ([0, 1+max(0, `ctx->sessions->num_items`)] - 1):unsigned64 by call to `remove_session_lock`.
  701.         if (SSL_CTX_sess_get_cache_size(ctx) > 0) {
  702.             while (SSL_CTX_sess_number(ctx) > SSL_CTX_sess_get_cache_size(ctx)) {
  703.                 if (!remove_session_lock(ctx, ctx->session_cache_tail, 0))
                            ^
  704.                     break;
  705.                 else

#1300
apps/lib/apps.c:719: error: Null Dereference
  pointer `key` last assigned on line 671 could be null and is dereferenced by call to `BIO_free()` at line 719, column 5.
  717.     }
  718.  end:
  719.     BIO_free(key);
           ^
  720.     if (pkey == NULL)
  721.         BIO_printf(bio_err, "unable to load %s\n", key_descrip);

#1301
crypto/objects/obj_dat.c:646: error: Dead Store
  The value written to &s (type char*) is never used.
  644. 
  645.     for (;;) {
  646.         s = o = NULL;
               ^
  647.         i = BIO_gets(in, buf, 512);
  648.         if (i <= 0)

#1302
ssl/statem/statem_dtls.c:642: error: Dead Store
  The value written to &i (type int) is never used.
  640. dtls1_process_out_of_seq_message(SSL *s, const struct hm_header_st *msg_hdr)
  641. {
  642.     int i = -1;
           ^
  643.     hm_fragment *frag = NULL;
  644.     pitem *item = NULL;

#1303
crypto/bn/bn_nist.c:851: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  849.             (int)bn_add_words(r_d, r_d, _nist_p_256[-carry - 1],
  850.                               BN_NIST_256_TOP);
  851.         mask = 0 - (PTR_SIZE_INT) carry;
               ^
  852.         u.p = ((PTR_SIZE_INT) bn_sub_words & mask) |
  853.             ((PTR_SIZE_INT) bn_add_words & ~mask);

#1304
crypto/crmf/crmf_lib.c:691: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `constant_time_is_zero`.
  689.         ERR_clear_error(); /* error state may have sensitive information */
  690.         failure = ~constant_time_is_zero_s(constant_time_msb(retval)
  691.                                            | constant_time_is_zero(retval));
                                                    ^
  692.         failure |= ~constant_time_eq_s(eksize, (size_t)cikeysize);
  693.         if (failure) {

#1305
crypto/crmf/crmf_lib.c:690: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `constant_time_is_zero_s`.
  688.                                   encKey->data, encKey->length);
  689.         ERR_clear_error(); /* error state may have sensitive information */
  690.         failure = ~constant_time_is_zero_s(constant_time_msb(retval)
                          ^
  691.                                            | constant_time_is_zero(retval));
  692.         failure |= ~constant_time_eq_s(eksize, (size_t)cikeysize);

#1306
apps/speed.c:658: error: Integer Overflow L2
  ([1, +oo] - [-oo, 63]):unsigned64 by call to `SHA1`.
  656.     int count;
  657.     for (count = 0; COND(c[D_SHA1][testnum]); count++)
  658.         SHA1(buf, lengths[testnum], sha);
               ^
  659.     return count;
  660. }

#1307
ssl/record/rec_layer_s3.c:1153: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssl3_write_pending`.
  1151. 
  1152.     /* we now just need to write the buffer */
  1153.     return ssl3_write_pending(s, type, buf, totlen, written);
                   ^
  1154.  err:
  1155.     for (j = 0; j < wpinited; j++)

#1308
ssl/record/rec_layer_s3.c:1032: error: Integer Overflow L2
  ([9, +oo] - [8, 16]):unsigned64 by call to `tls13_enc`.
  1030.          * send early data - so we need to use the tls13enc function.
  1031.          */
  1032.         if (tls13_enc(s, wr, numpipes, 1) < 1) {
                    ^
  1033.             if (!ossl_statem_in_error(s)) {
  1034.                 SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_DO_SSL3_WRITE,

#1309
apps/list.c:691: error: Buffer Overrun L3
  Offset: [1, 21] Size: [2, 22] by call to `opt_help`.
  689.             return 1;
  690.         case OPT_HELP:
  691.             opt_help(list_options);
                   ^
  692.             break;
  693.         case OPT_ONE:

#1310
apps/speed.c:669: error: Integer Overflow L2
  ([1, +oo] - [-oo, 63]):unsigned64 by call to `SHA256`.
  667.     int count;
  668.     for (count = 0; COND(c[D_SHA256][testnum]); count++)
  669.         SHA256(buf, lengths[testnum], sha256);
               ^
  670.     return count;
  671. }

#1311
crypto/evp/pmeth_lib.c:705: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  703.     *p++ = OSSL_PARAM_construct_size_t(OSSL_SIGNATURE_PARAM_DIGEST_SIZE,
  704.                                        &mdsize);
  705.     *p++ = OSSL_PARAM_construct_end();
            ^
  706. 
  707.     return EVP_PKEY_CTX_set_params(ctx, sig_md_params);

#1312
crypto/evp/pmeth_lib.c:702: error: Null Dereference
  pointer `name` last assigned on line 693 could be null and is dereferenced by call to `strlen()` at line 702, column 45.
  700.                                              */
  701.                                             (char *)name,
  702.                                             strlen(name) + 1);
                                                   ^
  703.     *p++ = OSSL_PARAM_construct_size_t(OSSL_SIGNATURE_PARAM_DIGEST_SIZE,
  704.                                        &mdsize);

#1313
engines/e_afalg.c:681: error: Null Dereference
  pointer `cipher_handle` last assigned on line 680 could be null and is dereferenced at line 681, column 9.
  679. {
  680.     cbc_handles *cipher_handle = get_cipher_handle(nid);
  681.     if (cipher_handle->_hidden == NULL
               ^
  682.         && ((cipher_handle->_hidden =
  683.          EVP_CIPHER_meth_new(nid,

#1314
crypto/cms/cms_sd.c:701: error: Dead Store
  The value written to &pctx (type evp_pkey_ctx_st*) is never used.
  699. 
  700.     if (si->pctx)
  701.         pctx = si->pctx;
               ^
  702.     else {
  703.         EVP_MD_CTX_reset(mctx);

#1315
ssl/ssl_lib.c:855: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  853.     return s;
  854.  err:
  855.     SSL_free(s);
           ^
  856.     SSLerr(SSL_F_SSL_NEW, ERR_R_MALLOC_FAILURE);
  857.     return NULL;

#1316
ssl/ssl_lib.c:855: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  853.     return s;
  854.  err:
  855.     SSL_free(s);
           ^
  856.     SSLerr(SSL_F_SSL_NEW, ERR_R_MALLOC_FAILURE);
  857.     return NULL;

#1317
test/bntest.c:706: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_mul`.
  704.             goto err;
  705.         for (j = 0; j < 2; j++) {
  706.             if (!(TEST_true(BN_GF2m_mod_mul(e, a, c, b[j], ctx))
                         ^
  707.                     && TEST_true(BN_GF2m_add(f, a, d))
  708.                     && TEST_true(BN_GF2m_mod_mul(g, f, c, b[j], ctx))

#1318
ssl/statem/extensions_clnt.c:714: error: Buffer Overrun L2
  Offset: [0, max(10, `s->ext.supportedgroups_len`)] (<= [0, 1] + [0, -1+max(10, `s->ext.supportedgroups_len`)]) Size: 2.
  712.         for (i = 0; i < num_groups; i++) {
  713. 
  714.             if (!tls_group_allowed(s, pgroups[i], SSL_SECOP_CURVE_SUPPORTED))
                                             ^
  715.                 continue;
  716. 

#1319
ssl/statem/extensions_clnt.c:717: error: Buffer Overrun L2
  Offset: [0, max(10, `s->ext.supportedgroups_len`)] (<= [0, 1] + [0, -1+max(10, `s->ext.supportedgroups_len`)]) Size: 2.
  715.                 continue;
  716. 
  717.             curve_id = pgroups[i];
                              ^
  718.             break;
  719.         }

#1320
ssl/statem/extensions_clnt.c:697: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  695.             || !WPACKET_start_sub_packet_u16(pkt)
  696.                /* KeyShare list sub-packet */
  697.             || !WPACKET_start_sub_packet_u16(pkt)) {
                       ^
  698.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_KEY_SHARE,
  699.                  ERR_R_INTERNAL_ERROR);

#1321
ssl/statem/extensions_clnt.c:728: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 6]):unsigned64 by call to `add_key_share`.
  726.     }
  727. 
  728.     if (!add_key_share(s, pkt, curve_id)) {
                ^
  729.         /* SSLfatal() already called */
  730.         return EXT_RETURN_FAIL;

#1322
crypto/bio/bss_bio.c:717: error: Null Dereference
  pointer `bio1` last assigned on line 692 could be null and is dereferenced by call to `BIO_free()` at line 717, column 9.
  715.  err:
  716.     if (ret == 0) {
  717.         BIO_free(bio1);
               ^
  718.         bio1 = NULL;
  719.         BIO_free(bio2);

#1323
crypto/bio/bss_bio.c:719: error: Null Dereference
  pointer `bio2` last assigned on line 695 could be null and is dereferenced by call to `BIO_free()` at line 719, column 9.
  717.         BIO_free(bio1);
  718.         bio1 = NULL;
  719.         BIO_free(bio2);
               ^
  720.         bio2 = NULL;
  721.     }

#1324
test/ssltestlib.c:689: error: Dead Store
  The value written to &ret (type long) is never used.
  687. static long always_retry_ctrl(BIO *bio, int cmd, long num, void *ptr)
  688. {
  689.     long ret = 1;
           ^
  690. 
  691.     switch (cmd) {

#1325
crypto/modes/gcm128.c:763: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `gcm_init_4bit`.
  761.     }
  762. #  endif
  763.     gcm_init_4bit(ctx->Htable, ctx->H.u);
           ^
  764. #  if   defined(GHASH_ASM_X86)  /* x86 only */
  765. #   if  defined(OPENSSL_IA32_SSE2)

#1326
crypto/bn/bn_gf2m.c:745: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_inv_vartime`.
  743. 
  744.     /* r := 1/(a * b) */
  745.     if (!BN_GF2m_mod_inv_vartime(r, r, p, ctx))
                ^
  746.         goto err;
  747. 

#1327
crypto/bn/bn_gf2m.c:749: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_mul`.
  747. 
  748.     /* r := b/(a * b) = 1/a */
  749.     if (!BN_GF2m_mod_mul(r, r, b, p, ctx))
                ^
  750.         goto err;
  751. 

#1328
crypto/bn/bn_gf2m.c:749: error: Integer Overflow L2
  ([0, 4+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_GF2m_mod_mul`.
  747. 
  748.     /* r := b/(a * b) = 1/a */
  749.     if (!BN_GF2m_mod_mul(r, r, b, p, ctx))
                ^
  750.         goto err;
  751. 

#1329
test/ssltest_old.c:732: error: Null Dereference
  pointer `ec` last assigned on line 729 could be null and is dereferenced by call to `EC_KEY_get0_group()` at line 732, column 39.
  730.         int nid;
  731.         const char *cname;
  732.         nid = EC_GROUP_get_curve_name(EC_KEY_get0_group(ec));
                                             ^
  733.         EC_KEY_free(ec);
  734.         cname = EC_curve_nid2nist(nid);

#1330
test/asn1_encode_test.c:745: error: Buffer Overrun L3
  Offset added: [1, 9] Size: [8, 72] by call to `do_encode_custom`.
  743.     for (i = 0; i < nelems; i++) {
  744.         size_t pos = i * package->encode_expectations_elem_size;
  745.         switch (do_encode_custom((EXPECTED *)&((unsigned char *)package
                       ^
  746.                                                ->encode_expectations)[pos],
  747.                                  &test_custom_data[i], package)) {

#1331
test/asn1_encode_test.c:745: error: Buffer Overrun L3
  Offset: [0, 8] Size: [1, 9] by call to `do_encode_custom`.
  743.     for (i = 0; i < nelems; i++) {
  744.         size_t pos = i * package->encode_expectations_elem_size;
  745.         switch (do_encode_custom((EXPECTED *)&((unsigned char *)package
                       ^
  746.                                                ->encode_expectations)[pos],
  747.                                  &test_custom_data[i], package)) {

#1332
test/bntest.c:752: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_sqr`.
  750.                 goto err;
  751.         for (j = 0; j < 2; j++) {
  752.             if (!(TEST_true(BN_GF2m_mod_sqr(c, a, b[j], ctx))
                         ^
  753.                     && TEST_true(BN_copy(d, a))
  754.                     && TEST_true(BN_GF2m_mod_mul(d, a, d, b[j], ctx))

#1333
crypto/evp/e_aes_cbc_hmac_sha256.c:848: error: Integer Overflow L2
  ([-50, +oo] - [-63, 63]):unsigned64 by call to `sha256_update`.
  846. 
  847.                 key->md = key->head;
  848.                 SHA256_Update(&key->md, param->inp, 13);
                       ^
  849. 
  850.                 x4 = 4 * n4x;

#1334
crypto/evp/e_aes_cbc_hmac_sha256.c:857: error: Integer Overflow L2
  ([-61, 8] - 1):unsigned32.
  855.                 if (last > frag && ((last + 13 + 9) % 64 < (x4 - 1))) {
  856.                     frag++;
  857.                     last -= x4 - 1;
                           ^
  858.                 }
  859. 

#1335
crypto/evp/e_aes_cbc_hmac_sha256.c:761: error: Integer Overflow L2
  ([1, 63] - 32):unsigned64 by call to `sha256_update`.
  759.             if (u_arg > sizeof(hmac_key)) {
  760.                 SHA256_Init(&key->head);
  761.                 SHA256_Update(&key->head, ptr, arg);
                       ^
  762.                 SHA256_Final(hmac_key, &key->head);
  763.             } else {

#1336
crypto/evp/e_aes_cbc_hmac_sha256.c:802: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `sha256_update`.
  800.                 }
  801.                 key->md = key->head;
  802.                 SHA256_Update(&key->md, p, arg);
                       ^
  803. 
  804.                 return (int)(((len + SHA256_DIGEST_LENGTH +

#1337
crypto/evp/e_aes_cbc_hmac_sha256.c:848: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `sha256_update`.
  846. 
  847.                 key->md = key->head;
  848.                 SHA256_Update(&key->md, param->inp, 13);
                       ^
  849. 
  850.                 x4 = 4 * n4x;

#1338
crypto/rsa/rsa_lib.c:766: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  764. 
  765.     *p++ = OSSL_PARAM_construct_int(OSSL_ASYM_CIPHER_PARAM_PAD_MODE, &pad_mode);
  766.     *p++ = OSSL_PARAM_construct_end();
            ^
  767. 
  768.     return EVP_PKEY_CTX_set_params(ctx, pad_params);

#1339
test/cmp_ctx_test.c:743: error: Dead Store
  The value written to &n_elem (type int) is never used.
  741. 
  742. DEFINE_SET_TEST(OSSL_CMP, CTX, 1, 1, recipient, X509_NAME)
  743. DEFINE_PUSH_TEST(0, 0, geninfo_ITAVs, geninfo_ITAV, OSSL_CMP_ITAV)
       ^
  744. DEFINE_SET_SK_TEST(OSSL_CMP, CTX, 1, extraCertsOut, X509)
  745. DEFINE_SET_GET_ARG_FN(set0, get0, newPkey, 1, EVP_PKEY*) /* priv == 1 */

#1340
ssl/statem/extensions_clnt.c:756: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  754.                /* Extension data sub-packet */
  755.             || !WPACKET_start_sub_packet_u16(pkt)
  756.             || !WPACKET_sub_memcpy_u16(pkt, s->ext.tls13_cookie,
                       ^
  757.                                        s->ext.tls13_cookie_len)
  758.             || !WPACKET_close(pkt)) {

#1341
ssl/statem/extensions_clnt.c:756: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 6]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  754.                /* Extension data sub-packet */
  755.             || !WPACKET_start_sub_packet_u16(pkt)
  756.             || !WPACKET_sub_memcpy_u16(pkt, s->ext.tls13_cookie,
                       ^
  757.                                        s->ext.tls13_cookie_len)
  758.             || !WPACKET_close(pkt)) {

#1342
crypto/x509/x509_vfy.c:801: error: Null Dereference
  pointer `x` last assigned on line 800 could be null and is dereferenced by call to `lookup_cert_match()` at line 801, column 14.
  799.         i = 0;
  800.         x = sk_X509_value(ctx->chain, i);
  801.         mx = lookup_cert_match(ctx, x);
                    ^
  802.         if (!mx)
  803.             return X509_TRUST_UNTRUSTED;

#1343
crypto/ts/ts_rsp_sign.c:777: error: Buffer Overrun L3
  Offset: [-1, +oo] (<= [-1, 2147483647] + [0, +oo]) Size: 23 by call to `BIO_snprintf`.
  775.                       tm->tm_hour, tm->tm_min, tm->tm_sec);
  776.     if (precision > 0) {
  777.         BIO_snprintf(p, 2 + precision, ".%06ld", usec);
               ^
  778.         p += strlen(p);
  779. 

#1344
crypto/ts/ts_rsp_sign.c:801: error: Dead Store
  The value written to &p (type char*) is never used.
  799.     }
  800.     *p++ = 'Z';
  801.     *p++ = '\0';
            ^
  802. 
  803.     if (asn1_time == NULL

#1345
crypto/store/loader_file.c:847: error: Uninitialized Value
  The value read from st.st_mode was never initialized.
  845.     }
  846. 
  847.     if (S_ISDIR(st.st_mode)) {
               ^
  848.         /*
  849.          * Try to copy everything, even if we know that some of them must be

#1346
ssl/statem/statem.c:863: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `statem_do_write`.
  861.                 dtls1_start_timer(s);
  862.             }
  863.             ret = statem_do_write(s);
                         ^
  864.             if (ret <= 0) {
  865.                 return SUB_STATE_ERROR;

#1347
ssl/ssl_cert.c:807: error: Null Dereference
  pointer `ctx` last assigned on line 766 could be null and is dereferenced by call to `OSSL_STORE_close()` at line 807, column 5.
  805.     ok = 0;
  806.  done:
  807.     OSSL_STORE_close(ctx);
           ^
  808. 
  809.     return ok;

#1348
test/handshake_helper.c:776: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  774.     return 1;
  775. err:
  776.     SSL_free(ssl);
           ^
  777.     OPENSSL_free(write_buf);
  778.     OPENSSL_free(read_buf);

#1349
test/handshake_helper.c:776: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  774.     return 1;
  775. err:
  776.     SSL_free(ssl);
           ^
  777.     OPENSSL_free(write_buf);
  778.     OPENSSL_free(read_buf);

#1350
test/cmp_ctx_test.c:760: error: Dead Store
  The value written to &n_elem (type int) is never used.
  758. #endif
  759. DEFINE_SET_SK_TEST(OSSL_CMP, CTX, 0, reqExtensions, X509_EXTENSION)
  760. DEFINE_PUSH_TEST(0, 0, policies, policy, POLICYINFO)
       ^
  761. DEFINE_SET_TEST(OSSL_CMP, CTX, 1, 0, oldCert, X509)
  762. #ifdef ISSUE_9504_RESOLVED

#1351
crypto/bn/bn_gf2m.c:782: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  780. 
  781.  err:
  782.     BN_CTX_end(ctx);
           ^
  783.     return ret;
  784. }

#1352
crypto/bn/bn_gf2m.c:782: error: Integer Overflow L2
  ([0, 5+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  780. 
  781.  err:
  782.     BN_CTX_end(ctx);
           ^
  783.     return ret;
  784. }

#1353
test/cmp_ctx_test.c:765: error: Dead Store
  The value written to &n_elem (type int) is never used.
  763. DEFINE_SET_TEST(OSSL_CMP, CTX, 1, 1, p10CSR, X509_REQ)
  764. #endif
  765. DEFINE_PUSH_TEST(0, 0, genm_ITAVs, genm_ITAV, OSSL_CMP_ITAV)
       ^
  766. DEFINE_SET_CB_TEST(certConf_cb)
  767. DEFINE_SET_GET_P_VOID_TEST(certConf_cb_arg)

#1354
crypto/evp/e_aes_cbc_hmac_sha1.c:781: error: Integer Overflow L1
  (64 - 3285377520):unsigned64 by call to `sha1_update`.
  779.             if (arg > (int)sizeof(hmac_key)) {
  780.                 SHA1_Init(&key->head);
  781.                 SHA1_Update(&key->head, ptr, arg);
                       ^
  782.                 SHA1_Final(hmac_key, &key->head);
  783.             } else {

#1355
crypto/evp/e_aes_cbc_hmac_sha1.c:790: error: Integer Overflow L1
  (64 - 3285377520):unsigned64 by call to `sha1_update`.
  788.                 hmac_key[i] ^= 0x36; /* ipad */
  789.             SHA1_Init(&key->head);
  790.             SHA1_Update(&key->head, hmac_key, sizeof(hmac_key));
                   ^
  791. 
  792.             for (i = 0; i < sizeof(hmac_key); i++)

#1356
crypto/evp/e_aes_cbc_hmac_sha1.c:865: error: Integer Overflow L2
  ([-50, +oo] - [-63, 63]):unsigned64 by call to `sha1_update`.
  863. 
  864.                 key->md = key->head;
  865.                 SHA1_Update(&key->md, param->inp, 13);
                       ^
  866. 
  867.                 x4 = 4 * n4x;

#1357
crypto/evp/e_aes_cbc_hmac_sha1.c:874: error: Integer Overflow L2
  ([-61, 8] - 1):unsigned32.
  872.                 if (last > frag && ((last + 13 + 9) % 64 < (x4 - 1))) {
  873.                     frag++;
  874.                     last -= x4 - 1;
                           ^
  875.                 }
  876. 

#1358
crypto/evp/e_aes_cbc_hmac_sha1.c:822: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `sha1_update`.
  820.                 }
  821.                 key->md = key->head;
  822.                 SHA1_Update(&key->md, p, arg);
                       ^
  823. 
  824.                 return (int)(((len + SHA_DIGEST_LENGTH +

#1359
crypto/evp/e_aes_cbc_hmac_sha1.c:865: error: Integer Overflow L2
  ([1, 63] - [-oo, 63]):unsigned64 by call to `sha1_update`.
  863. 
  864.                 key->md = key->head;
  865.                 SHA1_Update(&key->md, param->inp, 13);
                       ^
  866. 
  867.                 x4 = 4 * n4x;

#1360
crypto/rsa/rsa_lib.c:794: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  792. 
  793.     *p++ = OSSL_PARAM_construct_int(OSSL_ASYM_CIPHER_PARAM_PAD_MODE, pad_mode);
  794.     *p++ = OSSL_PARAM_construct_end();
            ^
  795. 
  796.     if (!EVP_PKEY_CTX_get_params(ctx, pad_params))

#1361
test/bntest.c:791: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_inv`.
  789.             goto err;
  790.         for (j = 0; j < 2; j++) {
  791.             if (!(TEST_true(BN_GF2m_mod_inv(c, a, b[j], ctx))
                         ^
  792.                     && TEST_true(BN_GF2m_mod_mul(d, a, c, b[j], ctx))
  793.                     /* Test that ((1/a)*a) = 1. */

#1362
ssl/statem/extensions_clnt.c:921: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  919. 
  920.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_early_data)
  921.             || !WPACKET_start_sub_packet_u16(pkt)
                       ^
  922.             || !WPACKET_close(pkt)) {
  923.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_EARLY_DATA,

#1363
crypto/pem/pvkfmt.c:848: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_DecryptUpdate`.
  846.             goto error;
  847.         OPENSSL_cleanse(keybuf, 20);
  848.         if (!EVP_DecryptUpdate(cctx, p, &enctmplen, p, pklen - 8))
                    ^
  849.             goto error;
  850.         if (!EVP_DecryptFinal_ex(cctx, p + enctmplen, &enctmplen))

#1364
apps/passwd.c:853: error: Buffer Overrun L3
  Offset added: [-31, 64] Size: 64 by call to `shacrypt`.
  851.         hash = md5crypt(passwd, "", *salt_p);
  852.     if (mode == passwd_sha256 || mode == passwd_sha512)
  853.         hash = shacrypt(passwd, (mode == passwd_sha256 ? "5" : "6"), *salt_p);
                      ^
  854.     assert(hash != NULL);
  855. 

#1365
apps/passwd.c:853: error: Integer Overflow L2
  ([33, +oo] - [32, 64]):unsigned64 by call to `shacrypt`.
  851.         hash = md5crypt(passwd, "", *salt_p);
  852.     if (mode == passwd_sha256 || mode == passwd_sha512)
  853.         hash = shacrypt(passwd, (mode == passwd_sha256 ? "5" : "6"), *salt_p);
                      ^
  854.     assert(hash != NULL);
  855. 

#1366
crypto/bn/bn_gf2m.c:807: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_mul`.
  805.     if (!BN_GF2m_mod_inv(xinv, x, p, ctx))
  806.         goto err;
  807.     if (!BN_GF2m_mod_mul(r, y, xinv, p, ctx))
                ^
  808.         goto err;
  809.     bn_check_top(r);

#1367
crypto/bn/bn_gf2m.c:807: error: Integer Overflow L2
  ([0, 6+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_GF2m_mod_mul`.
  805.     if (!BN_GF2m_mod_inv(xinv, x, p, ctx))
  806.         goto err;
  807.     if (!BN_GF2m_mod_mul(r, y, xinv, p, ctx))
                ^
  808.         goto err;
  809.     bn_check_top(r);

#1368
crypto/ec/ecp_smpl.c:854: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `BN_mod_sub_quick`.
  852.         if (!BN_mod_add_quick(n0, a->X, n1, p))
  853.             goto err;
  854.         if (!BN_mod_sub_quick(n2, a->X, n1, p))
                    ^
  855.             goto err;
  856.         if (!field_mul(group, n1, n0, n2, ctx))

#1369
crypto/ec/ecp_smpl.c:842: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_lshift1_quick`.
  840.         if (!field_sqr(group, n0, a->X, ctx))
  841.             goto err;
  842.         if (!BN_mod_lshift1_quick(n1, n0, p))
                    ^
  843.             goto err;
  844.         if (!BN_mod_add_quick(n0, n0, n1, p))

#1370
crypto/ec/ecp_smpl.c:911: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_sub_quick`.
  909.     if (!field_sqr(group, r->X, n1, ctx))
  910.         goto err;
  911.     if (!BN_mod_sub_quick(r->X, r->X, n0, p))
                ^
  912.         goto err;
  913.     /* X_r = n1^2 - 2 * n2 */

#1371
test/ectest.c:828: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: [2, 145] by call to `BN_hex2bn`.
  826.         || !TEST_ptr(yplusone = BN_new())
  827.         || !TEST_true(BN_hex2bn(&p, test->p))
  828.         || !TEST_true(BN_hex2bn(&a, test->a))
                   ^
  829.         || !TEST_true(BN_hex2bn(&b, test->b))
  830.         || !TEST_true(group = EC_GROUP_new(EC_GF2m_simple_method()))

#1372
test/ectest.c:828: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: [2, 145] by call to `BN_hex2bn`.
  826.         || !TEST_ptr(yplusone = BN_new())
  827.         || !TEST_true(BN_hex2bn(&p, test->p))
  828.         || !TEST_true(BN_hex2bn(&a, test->a))
                   ^
  829.         || !TEST_true(BN_hex2bn(&b, test->b))
  830.         || !TEST_true(group = EC_GROUP_new(EC_GF2m_simple_method()))

#1373
test/ectest.c:905: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_even`.
  903. 
  904.         if (!TEST_true(BN_add(y, z, BN_value_one()))
  905.             || !TEST_BN_even(y)
                       ^
  906.             || !TEST_true(BN_rshift1(y, y)))
  907.             goto err;

#1374
test/ectest.c:915: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINTs_mul`.
  913.         /* z is still the group order */
  914.         if (!TEST_true(EC_POINTs_mul(group, P, NULL, 2, points, scalars, ctx))
  915.             || !TEST_true(EC_POINTs_mul(group, R, z, 2, points, scalars, ctx))
                       ^
  916.             || !TEST_int_eq(0, EC_POINT_cmp(group, P, R, ctx))
  917.             || !TEST_int_eq(0, EC_POINT_cmp(group, R, Q, ctx)))

#1375
test/ectest.c:837: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  835.         || !TEST_true(BN_hex2bn(&x, test->x))
  836.         || !TEST_true(BN_hex2bn(&y, test->y))
  837.         || !TEST_true(BN_add(yplusone, y, BN_value_one())))
                   ^
  838.         goto err;
  839. 

#1376
test/bntest.c:832: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_div`.
  830.             goto err;
  831.         for (j = 0; j < 2; j++) {
  832.             if (!(TEST_true(BN_GF2m_mod_div(d, a, c, b[j], ctx))
                         ^
  833.                     && TEST_true(BN_GF2m_mod_mul(e, d, c, b[j], ctx))
  834.                     && TEST_true(BN_GF2m_mod_div(f, a, e, b[j], ctx))

#1377
crypto/bn/bn_gf2m.c:842: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  840. 
  841.  err:
  842.     BN_CTX_end(ctx);
           ^
  843.     return ret;
  844. }

#1378
crypto/bn/bn_gf2m.c:842: error: Integer Overflow L2
  ([0, 7+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_CTX_end`.
  840. 
  841.  err:
  842.     BN_CTX_end(ctx);
           ^
  843.     return ret;
  844. }

#1379
crypto/rsa/rsa_lib.c:860: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  858.                     strlen(mdprops) + 1);
  859.     }
  860.     *p++ = OSSL_PARAM_construct_end();
            ^
  861. 
  862.     return EVP_PKEY_CTX_set_params(ctx, rsa_params);

#1380
crypto/dh/dh_ameth.c:876: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `BN_to_ASN1_INTEGER`.
  874.     /* Is everything uninitialised? */
  875.     if (aoid == OBJ_nid2obj(NID_undef)) {
  876.         ASN1_INTEGER *pubk = BN_to_ASN1_INTEGER(pkey->pkey.dh->pub_key, NULL);
                                    ^
  877. 
  878.         if (pubk == NULL)

#1381
crypto/bn/bn_gf2m.c:878: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_mul_arr`.
  876.             goto err;
  877.         if (BN_is_bit_set(b, i)) {
  878.             if (!BN_GF2m_mod_mul_arr(u, u, a, p, ctx))
                        ^
  879.                 goto err;
  880.         }

#1382
crypto/bn/bn_gf2m.c:875: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_sqr_arr`.
  873.     n = BN_num_bits(b) - 1;
  874.     for (i = n - 1; i >= 0; i--) {
  875.         if (!BN_GF2m_mod_sqr_arr(u, u, p, ctx))
                    ^
  876.             goto err;
  877.         if (BN_is_bit_set(b, i)) {

#1383
test/bntest.c:879: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_mul`.
  877.             if (!(TEST_true(BN_GF2m_mod_exp(e, a, c, b[j], ctx))
  878.                     && TEST_true(BN_GF2m_mod_exp(f, a, d, b[j], ctx))
  879.                     && TEST_true(BN_GF2m_mod_mul(e, e, f, b[j], ctx))
                              ^
  880.                     && TEST_true(BN_add(f, c, d))
  881.                     && TEST_true(BN_GF2m_mod_exp(f, a, f, b[j], ctx))

#1384
test/bntest.c:880: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  878.                     && TEST_true(BN_GF2m_mod_exp(f, a, d, b[j], ctx))
  879.                     && TEST_true(BN_GF2m_mod_mul(e, e, f, b[j], ctx))
  880.                     && TEST_true(BN_add(f, c, d))
                              ^
  881.                     && TEST_true(BN_GF2m_mod_exp(f, a, f, b[j], ctx))
  882.                     && TEST_true(BN_GF2m_add(f, e, f))

#1385
test/evp_test.c:885: error: Integer Overflow L1
  ([18446744073709551615, +oo] + 1):unsigned64.
  883.         static char aux_err[64];
  884.         t->aux_err = aux_err;
  885.         for (inp_misalign = (size_t)-1; inp_misalign != 2; inp_misalign++) {
                                                                  ^
  886.             if (inp_misalign == (size_t)-1) {
  887.                 /* kludge: inp_misalign == -1 means "exercise in-place" */

#1386
test/evp_test.c:900: error: Integer Overflow L1
  ([18446744073709551615, +oo] + [1, 16]):unsigned64 by call to `cipher_test_enc`.
  898.             }
  899.             if (cdat->enc) {
  900.                 rv = cipher_test_enc(t, 1, out_misalign, inp_misalign, frag);
                            ^
  901.                 /* Not fatal errors: return */
  902.                 if (rv != 1) {

#1387
test/evp_test.c:909: error: Integer Overflow L1
  ([18446744073709551615, +oo] + [1, 16]):unsigned64 by call to `cipher_test_enc`.
  907.             }
  908.             if (cdat->enc != 1) {
  909.                 rv = cipher_test_enc(t, 0, out_misalign, inp_misalign, frag);
                            ^
  910.                 /* Not fatal errors: return */
  911.                 if (rv != 1) {

#1388
crypto/ec/ec2_smpl.c:908: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ec_scalar_mul_ladder`.
  906. 
  907.     if (!ec_scalar_mul_ladder(group, t, scalar, NULL, ctx)
  908.         || !ec_scalar_mul_ladder(group, r, scalars[0], points[0], ctx)
                   ^
  909.         || !EC_POINT_add(group, r, t, r, ctx))
  910.         goto err;

#1389
crypto/ec/ec2_smpl.c:908: error: Integer Overflow L2
  ([0, 5+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `ec_scalar_mul_ladder`.
  906. 
  907.     if (!ec_scalar_mul_ladder(group, t, scalar, NULL, ctx)
  908.         || !ec_scalar_mul_ladder(group, r, scalars[0], points[0], ctx)
                   ^
  909.         || !EC_POINT_add(group, r, t, r, ctx))
  910.         goto err;

#1390
crypto/rsa/rsa_lib.c:882: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  880.     *p++ = OSSL_PARAM_construct_utf8_string(OSSL_ASYM_CIPHER_PARAM_OAEP_DIGEST,
  881.                                             name, namelen);
  882.     *p++ = OSSL_PARAM_construct_end();
            ^
  883. 
  884.     if (!EVP_PKEY_CTX_get_params(ctx, rsa_params))

#1391
crypto/x509/x509_vfy.c:878: error: Null Dereference
  pointer `x` last assigned on line 871 could be null and is dereferenced at line 878, column 9.
  876.     ctx->current_reasons = 0;
  877. 
  878.     if (x->ex_flags & EXFLAG_PROXY)
               ^
  879.         return 1;
  880. 

#1392
ssl/record/ssl3_record.c:953: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `ssl3_cbc_remove_padding`.
  951.         }
  952.         if ((bs != 1) && !sending)
  953.             return ssl3_cbc_remove_padding(rec, bs, mac_size);
                          ^
  954.     }
  955.     return 1;

#1393
ssl/record/ssl3_record.c:953: error: Integer Overflow L2
  ([0, +oo] - [0, `inrecs->data` + 1]):unsigned64 by call to `ssl3_cbc_remove_padding`.
  951.         }
  952.         if ((bs != 1) && !sending)
  953.             return ssl3_cbc_remove_padding(rec, bs, mac_size);
                          ^
  954.     }
  955.     return 1;

#1394
ssl/record/ssl3_record.c:953: error: Integer Overflow L2
  ([0, +oo] - [`inrecs->data` + 1, `inrecs->data` + 1]):unsigned64 by call to `ssl3_cbc_remove_padding`.
  951.         }
  952.         if ((bs != 1) && !sending)
  953.             return ssl3_cbc_remove_padding(rec, bs, mac_size);
                          ^
  954.     }
  955.     return 1;

#1395
test/ssltestlib.c:932: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  930.  error:
  931.     SSL_free(serverssl);
  932.     SSL_free(clientssl);
           ^
  933.     BIO_free(s_to_c_bio);
  934.     BIO_free(c_to_s_bio);

#1396
test/ssltestlib.c:931: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  929. 
  930.  error:
  931.     SSL_free(serverssl);
           ^
  932.     SSL_free(clientssl);
  933.     BIO_free(s_to_c_bio);

#1397
crypto/bn/bn_nist.c:1132: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  1130.             (int)bn_add_words(r_d, r_d, _nist_p_384[-carry - 1],
  1131.                               BN_NIST_384_TOP);
  1132.         mask = 0 - (PTR_SIZE_INT) carry;
                ^
  1133.         u.p = ((PTR_SIZE_INT) bn_sub_words & mask) |
  1134.             ((PTR_SIZE_INT) bn_add_words & ~mask);

#1398
ssl/statem/statem_lib.c:897: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 3]):unsigned64 by call to `WPACKET_sub_allocate_bytes__`.
  895.         return 0;
  896.     }
  897.     if (!WPACKET_sub_allocate_bytes_u24(pkt, len, &outbytes)
                ^
  898.             || i2d_X509(x, &outbytes) != len) {
  899.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_SSL_ADD_CERT_TO_WPACKET,

#1399
test/bntest.c:926: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_sqr`.
  924.             if (!(TEST_true(BN_GF2m_mod(c, a, b[j]))
  925.                     && TEST_true(BN_GF2m_mod_sqrt(d, a, b[j], ctx))
  926.                     && TEST_true(BN_GF2m_mod_sqr(e, d, b[j], ctx))
                              ^
  927.                     && TEST_true(BN_GF2m_add(f, c, e))
  928.                     /* Test that d^2 = a, where d = sqrt(a). */

#1400
crypto/bn/bn_gf2m.c:948: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  946. 
  947.  err:
  948.     BN_CTX_end(ctx);
           ^
  949.     return ret;
  950. }

#1401
crypto/ec/ec_asn1.c:943: error: Integer Overflow L2
  ([-oo, 9223372036854775807] + 1):signed32 by call to `EC_GROUP_new_from_ecpkparameters`.
  941.     }
  942. 
  943.     if ((group = EC_GROUP_new_from_ecpkparameters(params)) == NULL) {
                        ^
  944.         ECerr(EC_F_D2I_ECPKPARAMETERS, EC_R_PKPARAMETERS2GROUP_FAILURE);
  945.         ECPKPARAMETERS_free(params);

#1402
crypto/ec/ecp_smpl.c:945: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_usub`.
  943.         return 1;
  944. 
  945.     return BN_usub(point->Y, group->field, point->Y);
                  ^
  946. }
  947. 

#1403
apps/ocsp.c:1018: error: Unreachable Code
  Unreachable code after statement.
  1016.             if (RAND_poll() <= 0) {
  1017.                 syslog(LOG_ERR, "fatal: RAND_poll() failed");
  1018.                 _exit(1);
                        ^
  1019.             }
  1020.             return;

#1404
test/bntest.c:970: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_sqr`.
  968.             if (t) {
  969.                 s++;
  970.                 if (!(TEST_true(BN_GF2m_mod_sqr(d, c, b[j], ctx))
                             ^
  971.                         && TEST_true(BN_GF2m_add(d, c, d))
  972.                         && TEST_true(BN_GF2m_mod(e, a, b[j]))

#1405
crypto/rsa/rsa_lib.c:988: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  986.                     strlen(mdprops) + 1);
  987.     }
  988.     *p++ = OSSL_PARAM_construct_end();
            ^
  989. 
  990.     return EVP_PKEY_CTX_set_params(ctx, rsa_params);

#1406
crypto/ec/ecp_smpl.c:1013: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `BN_mod_sub_quick`.
  1011.             if (!BN_mod_add_quick(tmp, tmp, Z4, p))
  1012.                 goto err;
  1013.             if (!BN_mod_sub_quick(rh, rh, tmp, p))
                         ^
  1014.                 goto err;
  1015.             if (!field_mul(group, rh, rh, point->X, ctx))

#1407
crypto/ec/ecp_smpl.c:1009: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_lshift1_quick`.
  1007.         /* rh := (rh + a*Z^4)*X */
  1008.         if (group->a_is_minus3) {
  1009.             if (!BN_mod_lshift1_quick(tmp, Z4, p))
                         ^
  1010.                 goto err;
  1011.             if (!BN_mod_add_quick(tmp, tmp, Z4, p))

#1408
ssl/statem/extensions_clnt.c:1012: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_allocate_bytes__`.
  1010. 
  1011.         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_padding)
  1012.                 || !WPACKET_sub_allocate_bytes_u16(pkt, hlen, &padbytes)) {
                            ^
  1013.             SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_PADDING,
  1014.                      ERR_R_INTERNAL_ERROR);

#1409
ssl/ssl_ciph.c:1182: error: Uninitialized Value
  The value read from buflen was never initialized.
  1180.         if (rule == CIPHER_SPECIAL) { /* special command */
  1181.             ok = 0;
  1182.             if ((buflen == 8) && strncmp(buf, "STRENGTH", 8) == 0) {
                         ^
  1183.                 ok = ssl_cipher_strength_sort(head_p, tail_p);
  1184.             } else if (buflen == 10 && strncmp(buf, "SECLEVEL=", 9) == 0) {

#1410
ssl/ssl_ciph.c:1184: error: Uninitialized Value
  The value read from buflen was never initialized.
  1182.             if ((buflen == 8) && strncmp(buf, "STRENGTH", 8) == 0) {
  1183.                 ok = ssl_cipher_strength_sort(head_p, tail_p);
  1184.             } else if (buflen == 10 && strncmp(buf, "SECLEVEL=", 9) == 0) {
                               ^
  1185.                 int level = buf[9] - '0';
  1186.                 if (level < 0 || level > 5) {

#1411
ssl/ssl_ciph.c:1206: error: Uninitialized Value
  The value read from found was never initialized.
  1204.             while ((*l != '\0') && !ITEM_SEP(*l))
  1205.                 l++;
  1206.         } else if (found) {
                           ^
  1207.             ssl_cipher_apply_rule(cipher_id,
  1208.                                   alg_mkey, alg_auth, alg_enc, alg_mac,

#1412
test/ectest.c:979: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 2 by call to `BN_hex2bn`.
  977.         || !TEST_ptr(b = BN_new())
  978.         || !TEST_true(BN_hex2bn(&p, "13"))
  979.         || !TEST_true(BN_hex2bn(&a, "3"))
                   ^
  980.         || !TEST_true(BN_hex2bn(&b, "1")))
  981.         goto err;

#1413
test/ectest.c:979: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 2 by call to `BN_hex2bn`.
  977.         || !TEST_ptr(b = BN_new())
  978.         || !TEST_true(BN_hex2bn(&p, "13"))
  979.         || !TEST_true(BN_hex2bn(&a, "3"))
                   ^
  980.         || !TEST_true(BN_hex2bn(&b, "1")))
  981.         goto err;

#1414
test/ectest.c:1001: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_output_bignum`.
   999.     TEST_info("Curve defined by Weierstrass equation");
  1000.     TEST_note("     y^2 + x*y = x^3 + a*x^2 + b (mod p)");
  1001.     test_output_bignum("a", a);
            ^
  1002.     test_output_bignum("b", b);
  1003.     test_output_bignum("p", p);

#1415
test/ectest.c:1082: error: Integer Overflow L2
  ([0, 3] - 1):unsigned32 by call to `EC_POINT_point2oct`.
  1080. #  endif
  1081. 
  1082.     len = EC_POINT_point2oct(group, Q, POINT_CONVERSION_UNCOMPRESSED,
                  ^
  1083.                              buf, sizeof(buf), ctx);
  1084.     if (!TEST_size_t_ne(len, 0)

#1416
ssl/record/ssl3_record.c:1196: error: Integer Overflow L2
  ([-1, +oo] - [0, 255]):unsigned64 by call to `tls1_cbc_remove_padding`.
  1194.             int tmpret;
  1195.             for (ctr = 0; ctr < n_recs; ctr++) {
  1196.                 tmpret = tls1_cbc_remove_padding(s, &recs[ctr], bs, mac_size);
                                 ^
  1197.                 /*
  1198.                  * If tmpret == 0 then this means publicly invalid so we can

#1417
ssl/record/ssl3_record.c:1196: error: Integer Overflow L2
  ([0, +oo] - [0, `recs->data` + 1]):unsigned64 by call to `tls1_cbc_remove_padding`.
  1194.             int tmpret;
  1195.             for (ctr = 0; ctr < n_recs; ctr++) {
  1196.                 tmpret = tls1_cbc_remove_padding(s, &recs[ctr], bs, mac_size);
                                 ^
  1197.                 /*
  1198.                  * If tmpret == 0 then this means publicly invalid so we can

#1418
ssl/record/ssl3_record.c:1196: error: Integer Overflow L2
  ([0, +oo] - [`recs->data` + 1, `recs->data` + 1]):unsigned64 by call to `tls1_cbc_remove_padding`.
  1194.             int tmpret;
  1195.             for (ctr = 0; ctr < n_recs; ctr++) {
  1196.                 tmpret = tls1_cbc_remove_padding(s, &recs[ctr], bs, mac_size);
                                 ^
  1197.                 /*
  1198.                  * If tmpret == 0 then this means publicly invalid so we can

#1419
ssl/record/ssl3_record.c:1159: error: Uninitialized Value
  The value read from reclen[_] was never initialized.
  1157. 
  1158.         /* TODO(size_t): Convert this call */
  1159.         tmpr = EVP_Cipher(ds, recs[0].data, recs[0].input,
                       ^
  1160.                           (unsigned int)reclen[0]);
  1161.         if ((EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))

#1420
crypto/modes/gcm128.c:1017: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo].
  1015.             return 0;
  1016.         }
  1017.         memcpy(ctx->Xn, ctx->Xi.c, sizeof(ctx->Xi));
                ^
  1018.         ctx->Xi.u[0] = 0;
  1019.         ctx->Xi.u[1] = 0;

#1421
crypto/bn/bn_gf2m.c:1018: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_sqr_arr`.
  1016.             goto err;
  1017.         for (j = 1; j <= (p[0] - 1) / 2; j++) {
  1018.             if (!BN_GF2m_mod_sqr_arr(z, z, p, ctx))
                         ^
  1019.                 goto err;
  1020.             if (!BN_GF2m_mod_sqr_arr(z, z, p, ctx))

#1422
crypto/bn/bn_gf2m.c:1043: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_GF2m_mod_sqr_arr`.
  1041.                 goto err;
  1042.             for (j = 1; j <= p[0] - 1; j++) {
  1043.                 if (!BN_GF2m_mod_sqr_arr(z, z, p, ctx))
                             ^
  1044.                     goto err;
  1045.                 if (!BN_GF2m_mod_sqr_arr(w2, w, p, ctx))

#1423
test/drbgtest.c:997: error: Uninitialized Value
  The value read from t[_] was never initialized.
  995.     run_multi_thread_test();
  996.     for (i = 0; i < THREADS; i++)
  997.         wait_for_thread(t[i]);
               ^
  998. 
  999.     if (!TEST_true(multi_thread_rand_bytes_succeeded))

#1424
crypto/rsa/rsa_lib.c:1014: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  1012.     *p++ = OSSL_PARAM_construct_utf8_string(OSSL_ASYM_CIPHER_PARAM_MGF1_DIGEST,
  1013.                                             name, namelen);
  1014.     *p++ = OSSL_PARAM_construct_end();
             ^
  1015. 
  1016.     if (!EVP_PKEY_CTX_get_params(ctx, rsa_params))

#1425
apps/s_server.c:1124: error: Buffer Overrun L3
  Offset: [1, 24] Size: [2, 25] by call to `opt_help`.
  1122.             goto end;
  1123.         case OPT_HELP:
  1124.             opt_help(s_server_options);
                    ^
  1125.             ret = 0;
  1126.             goto end;

#1426
apps/s_server.c:1643: error: Dead Store
  The value written to &argc (type int) is never used.
  1641.         }
  1642.     }
  1643.     argc = opt_num_rest();
            ^
  1644.     argv = opt_rest();
  1645. 

#1427
apps/s_server.c:1644: error: Dead Store
  The value written to &argv (type char**) is never used.
  1642.     }
  1643.     argc = opt_num_rest();
  1644.     argv = opt_rest();
            ^
  1645. 
  1646. #ifndef OPENSSL_NO_NEXTPROTONEG

#1428
apps/s_server.c:2209: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_CTX_free`.
  2207.     ret = 0;
  2208.  end:
  2209.     SSL_CTX_free(ctx);
            ^
  2210.     SSL_SESSION_free(psksess);
  2211.     set_keylog_file(NULL, NULL);

#1429
ssl/statem/statem_lib.c:1019: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 3]):unsigned64 by call to `ssl_add_cert_chain`.
  1017.     }
  1018. 
  1019.     if (!ssl_add_cert_chain(s, pkt, cpk))
                 ^
  1020.         return 0;
  1021. 

#1430
apps/lib/apps.c:1033: error: Null Dereference
  pointer `null` is dereferenced by call to `X509_NAME_oneline()` at line 1033, column 15.
  1031.     }
  1032.     if (lflags == XN_FLAG_COMPAT) {
  1033.         buf = X509_NAME_oneline(nm, 0, 0);
                      ^
  1034.         BIO_puts(out, buf);
  1035.         BIO_puts(out, "\n");

#1431
ssl/statem/extensions_clnt.c:1193: error: Integer Overflow L2
  ([0, +oo] - [0, `s->psksession_id_len` + `pkt->written` + `s->session->ext.ticklen` + 21]):unsigned64 by call to `WPACKET_sub_allocate_bytes__`.
  1191.             || !WPACKET_start_sub_packet_u16(pkt)
  1192.             || (dores
  1193.                 && !WPACKET_sub_allocate_bytes_u8(pkt, reshashsize, &resbinder))
                            ^
  1194.             || (s->psksession != NULL
  1195.                 && !WPACKET_sub_allocate_bytes_u8(pkt, pskhashsize, &pskbinder))

#1432
ssl/statem/extensions_clnt.c:1179: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + `s->session->ext.ticklen` + 12]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1177. 
  1178.     if (s->psksession != NULL) {
  1179.         if (!WPACKET_sub_memcpy_u16(pkt, s->psksession_id,
                     ^
  1180.                                     s->psksession_id_len)
  1181.                 || !WPACKET_put_bytes_u32(pkt, 0)) {

#1433
ssl/statem/extensions_clnt.c:1179: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + `s->session->ext.ticklen` + 14]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1177. 
  1178.     if (s->psksession != NULL) {
  1179.         if (!WPACKET_sub_memcpy_u16(pkt, s->psksession_id,
                     ^
  1180.                                     s->psksession_id_len)
  1181.                 || !WPACKET_put_bytes_u32(pkt, 0)) {

#1434
ssl/statem/extensions_clnt.c:1171: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + `s->session->ext.ticklen` + 8]):unsigned64 by call to `WPACKET_put_bytes__`.
  1169.         if (!WPACKET_sub_memcpy_u16(pkt, s->session->ext.tick,
  1170.                                            s->session->ext.ticklen)
  1171.                 || !WPACKET_put_bytes_u32(pkt, agems)) {
                            ^
  1172.             SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CTOS_PSK,
  1173.                      ERR_R_INTERNAL_ERROR);

#1435
ssl/statem/extensions_clnt.c:1169: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 6]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1167. 
  1168.     if (dores) {
  1169.         if (!WPACKET_sub_memcpy_u16(pkt, s->session->ext.tick,
                     ^
  1170.                                            s->session->ext.ticklen)
  1171.                 || !WPACKET_put_bytes_u32(pkt, agems)) {

#1436
ssl/statem/extensions_clnt.c:1169: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 8]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1167. 
  1168.     if (dores) {
  1169.         if (!WPACKET_sub_memcpy_u16(pkt, s->session->ext.tick,
                     ^
  1170.                                            s->session->ext.ticklen)
  1171.                 || !WPACKET_put_bytes_u32(pkt, agems)) {

#1437
ssl/statem/extensions_srvr.c:1203: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_CTX_remove_session`.
  1201.             if (s->max_early_data > 0
  1202.                     && (s->options & SSL_OP_NO_ANTI_REPLAY) == 0
  1203.                     && !SSL_CTX_remove_session(s->session_ctx, sess)) {
                                ^
  1204.                 SSL_SESSION_free(sess);
  1205.                 sess = NULL;

#1438
test/ssltestlib.c:1059: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  1057.     SSL_shutdown(serverssl);
  1058.     SSL_free(serverssl);
  1059.     SSL_free(clientssl);
            ^
  1060. }

#1439
test/ssltestlib.c:1058: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  1056.     SSL_shutdown(clientssl);
  1057.     SSL_shutdown(serverssl);
  1058.     SSL_free(serverssl);
            ^
  1059.     SSL_free(clientssl);
  1060. }

#1440
crypto/rsa/rsa_lib.c:1086: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  1084.                                             (void *)label,
  1085.                                             (size_t)llen);
  1086.     *p++ = OSSL_PARAM_construct_end();
             ^
  1087. 
  1088.     if (!EVP_PKEY_CTX_set_params(ctx, rsa_params))

#1441
test/bntest.c:1131: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `equalBN`.
  1129.     if (!BN_is_negative(a) && !BN_is_negative(b) && BN_cmp(a, b) >= 0) {
  1130.         if (!TEST_true(BN_uadd(ret, a, b))
  1131.                 || !equalBN("A +u B", sum, ret)
                            ^
  1132.                 || !TEST_true(BN_usub(ret, sum, a))
  1133.                 || !equalBN("Sum -u A", b, ret)

#1442
test/bntest.c:1089: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  1087.         goto err;
  1088. 
  1089.     if (!TEST_true(BN_add(ret, a, b))
                 ^
  1090.             || !equalBN("A + B", sum, ret)
  1091.             || !TEST_true(BN_sub(ret, sum, a))

#1443
crypto/rsa/rsa_lib.c:1120: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  1118.     *p++ = OSSL_PARAM_construct_size_t(OSSL_ASYM_CIPHER_PARAM_OAEP_LABEL_LEN,
  1119.                                        &labellen);
  1120.     *p++ = OSSL_PARAM_construct_end();
             ^
  1121. 
  1122.     if (!EVP_PKEY_CTX_get_params(ctx, rsa_params))

#1444
ssl/statem/statem_clnt.c:1221: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 34]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  1219.         }
  1220.     }
  1221.     if (!WPACKET_start_sub_packet_u8(pkt)
                 ^
  1222.             || (sess_id_len != 0 && !WPACKET_memcpy(pkt, session_id,
  1223.                                                     sess_id_len))

#1445
ssl/statem/statem_clnt.c:1222: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 35]):unsigned64 by call to `WPACKET_memcpy`.
  1220.     }
  1221.     if (!WPACKET_start_sub_packet_u8(pkt)
  1222.             || (sess_id_len != 0 && !WPACKET_memcpy(pkt, session_id,
                                             ^
  1223.                                                     sess_id_len))
  1224.             || !WPACKET_close(pkt)) {

#1446
apps/lib/s_cb.c:1120: error: Integer Overflow L2
  ([0, `len`] - 1):unsigned64.
  1118.     cp = out = app_malloc(ilen, "TLSA hex data buffer");
  1119. 
  1120.     while (len-- > 0) {
                   ^
  1121.         *cp++ = hex[(*data >> 4) & 0x0f];
  1122.         *cp++ = hex[*data++ & 0x0f];

#1447
crypto/ec/ecp_nistz256.c:1240: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64 by call to `copy_conditional`.
  1238. 
  1239.                 ecp_nistz256_neg(p.p.Z, p.p.Y);
  1240.                 copy_conditional(p.p.Y, p.p.Z, wvalue & 1);
                        ^
  1241. 
  1242.                 /*

#1448
crypto/ec/ecp_nistz256.c:1341: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  1339. 
  1340. err:
  1341.     BN_CTX_end(ctx);
            ^
  1342.     OPENSSL_free(new_points);
  1343.     OPENSSL_free(new_scalars);

#1449
crypto/bn/bn_exp.c:1219: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
  1217.                 r_is_one = 0;
  1218.             } else {
  1219.                 if (!BN_MOD_MUL_WORD(r, w, m))
                             ^
  1220.                     goto err;
  1221.             }

#1450
crypto/bn/bn_exp.c:1215: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_to_montgomery`.
  1213.         if ((next_w / w) != w) { /* overflow */
  1214.             if (r_is_one) {
  1215.                 if (!BN_TO_MONTGOMERY_WORD(r, w, mont))
                             ^
  1216.                     goto err;
  1217.                 r_is_one = 0;

#1451
test/ectest.c:1140: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_GROUP_check`.
  1138.         return 0;
  1139.     }
  1140.     if (!TEST_true(EC_GROUP_check(group, NULL))) {
                 ^
  1141.         TEST_info("EC_GROUP_check() failed with curve %s\n", OBJ_nid2sn(nid));
  1142.         EC_GROUP_free(group);

#1452
test/ectest.c:1140: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `EC_GROUP_check`.
  1138.         return 0;
  1139.     }
  1140.     if (!TEST_true(EC_GROUP_check(group, NULL))) {
                 ^
  1141.         TEST_info("EC_GROUP_check() failed with curve %s\n", OBJ_nid2sn(nid));
  1142.         EC_GROUP_free(group);

#1453
apps/req.c:1172: error: Dead Store
  The value written to &p (type char*) is never used.
  1170. 
  1171.             v = sk_CONF_VALUE_value(dn_sk, i);
  1172.             p = q = NULL;
                    ^
  1173.             type = v->name;
  1174.             if (!check_end(type, "_min") || !check_end(type, "_max") ||

#1454
ssl/ssl_lib.c:1194: error: Integer Overflow L2
  ([0, max(0, `s->session_ctx->sessions->num_nodes`)] - 1):unsigned32 by call to `SSL_CTX_free`.
  1192. 
  1193.     OPENSSL_free(s->ext.hostname);
  1194.     SSL_CTX_free(s->session_ctx);
            ^
  1195. #ifndef OPENSSL_NO_EC
  1196.     OPENSSL_free(s->ext.ecpointformats);

#1455
crypto/bn/bn_nist.c:1213: error: Integer Overflow L2
  (0 - [0, 1]):unsigned64.
  1211. 
  1212.     bn_add_words(r_d, r_d, t_d, BN_NIST_521_TOP);
  1213.     mask =
            ^
  1214.         0 - (PTR_SIZE_INT) bn_sub_words(t_d, r_d, _nist_p_521,
  1215.                                         BN_NIST_521_TOP);

#1456
test/ectest.c:1179: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 43 by call to `BN_hex2bn`.
  1177. 
  1178. 
  1179.     BN_hex2bn(&sect163r2_field,
            ^
  1180.                 "08000000000000000000000000000000"
  1181.                 "00000000C9");

#1457
test/ectest.c:1179: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 43 by call to `BN_hex2bn`.
  1177. 
  1178. 
  1179.     BN_hex2bn(&sect163r2_field,
            ^
  1180.                 "08000000000000000000000000000000"
  1181.                 "00000000C9");

#1458
crypto/ec/ec_lib.c:1212: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  1210. 
  1211.  err:
  1212.     BN_CTX_end(ctx);
            ^
  1213. #ifndef FIPS_MODE
  1214.     BN_CTX_free(new_ctx);

#1459
crypto/ec/ec_lib.c:1200: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  1198.     if (!BN_set_word(e, 2))
  1199.         goto err;
  1200.     if (!BN_sub(e, group->order, e))
                 ^
  1201.         goto err;
  1202.     /*-

#1460
test/sslapitest.c:1208: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  1206.         goto end;
  1207. 
  1208.     SSL_free(clientssl);
            ^
  1209.     clientssl = NULL;
  1210. 

#1461
test/sslapitest.c:1208: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  1206.         goto end;
  1207. 
  1208.     SSL_free(clientssl);
            ^
  1209.     clientssl = NULL;
  1210. 

#1462
test/sslapitest.c:1298: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  1296. 
  1297.  end:
  1298.     SSL_free(serverssl);
            ^
  1299.     SSL_free(clientssl);
  1300.     SSL_CTX_free(sctx);

#1463
test/sslapitest.c:1298: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  1296. 
  1297.  end:
  1298.     SSL_free(serverssl);
            ^
  1299.     SSL_free(clientssl);
  1300.     SSL_CTX_free(sctx);

#1464
test/bntest.c:1205: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  1203.             || !TEST_true(BN_add(ret, a, a))
  1204.             || !equalBN("A + A", lshift1, ret)
  1205.             || !TEST_true(BN_mul(ret, a, two, ctx))
                        ^
  1206.             || !equalBN("A * 2", lshift1, ret)
  1207.             || !TEST_true(BN_div(ret, remainder, lshift1, two, ctx))

#1465
test/bntest.c:1203: error: Integer Overflow L2
  ([0, 1] - [0, 1]):unsigned64 by call to `BN_add`.
  1201. 
  1202.     if (!TEST_true(BN_set_word(two, 2))
  1203.             || !TEST_true(BN_add(ret, a, a))
                        ^
  1204.             || !equalBN("A + A", lshift1, ret)
  1205.             || !TEST_true(BN_mul(ret, a, two, ctx))

#1466
test/bntest.c:1204: error: Integer Overflow L2
  ([0, 8] - 1):unsigned64 by call to `equalBN`.
  1202.     if (!TEST_true(BN_set_word(two, 2))
  1203.             || !TEST_true(BN_add(ret, a, a))
  1204.             || !equalBN("A + A", lshift1, ret)
                        ^
  1205.             || !TEST_true(BN_mul(ret, a, two, ctx))
  1206.             || !equalBN("A * 2", lshift1, ret)

#1467
crypto/ec/ec_asn1.c:1198: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_point2oct`.
  1196.     }
  1197. 
  1198.     buf_len = EC_POINT_point2oct(a->group, a->pub_key,
                      ^
  1199.                                  a->conv_form, NULL, 0, NULL);
  1200. 

#1468
crypto/ec/ec_asn1.c:1212: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_POINT_point2oct`.
  1210.         new_buffer = 1;
  1211.     }
  1212.     if (!EC_POINT_point2oct(a->group, a->pub_key, a->conv_form,
                 ^
  1213.                             *out, buf_len, NULL)) {
  1214.         ECerr(EC_F_I2O_ECPUBLICKEY, ERR_R_EC_LIB);

#1469
ssl/statem/extensions.c:1218: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `construct_ca_names`.
  1216.     }
  1217. 
  1218.     if (!construct_ca_names(s, ca_sk, pkt)) {
                 ^
  1219.         /* SSLfatal() already called */
  1220.         return EXT_RETURN_FAIL;

#1470
test/evp_test.c:1343: error: Integer Overflow L2
  ([0, 5] - 1):unsigned64.
  1341.     t->err = NULL;
  1342.  err:
  1343.     while (params_n-- > params_n_allocstart) {
                   ^
  1344.         OPENSSL_free(params[params_n].data);
  1345.     }

#1471
test/evp_extra_test.c:1285: error: Dead Store
  The value written to &param (type ossl_param_st*) is never used.
  1283.     *param++ = OSSL_PARAM_construct_size_t(OSSL_SIGNATURE_PARAM_DIGEST_SIZE,
  1284.                                            &mdsize);
  1285.     *param++ = OSSL_PARAM_construct_end();
             ^
  1286. 
  1287.     if (!TEST_true(EVP_PKEY_CTX_set_params(ctx, ourparams)))

#1472
test/evp_extra_test.c:1327: error: Dead Store
  The value written to &param (type ossl_param_st*) is never used.
  1325.     *param++ = OSSL_PARAM_construct_octet_string(OSSL_DIGEST_PARAM_SSL3_MS,
  1326.                                                  ssl3ms, sizeof(ssl3ms));
  1327.     *param++ = OSSL_PARAM_construct_end();
             ^
  1328. 
  1329.     if (!TEST_true(EVP_MD_CTX_set_params(mdctx, ourparams)))

#1473
crypto/x509/x509_vfy.c:1234: error: Null Dereference
  pointer `crl_issuer` last assigned on line 1233 could be null and is dereferenced by call to `X509_get_subject_name()` at line 1234, column 27.
  1232.     for (cidx++; cidx < sk_X509_num(ctx->chain); cidx++) {
  1233.         crl_issuer = sk_X509_value(ctx->chain, cidx);
  1234.         if (X509_NAME_cmp(X509_get_subject_name(crl_issuer), cnm))
                                  ^
  1235.             continue;
  1236.         if (X509_check_akid(crl_issuer, crl->akid) == X509_V_OK) {

#1474
crypto/modes/gcm128.c:1252: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo].
  1250.             return 0;
  1251.         }
  1252.         memcpy(ctx->Xn, ctx->Xi.c, sizeof(ctx->Xi));
                ^
  1253.         ctx->Xi.u[0] = 0;
  1254.         ctx->Xi.u[1] = 0;

#1475
ssl/record/ssl3_record.c:1269: error: Dead Store
  The value written to &j (type unsigned long) is never used.
  1267.         header[j++] = rec->type;
  1268.         header[j++] = (unsigned char)(rec->length >> 8);
  1269.         header[j++] = (unsigned char)(rec->length & 0xff);
                       ^
  1270. 
  1271.         /* Final param == is SSLv3 */

#1476
ssl/statem/extensions_clnt.c:1241: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  1239.     /* construct extension - 0 length, no contents */
  1240.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_post_handshake_auth)
  1241.             || !WPACKET_start_sub_packet_u16(pkt)
                        ^
  1242.             || !WPACKET_close(pkt)) {
  1243.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1477
apps/lib/apps.c:1279: error: Null Dereference
  pointer `in` last assigned on line 1250 could be null and is dereferenced by call to `BIO_free()` at line 1279, column 5.
  1277.     }
  1278.  err:
  1279.     BIO_free(in);
            ^
  1280.     ASN1_INTEGER_free(ai);
  1281.     return ret;

#1478
crypto/store/loader_file.c:1299: error: Dead Store
  The value written to &matchcount (type int) is never used.
  1297.         } while (result == NULL && !file_eof(ctx));
  1298.     } else {
  1299.         int matchcount = -1;
                ^
  1300. 
  1301.      again:

#1479
ssl/statem/extensions.c:1370: error: Buffer Overrun L2
  Offset: [0, max(10, `s->ext.supportedgroups_len`)] (<= [0, 1] + [0, -1+max(10, `s->ext.supportedgroups_len`)]) Size: 2.
  1368.                  */
  1369.                 for (i = 0; i < num_groups; i++) {
  1370.                     group_id = pgroups[i];
                                       ^
  1371. 
  1372.                     if (check_in_list(s, group_id, clntgroups, clnt_num_groups,

#1480
crypto/bn/bn_exp.c:1357: error: Dead Store
  The value written to &j (type int) is never used.
  1355.          * set bit before the end of the window
  1356.          */
  1357.         j = wstart;
                ^
  1358.         wvalue = 1;
  1359.         wend = 0;

#1481
crypto/bn/bn_exp.c:1281: error: Dead Store
  The value written to &start (type int) is never used.
  1279. {
  1280.     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
  1281.     int start = 1;
            ^
  1282.     BIGNUM *d;
  1283.     /* Table of variables obtained from 'ctx' */

#1482
crypto/bn/bn_exp.c:1322: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  1320.     window = BN_window_bits_for_exponent_size(bits);
  1321.     if (window > 1) {
  1322.         if (!BN_mod_mul(d, val[0], val[0], m, ctx))
                     ^
  1323.             goto err;           /* 2 */
  1324.         j = 1 << (window - 1);

#1483
crypto/bn/bn_exp.c:1345: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  1343.         if (BN_is_bit_set(p, wstart) == 0) {
  1344.             if (!start)
  1345.                 if (!BN_mod_mul(r, r, r, m, ctx))
                             ^
  1346.                     goto err;
  1347.             if (wstart == 0)

#1484
crypto/bn/bn_exp.c:1380: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  1378. 
  1379.         /* wvalue will be an odd number < 2^window */
  1380.         if (!BN_mod_mul(r, r, val[wvalue >> 1], m, ctx))
                     ^
  1381.             goto err;
  1382. 

#1485
crypto/bn/bn_exp.c:1322: error: Integer Overflow L2
  ([0, 4+max(0, `ctx->stack.depth`)] - 1):unsigned32 by call to `BN_mod_mul`.
  1320.     window = BN_window_bits_for_exponent_size(bits);
  1321.     if (window > 1) {
  1322.         if (!BN_mod_mul(d, val[0], val[0], m, ctx))
                     ^
  1323.             goto err;           /* 2 */
  1324.         j = 1 << (window - 1);

#1486
ssl/statem/statem_srvr.c:1282: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1280.     /* Always use DTLS 1.0 version: see RFC 6347 */
  1281.     if (!WPACKET_put_bytes_u16(pkt, DTLS1_VERSION)
  1282.             || !WPACKET_sub_memcpy_u8(pkt, cookie, cookie_len))
                        ^
  1283.         return 0;
  1284. 

#1487
ssl/statem/statem_srvr.c:1282: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 3]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1280.     /* Always use DTLS 1.0 version: see RFC 6347 */
  1281.     if (!WPACKET_put_bytes_u16(pkt, DTLS1_VERSION)
  1282.             || !WPACKET_sub_memcpy_u8(pkt, cookie, cookie_len))
                        ^
  1283.         return 0;
  1284. 

#1488
apps/lib/apps.c:1306: error: Dead Store
  The value written to &j (type int) is never used.
  1304.     else {
  1305. #ifndef OPENSSL_SYS_VMS
  1306.         j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", serialfile, suffix);
                ^
  1307. #else
  1308.         j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s-%s", serialfile, suffix);

#1489
test/bntest.c:1307: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_sqr`.
  1305. 
  1306.     BN_zero(zero);
  1307.     if (!TEST_true(BN_sqr(ret, a, ctx))
                 ^
  1308.             || !equalBN("A^2", square, ret)
  1309.             || !TEST_true(BN_mul(ret, a, a, ctx))

#1490
test/bntest.c:1308: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `equalBN`.
  1306.     BN_zero(zero);
  1307.     if (!TEST_true(BN_sqr(ret, a, ctx))
  1308.             || !equalBN("A^2", square, ret)
                        ^
  1309.             || !TEST_true(BN_mul(ret, a, a, ctx))
  1310.             || !equalBN("A * A", square, ret)

#1491
ssl/statem/statem_clnt.c:1315: error: Integer Overflow L2
  ([0, +oo] - [0, 256]):unsigned64 by call to `PACKET_copy_bytes`.
  1313.     }
  1314. 
  1315.     if (!PACKET_copy_bytes(&cookiepkt, s->d1->cookie, cookie_len)) {
                 ^
  1316.         SSLfatal(s, SSL_AD_DECODE_ERROR, SSL_F_DTLS_PROCESS_HELLO_VERIFY,
  1317.                  SSL_R_LENGTH_MISMATCH);

#1492
apps/req.c:1317: error: Dead Store
  The value written to &p (type char*) is never used.
  1315.         int mval;
  1316.         v = sk_CONF_VALUE_value(dn_sk, i);
  1317.         p = q = NULL;
                ^
  1318.         type = v->name;
  1319.         /*

#1493
ssl/statem/extensions_srvr.c:1317: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  1315.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_renegotiate)
  1316.             || !WPACKET_start_sub_packet_u16(pkt)
  1317.             || !WPACKET_start_sub_packet_u8(pkt)
                        ^
  1318.             || !WPACKET_memcpy(pkt, s->s3.previous_client_finished,
  1319.                                s->s3.previous_client_finished_len)

#1494
ssl/statem/extensions_srvr.c:1318: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 5]):unsigned64 by call to `WPACKET_memcpy`.
  1316.             || !WPACKET_start_sub_packet_u16(pkt)
  1317.             || !WPACKET_start_sub_packet_u8(pkt)
  1318.             || !WPACKET_memcpy(pkt, s->s3.previous_client_finished,
                        ^
  1319.                                s->s3.previous_client_finished_len)
  1320.             || !WPACKET_memcpy(pkt, s->s3.previous_server_finished,

#1495
ssl/statem/extensions_srvr.c:1320: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + `s->s3.previous_client_finished_len` + 5]):unsigned64 by call to `WPACKET_memcpy`.
  1318.             || !WPACKET_memcpy(pkt, s->s3.previous_client_finished,
  1319.                                s->s3.previous_client_finished_len)
  1320.             || !WPACKET_memcpy(pkt, s->s3.previous_server_finished,
                        ^
  1321.                                s->s3.previous_server_finished_len)
  1322.             || !WPACKET_close(pkt)

#1496
apps/ocsp.c:1360: error: Null Dereference
  pointer `bufbio` last assigned on line 1338 could be null and is dereferenced by call to `BIO_free()` at line 1360, column 5.
  1358.  err:
  1359.     BIO_free_all(acbio);
  1360.     BIO_free(bufbio);
            ^
  1361.     return NULL;
  1362. # endif

#1497
ssl/statem/extensions_srvr.c:1341: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  1339. 
  1340.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_server_name)
  1341.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                        ^
  1342.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_STOC_SERVER_NAME,
  1343.                  ERR_R_INTERNAL_ERROR);

#1498
apps/lib/apps.c:1349: error: Dead Store
  The value written to &j (type int) is never used.
  1347.     }
  1348. #ifndef OPENSSL_SYS_VMS
  1349.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", serialfile, new_suffix);
            ^
  1350.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.%s", serialfile, old_suffix);
  1351. #else

#1499
apps/lib/apps.c:1350: error: Dead Store
  The value written to &j (type int) is never used.
  1348. #ifndef OPENSSL_SYS_VMS
  1349.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", serialfile, new_suffix);
  1350.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.%s", serialfile, old_suffix);
            ^
  1351. #else
  1352.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s-%s", serialfile, new_suffix);

#1500
test/sslapitest.c:1521: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  1519. 
  1520.     SSL_free(serverssl1);
  1521.     SSL_free(clientssl1);
            ^
  1522.     serverssl1 = clientssl1 = NULL;
  1523.     SSL_free(serverssl2);

#1501
test/sslapitest.c:1521: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  1519. 
  1520.     SSL_free(serverssl1);
  1521.     SSL_free(clientssl1);
            ^
  1522.     serverssl1 = clientssl1 = NULL;
  1523.     SSL_free(serverssl2);

#1502
test/sslapitest.c:1609: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  1607. 
  1608.  end:
  1609.     SSL_free(serverssl1);
            ^
  1610.     SSL_free(clientssl1);
  1611.     SSL_free(serverssl2);

#1503
test/sslapitest.c:1404: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  1402.     if (!TEST_true(create_ssl_objects(sctx, cctx, &serverssl2,
  1403.                                       &clientssl2, NULL, NULL))
  1404.             || !TEST_true(SSL_set_session(clientssl2, sess1))
                        ^
  1405.             || !TEST_true(create_ssl_connection(serverssl2, clientssl2,
  1406.                                                 SSL_ERROR_NONE))

#1504
test/sslapitest.c:1457: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  1455.      * See SSL_set_session() documentation.
  1456.      */
  1457.     if (!TEST_true(SSL_set_session(clientssl2, sess1)))
                 ^
  1458.         goto end;
  1459.     if (use_ext_cache

#1505
crypto/ec/ec_asn1.c:1370: error: Integer Overflow L2
  ([2, 2147483646] + [0, 2147483644]):signed32 by call to `ASN1_object_size`.
  1368.     i = i2d_ASN1_INTEGER(&bs, NULL);
  1369.     i += i;                     /* r and s */
  1370.     ret = ASN1_object_size(1, i, V_ASN1_SEQUENCE);
                  ^
  1371.     return ret;
  1372. }

#1506
ssl/statem/extensions_srvr.c:1364: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  1362.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_max_fragment_length)
  1363.         || !WPACKET_start_sub_packet_u16(pkt)
  1364.         || !WPACKET_put_bytes_u8(pkt, s->session->ext.max_fragment_len_mode)
                    ^
  1365.         || !WPACKET_close(pkt)) {
  1366.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1507
test/bntest.c:1369: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  1367.     BN_zero(zero);
  1368. 
  1369.     if (!TEST_true(BN_mul(ret, a, b, ctx))
                 ^
  1370.             || !equalBN("A * B", product, ret)
  1371.             || !TEST_true(BN_div(ret, remainder, product, a, ctx))

#1508
ssl/statem/extensions_srvr.c:1392: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1390.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_ec_point_formats)
  1391.             || !WPACKET_start_sub_packet_u16(pkt)
  1392.             || !WPACKET_sub_memcpy_u8(pkt, plist, plistlen)
                        ^
  1393.             || !WPACKET_close(pkt)) {
  1394.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1509
ssl/statem/extensions_srvr.c:1392: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 5]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1390.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_ec_point_formats)
  1391.             || !WPACKET_start_sub_packet_u16(pkt)
  1392.             || !WPACKET_sub_memcpy_u8(pkt, plist, plistlen)
                        ^
  1393.             || !WPACKET_close(pkt)) {
  1394.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1510
ssl/statem/statem_srvr.c:1501: error: Integer Overflow L2
  ([0, +oo] - [0, 32]):unsigned64 by call to `PACKET_copy_bytes`.
  1499.                         ? SSL3_RANDOM_SIZE : challenge_len;
  1500.         memset(clienthello->random, 0, SSL3_RANDOM_SIZE);
  1501.         if (!PACKET_copy_bytes(&challenge,
                     ^
  1502.                                clienthello->random + SSL3_RANDOM_SIZE -
  1503.                                challenge_len, challenge_len)

#1511
ssl/statem/statem_srvr.c:1483: error: Integer Overflow L2
  ([0, `pkt->remaining`] - [0, 32]):unsigned64 by call to `PACKET_copy_bytes`.
  1481.         if (!PACKET_get_sub_packet(pkt, &clienthello->ciphersuites,
  1482.                                    ciphersuite_len)
  1483.             || !PACKET_copy_bytes(pkt, clienthello->session_id, session_id_len)
                        ^
  1484.             || !PACKET_get_sub_packet(pkt, &challenge, challenge_len)
  1485.             /* No extensions. */

#1512
crypto/ec/ecp_smpl.c:1414: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_CTX_end`.
  1412. 
  1413.  err:
  1414.     BN_CTX_end(ctx);
            ^
  1415.     BN_CTX_free(new_ctx);
  1416.     return ret;

#1513
crypto/ec/ecp_smpl.c:1395: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range_ex`.
  1393. 
  1394.     do {
  1395.         if (!BN_priv_rand_range_ex(e, group->field, ctx))
                     ^
  1396.         goto err;
  1397.     } while (BN_is_zero(e));

#1514
test/bntest.c:1458: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `equalBN`.
  1456.                         && !TEST_true(BN_add(nnmod, nnmod, b)))
  1457.                 || !TEST_true(BN_nnmod(ret, a, b, ctx))
  1458.                 || !equalBN("A % B (non-negative)", nnmod, ret))
                            ^
  1459.             goto err;
  1460.     }

#1515
test/bntest.c:1425: error: Integer Overflow L2
  (0 - [0, 18446744073709551615]):unsigned64 by call to `BN_div_word`.
  1423.         if (!TEST_ptr(BN_copy(ret, a)))
  1424.             goto err;
  1425.         ret_word = BN_div_word(ret, b_word);
                           ^
  1426.         if (ret_word != remainder_word) {
  1427. #ifdef BN_DEC_FMT1

#1516
test/bntest.c:1406: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_div`.
  1404.         goto err;
  1405. 
  1406.     if (!TEST_true(BN_div(ret, ret2, a, b, ctx))
                 ^
  1407.             || !equalBN("A / B", quotient, ret)
  1408.             || !equalBN("A % B", remainder, ret2)

#1517
test/bntest.c:1410: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_add`.
  1408.             || !equalBN("A % B", remainder, ret2)
  1409.             || !TEST_true(BN_mul(ret, quotient, b, ctx))
  1410.             || !TEST_true(BN_add(ret, ret, remainder))
                        ^
  1411.             || !equalBN("Quotient * B + Remainder", a, ret))
  1412.         goto err;

#1518
ssl/t1_lib.c:1409: error: Dead Store
  The value written to &ret (type int) is never used.
  1407.     const unsigned char *p;
  1408.     int slen, renew_ticket = 0, declen;
  1409.     SSL_TICKET_STATUS ret = SSL_TICKET_FATAL_ERR_OTHER;
            ^
  1410.     size_t mlen;
  1411.     unsigned char tick_hmac[EVP_MAX_MD_SIZE];

#1519
ssl/t1_lib.c:1519: error: Integer Overflow L2
  (0 - [-oo, 32]):unsigned64 by call to `EVP_DecryptUpdate`.
  1517.     eticklen -= TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx);
  1518.     sdec = OPENSSL_malloc(eticklen);
  1519.     if (sdec == NULL || EVP_DecryptUpdate(ctx, sdec, &slen, p,
                                ^
  1520.                                           (int)eticklen) <= 0) {
  1521.         OPENSSL_free(sdec);

#1520
ssl/statem/extensions_srvr.c:1425: error: Buffer Overrun L2
  Offset: [0, max(10, `s->ext.supportedgroups_len`)] (<= [0, 1] + [0, -1+max(10, `s->ext.supportedgroups_len`)]) Size: 2.
  1423.     /* Copy group ID if supported */
  1424.     for (i = 0; i < numgroups; i++) {
  1425.         uint16_t group = groups[i];
                                 ^
  1426. 
  1427.         if (tls_valid_group(s, group, SSL_version(s))

#1521
apps/speed.c:2802: error: Buffer Overrun L1
  Offset: 32 Size: 4.
  2800.                                    "CMAC name");
  2801.         sprintf(evp_cmac_name, "CMAC(%s)", cipher_name);
  2802.         names[D_EVP_CMAC] = evp_cmac_name;
                ^
  2803. 
  2804.         for (i = 0; i < loopargs_len; i++) {

#1522
apps/speed.c:1946: error: Buffer Overrun L1
  Offset: 9 Size: 3 by call to `DES_set_key_unchecked`.
  1944.         DES_set_key_unchecked(&keys[0], &sch[0]);
  1945.         DES_set_key_unchecked(&keys[1], &sch[1]);
  1946.         DES_set_key_unchecked(&keys[2], &sch[2]);
                ^
  1947.     }
  1948. #endif

#1523
apps/speed.c:1984: error: Buffer Overrun L1
  Offset: [16, 72] Size: 16 by call to `BF_set_key`.
  1982. #ifndef OPENSSL_NO_BF
  1983.     if (doit[D_CBC_BF])
  1984.         BF_set_key(&bf_ks, 16, key16);
                ^
  1985. #endif
  1986. #ifndef OPENSSL_NO_CAST

#1524
apps/speed.c:2915: error: Buffer Overrun L2
  Offset added: [1, 13] (<= [0, 6] + [1, 7]) Size: 7.
  2913.         if (rsa_count <= 1) {
  2914.             /* if longer than 10s, don't do any more */
  2915.             stop_it(rsa_doit, testnum);
                    ^
  2916.         }
  2917.     }

#1525
apps/speed.c:3331: error: Buffer Overrun L2
  Offset added: [1, 3] (<= [0, 1] + [1, 2]) Size: 2.
  3329.             if (rsa_count <= 1) {
  3330.                 /* if longer than 10s, don't do any more */
  3331.                 stop_it(eddsa_doit, testnum);
                        ^
  3332.             }
  3333.         }

#1526
apps/speed.c:3069: error: Buffer Overrun L2
  Offset added: [1, 43] (<= [0, 21] + [1, 22]) Size: 22.
  3067.             if (rsa_count <= 1) {
  3068.                 /* if longer than 10s, don't do any more */
  3069.                 stop_it(ecdsa_doit, testnum);
                        ^
  3070.             }
  3071.         }

#1527
apps/speed.c:3229: error: Buffer Overrun L2
  Offset added: [1, 47] (<= [0, 23] + [1, 24]) Size: 24.
  3227.         if (rsa_count <= 1) {
  3228.             /* if longer than 10s, don't do any more */
  3229.             stop_it(ecdh_doit, testnum);
                    ^
  3230.         }
  3231.     }

#1528
apps/speed.c:2985: error: Buffer Overrun L2
  Offset added: [1, 5] (<= [0, 2] + [1, 3]) Size: 3.
  2983.         if (rsa_count <= 1) {
  2984.             /* if longer than 10s, don't do any more */
  2985.             stop_it(dsa_doit, testnum);
                    ^
  2986.         }
  2987.     }

#1529
apps/speed.c:1973: error: Buffer Overrun L2
  Offset: [0, 127] Size: 16 by call to `RC2_set_key`.
  1971. #ifndef OPENSSL_NO_RC2
  1972.     if (doit[D_CBC_RC2])
  1973.         RC2_set_key(&rc2_ks, 16, key16, 128);
                ^
  1974. #endif
  1975. #ifndef OPENSSL_NO_RC5

#1530
apps/speed.c:3519: error: Buffer Overrun L2
  Offset: [0, 32] Size: 4.
  3517.             continue;
  3518.         if (mr)
  3519.             printf("+F:%u:%s", k, names[k]);
                                          ^
  3520.         else
  3521.             printf("%-13s", names[k]);

#1531
apps/speed.c:1984: error: Buffer Overrun L2
  Offset: [0, 71] Size: 16 by call to `BF_set_key`.
  1982. #ifndef OPENSSL_NO_BF
  1983.     if (doit[D_CBC_BF])
  1984.         BF_set_key(&bf_ks, 16, key16);
                ^
  1985. #endif
  1986. #ifndef OPENSSL_NO_CAST

#1532
apps/speed.c:1591: error: Buffer Overrun L3
  Offset: [2, 10] Size: [3, 11] by call to `opt_help`.
  1589.             goto end;
  1590.         case OPT_HELP:
  1591.             opt_help(speed_options);
                    ^
  1592.             ret = 0;
  1593.             goto end;

#1533
apps/speed.c:3268: error: Dead Store
  The value written to &rsa_count (type long) is never used.
  3266.             BIO_printf(bio_err, "EdDSA failure.\n");
  3267.             ERR_print_errors(bio_err);
  3268.             rsa_count = 1;
                    ^
  3269.         } else {
  3270.             for (i = 0; i < loopargs_len; i++) {

#1534
apps/speed.c:3402: error: Dead Store
  The value written to &rsa_count (type long) is never used.
  3400.             BIO_printf(bio_err, "SM2 init failure.\n");
  3401.             ERR_print_errors(bio_err);
  3402.             rsa_count = 1;
                    ^
  3403.         } else {
  3404.             for (i = 0; i < loopargs_len; i++) {

#1535
apps/speed.c:3010: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_KEY_precompute_mult`.
  3008.         } else {
  3009.             for (i = 0; i < loopargs_len; i++) {
  3010.                 EC_KEY_precompute_mult(loopargs[i].ecdsa[testnum], NULL);
                        ^
  3011.                 /* Perform ECDSA signature test */
  3012.                 EC_KEY_generate_key(loopargs[i].ecdsa[testnum]);

#1536
test/handshake_helper.c:1433: error: Dead Store
  The value written to &status (type int) is never used.
  1431.     int client_turn = 1, client_turn_count = 0, client_wait_count = 0;
  1432.     connect_phase_t phase = HANDSHAKE;
  1433.     handshake_status_t status = HANDSHAKE_RETRY;
            ^
  1434.     const unsigned char* tick = NULL;
  1435.     size_t tick_len = 0;

#1537
test/handshake_helper.c:1738: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `peer_free_data`.
  1736. 
  1737.     peer_free_data(&server);
  1738.     peer_free_data(&client);
            ^
  1739.     return ret;
  1740. }

#1538
test/handshake_helper.c:1738: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `peer_free_data`.
  1736. 
  1737.     peer_free_data(&server);
  1738.     peer_free_data(&client);
            ^
  1739.     return ret;
  1740. }

#1539
test/handshake_helper.c:1492: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  1490.                     && !TEST_true(SSL_CTX_add_session(server_ctx,
  1491.                                                       serv_sess_in)))
  1492.                 || !TEST_true(SSL_set_session(client.ssl, session_in)))
                            ^
  1493.             goto err;
  1494.         sess_id_len = 0;

#1540
crypto/ec/ecp_smpl.c:1443: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_priv_rand_range_ex`.
  1441.     /* make sure lambda is not zero */
  1442.     do {
  1443.         if (!BN_priv_rand_range_ex(lambda, group->field, ctx)) {
                     ^
  1444.             ECerr(EC_F_EC_GFP_SIMPLE_BLIND_COORDINATES, ERR_R_BN_LIB);
  1445.             goto err;

#1541
ssl/statem/extensions.c:1561: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `PACKET_forward`.
  1559.             /* Find how many bytes are left after the first two messages */
  1560.             if (!PACKET_buf_init(&hashprefix, hdata, hdatalen)
  1561.                     || !PACKET_forward(&hashprefix, 1)
                                ^
  1562.                     || !PACKET_get_length_prefixed_3(&hashprefix, &msg)
  1563.                     || !PACKET_forward(&hashprefix, 1)

#1542
ssl/statem/extensions_srvr.c:1480: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  1478. 
  1479.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_session_ticket)
  1480.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                        ^
  1481.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  1482.                  SSL_F_TLS_CONSTRUCT_STOC_SESSION_TICKET, ERR_R_INTERNAL_ERROR);

#1543
test/bntest.c:1486: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_mul`.
  1484.         goto err;
  1485. 
  1486.     if (!TEST_true(BN_mod_mul(ret, a, b, m, ctx))
                 ^
  1487.             || !equalBN("A * B (mod M)", mod_mul, ret))
  1488.         goto err;

#1544
crypto/ec/ecp_smpl.c:1508: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_sub_quick`.
  1506.         || !group->meth->field_sqr(group, t3, p->Z, ctx)
  1507.         || !group->meth->field_mul(group, t4, t3, group->a, ctx)
  1508.         || !BN_mod_sub_quick(t5, t2, t4, group->field)
                    ^
  1509.         || !BN_mod_add_quick(t2, t2, t4, group->field)
  1510.         || !group->meth->field_sqr(group, t5, t5, ctx)

#1545
ssl/statem/extensions_srvr.c:1505: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  1503. 
  1504.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_status_request)
  1505.             || !WPACKET_start_sub_packet_u16(pkt)) {
                        ^
  1506.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  1507.                  SSL_F_TLS_CONSTRUCT_STOC_STATUS_REQUEST, ERR_R_INTERNAL_ERROR);

#1546
ssl/statem/extensions_srvr.c:1516: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `tls_construct_cert_status_body`.
  1514.      * separate message
  1515.      */
  1516.     if (SSL_IS_TLS13(s) && !tls_construct_cert_status_body(s, pkt)) {
                                    ^
  1517.        /* SSLfatal() already called */
  1518.        return EXT_RETURN_FAIL;

#1547
apps/lib/apps.c:1504: error: Dead Store
  The value written to &j (type int) is never used.
  1502.     }
  1503. #ifndef OPENSSL_SYS_VMS
  1504.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr", dbfile);
            ^
  1505.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.attr.%s", dbfile, suffix);
  1506.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", dbfile, suffix);

#1548
apps/lib/apps.c:1505: error: Dead Store
  The value written to &j (type int) is never used.
  1503. #ifndef OPENSSL_SYS_VMS
  1504.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr", dbfile);
  1505.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.attr.%s", dbfile, suffix);
            ^
  1506.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", dbfile, suffix);
  1507. #else

#1549
apps/lib/apps.c:1506: error: Dead Store
  The value written to &j (type int) is never used.
  1504.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr", dbfile);
  1505.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.attr.%s", dbfile, suffix);
  1506.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", dbfile, suffix);
            ^
  1507. #else
  1508.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s-attr", dbfile);

#1550
test/poly1305_internal_test.c:1533: error: Buffer Overrun L2
  Offset: [1, 29] Size: 16 by call to `Poly1305_Final`.
  1531.         Poly1305_Update(&poly1305, in, 1);
  1532.         Poly1305_Update(&poly1305, in+1, inlen-1);
  1533.         Poly1305_Final(&poly1305, out);
                ^
  1534. 
  1535.         if (!TEST_mem_eq(out, expectedlen, expected, expectedlen)) {

#1551
test/poly1305_internal_test.c:1531: error: Integer Overflow L2
  ([-14, +oo] - [-15, 15]):unsigned64 by call to `Poly1305_Update`.
  1529.     if (inlen > 16) {
  1530.         Poly1305_Init(&poly1305, key);
  1531.         Poly1305_Update(&poly1305, in, 1);
                ^
  1532.         Poly1305_Update(&poly1305, in+1, inlen-1);
  1533.         Poly1305_Final(&poly1305, out);

#1552
test/bntest.c:1555: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 3 by call to `BN_hex2bn`.
  1553.     /* Regression test for carry propagation bug in sqr8x_reduction */
  1554.     BN_hex2bn(&a, "050505050505");
  1555.     BN_hex2bn(&b, "02");
            ^
  1556.     BN_hex2bn(&c,
  1557.         "4141414141414141414141274141414141414141414141414141414141414141"

#1553
test/bntest.c:1555: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 3 by call to `BN_hex2bn`.
  1553.     /* Regression test for carry propagation bug in sqr8x_reduction */
  1554.     BN_hex2bn(&a, "050505050505");
  1555.     BN_hex2bn(&b, "02");
            ^
  1556.     BN_hex2bn(&c,
  1557.         "4141414141414141414141274141414141414141414141414141414141414141"

#1554
test/bntest.c:1540: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_exp`.
  1538.         goto err;
  1539. 
  1540.     if (!TEST_true(BN_mod_exp(ret, a, e, m, ctx))
                 ^
  1541.             || !equalBN("A ^ E (mod M)", mod_exp, ret))
  1542.         goto err;

#1555
ssl/statem/extensions_srvr.c:1548: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1546.     if (ret == SSL_TLSEXT_ERR_OK) {
  1547.         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_next_proto_neg)
  1548.                 || !WPACKET_sub_memcpy_u16(pkt, npa, npalen)) {
                            ^
  1549.             SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  1550.                      SSL_F_TLS_CONSTRUCT_STOC_NEXT_PROTO_NEG,

#1556
apps/lib/apps.c:1553: error: Dead Store
  The value written to &j (type int) is never used.
  1551.     }
  1552. #ifndef OPENSSL_SYS_VMS
  1553.     j = BIO_snprintf(buf[4], sizeof(buf[4]), "%s.attr", dbfile);
            ^
  1554.     j = BIO_snprintf(buf[3], sizeof(buf[3]), "%s.attr.%s", dbfile, old_suffix);
  1555.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr.%s", dbfile, new_suffix);

#1557
apps/lib/apps.c:1554: error: Dead Store
  The value written to &j (type int) is never used.
  1552. #ifndef OPENSSL_SYS_VMS
  1553.     j = BIO_snprintf(buf[4], sizeof(buf[4]), "%s.attr", dbfile);
  1554.     j = BIO_snprintf(buf[3], sizeof(buf[3]), "%s.attr.%s", dbfile, old_suffix);
            ^
  1555.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr.%s", dbfile, new_suffix);
  1556.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.%s", dbfile, old_suffix);

#1558
apps/lib/apps.c:1555: error: Dead Store
  The value written to &j (type int) is never used.
  1553.     j = BIO_snprintf(buf[4], sizeof(buf[4]), "%s.attr", dbfile);
  1554.     j = BIO_snprintf(buf[3], sizeof(buf[3]), "%s.attr.%s", dbfile, old_suffix);
  1555.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr.%s", dbfile, new_suffix);
            ^
  1556.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.%s", dbfile, old_suffix);
  1557.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", dbfile, new_suffix);

#1559
apps/lib/apps.c:1556: error: Dead Store
  The value written to &j (type int) is never used.
  1554.     j = BIO_snprintf(buf[3], sizeof(buf[3]), "%s.attr.%s", dbfile, old_suffix);
  1555.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr.%s", dbfile, new_suffix);
  1556.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.%s", dbfile, old_suffix);
            ^
  1557.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", dbfile, new_suffix);
  1558. #else

#1560
apps/lib/apps.c:1557: error: Dead Store
  The value written to &j (type int) is never used.
  1555.     j = BIO_snprintf(buf[2], sizeof(buf[2]), "%s.attr.%s", dbfile, new_suffix);
  1556.     j = BIO_snprintf(buf[1], sizeof(buf[1]), "%s.%s", dbfile, old_suffix);
  1557.     j = BIO_snprintf(buf[0], sizeof(buf[0]), "%s.%s", dbfile, new_suffix);
            ^
  1558. #else
  1559.     j = BIO_snprintf(buf[4], sizeof(buf[4]), "%s-attr", dbfile);

#1561
crypto/ec/ecp_smpl.c:1565: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_lshift_quick`.
  1563.         || !group->meth->field_mul(group, t0, t4, t0, ctx)
  1564.         || !group->meth->field_sqr(group, t1, t1, ctx)
  1565.         || !BN_mod_lshift_quick(t7, group->b, 2, group->field)
                    ^
  1566.         || !group->meth->field_mul(group, t1, t7, t1, ctx)
  1567.         || !BN_mod_lshift1_quick(t0, t0, group->field)

#1562
ssl/statem/extensions_srvr.c:1571: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 6]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1569.             || !WPACKET_start_sub_packet_u16(pkt)
  1570.             || !WPACKET_start_sub_packet_u16(pkt)
  1571.             || !WPACKET_sub_memcpy_u8(pkt, s->s3.alpn_selected,
                        ^
  1572.                                       s->s3.alpn_selected_len)
  1573.             || !WPACKET_close(pkt)

#1563
ssl/statem/extensions_srvr.c:1571: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 7]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1569.             || !WPACKET_start_sub_packet_u16(pkt)
  1570.             || !WPACKET_start_sub_packet_u16(pkt)
  1571.             || !WPACKET_sub_memcpy_u8(pkt, s->s3.alpn_selected,
                        ^
  1572.                                       s->s3.alpn_selected_len)
  1573.             || !WPACKET_close(pkt)

#1564
test/ectest.c:1628: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_GROUP_check_named_curve`.
  1626. 
  1627.     /* Passes because this is a valid curve */
  1628.     if (!TEST_int_eq(EC_GROUP_check_named_curve(group, 0, NULL), nid)
                 ^
  1629.         /* Only NIST curves pass */
  1630.         || !TEST_int_eq(EC_GROUP_check_named_curve(group, 1, NULL),

#1565
ssl/statem/extensions_srvr.c:1595: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 8]):unsigned64 by call to `WPACKET_put_bytes__`.
  1593.             || !WPACKET_put_bytes_u16(pkt, 2)
  1594.             || !WPACKET_put_bytes_u16(pkt, s->srtp_profile->id)
  1595.             || !WPACKET_put_bytes_u8(pkt, 0)
                        ^
  1596.             || !WPACKET_close(pkt)) {
  1597.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_STOC_USE_SRTP,

#1566
ssl/statem/statem_srvr.c:1728: error: Integer Overflow L2
  ([1, `s->clienthello->ciphersuites.remaining`] - [2, 3]):unsigned64 by call to `bytes_to_cipher_list`.
  1726.     if (!ssl_cache_cipherlist(s, &clienthello->ciphersuites,
  1727.                               clienthello->isv2) ||
  1728.         !bytes_to_cipher_list(s, &clienthello->ciphersuites, &ciphers, &scsvs,
                 ^
  1729.                               clienthello->isv2, 1)) {
  1730.         /* SSLfatal() already called */

#1567
test/bntest.c:1618: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mod_sqrt`.
  1616. 
  1617.     /* There are two possible answers. */
  1618.     if (!TEST_true(BN_mod_sqrt(ret, a, p, ctx))
                 ^
  1619.             || !TEST_true(BN_sub(ret2, p, ret)))
  1620.         goto err;

#1568
test/bntest.c:1619: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_sub`.
  1617.     /* There are two possible answers. */
  1618.     if (!TEST_true(BN_mod_sqrt(ret, a, p, ctx))
  1619.             || !TEST_true(BN_sub(ret2, p, ret)))
                        ^
  1620.         goto err;
  1621. 

#1569
ssl/statem/extensions_srvr.c:1625: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  1623. 
  1624.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_encrypt_then_mac)
  1625.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                        ^
  1626.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_STOC_ETM,
  1627.                  ERR_R_INTERNAL_ERROR);

#1570
crypto/ec/ecp_smpl.c:1654: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_mod_lshift1_quick`.
  1652. 
  1653.     if (t6 == NULL
  1654.         || !BN_mod_lshift1_quick(t0, p->Y, group->field)
                    ^
  1655.         || !group->meth->field_mul(group, t1, r->X, p->Z, ctx)
  1656.         || !group->meth->field_mul(group, t2, r->Z, s->Z, ctx)

#1571
crypto/modes/gcm128.c:1661: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo].
  1659.             return 0;
  1660.         }
  1661.         memcpy(ctx->Xn, ctx->Xi.c, sizeof(ctx->Xi));
                ^
  1662.         ctx->Xi.u[0] = 0;
  1663.         ctx->Xi.u[1] = 0;

#1572
ssl/statem/extensions_srvr.c:1641: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_put_bytes__`.
  1639. 
  1640.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_extended_master_secret)
  1641.             || !WPACKET_put_bytes_u16(pkt, 0)) {
                        ^
  1642.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_STOC_EMS,
  1643.                  ERR_R_INTERNAL_ERROR);

#1573
test/bntest.c:1648: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_gcd`.
  1646.         goto err;
  1647. 
  1648.     if (!TEST_true(BN_gcd(ret, a, b, ctx))
                 ^
  1649.             || !equalBN("gcd(A,B)", gcd, ret))
  1650.         goto err;

#1574
apps/lib/apps.c:1696: error: Dead Store
  The value written to &bp (type char*) is never used.
  1694.             }
  1695.         }
  1696.         *bp++ = '\0';
                 ^
  1697. 
  1698.         /* If not at EOS (must be + or /), move forward. */

#1575
apps/lib/apps.c:1649: error: Dead Store
  The value written to &cp (type char const *) is never used.
  1647.                    "/type0=value0/type1=value1/type2=... where characters may "
  1648.                    "be escaped by \\. This name is not in that format: '%s'\n",
  1649.                    --cp);
                           ^
  1650.         return NULL;
  1651.     }

#1576
ssl/statem/extensions_srvr.c:1663: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  1661.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_supported_versions)
  1662.             || !WPACKET_start_sub_packet_u16(pkt)
  1663.             || !WPACKET_put_bytes_u16(pkt, s->version)
                        ^
  1664.             || !WPACKET_close(pkt)) {
  1665.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1577
ssl/statem/extensions_srvr.c:1735: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 8]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  1733.     }
  1734. 
  1735.     if (!WPACKET_sub_memcpy_u16(pkt, encodedPoint, encoded_pt_len)
                 ^
  1736.             || !WPACKET_close(pkt)) {
  1737.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_STOC_KEY_SHARE,

#1578
test/bntest.c:1727: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 2 by call to `parsedecBN`.
  1725.     int st = 0;
  1726. 
  1727.     if (!TEST_int_eq(parsedecBN(&bn, "0"), 1)
                 ^
  1728.             || !TEST_BN_eq_word(bn, 0)
  1729.             || !TEST_BN_eq_zero(bn)

#1579
test/bntest.c:1730: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_le_zero`.
  1728.             || !TEST_BN_eq_word(bn, 0)
  1729.             || !TEST_BN_eq_zero(bn)
  1730.             || !TEST_BN_le_zero(bn)
                        ^
  1731.             || !TEST_BN_ge_zero(bn)
  1732.             || !TEST_BN_even(bn))

#1580
test/sslapitest.c:1769: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  1767.         SSL_shutdown(serverssl);
  1768.         SSL_free(serverssl);
  1769.         SSL_free(clientssl);
                ^
  1770.         serverssl = clientssl = NULL;
  1771.         SSL_SESSION_free(sesscache[i]);

#1581
test/sslapitest.c:1736: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_set_session`.
  1734.         if (!TEST_true(create_ssl_objects(sctx, cctx, &serverssl,
  1735.                                               &clientssl, NULL, NULL))
  1736.                 || !TEST_true(SSL_set_session(clientssl, sesscache[i])))
                            ^
  1737.             goto end;
  1738. 

#1582
test/sslapitest.c:1778: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `SSL_free`.
  1776. 
  1777.  end:
  1778.     SSL_free(clientssl);
            ^
  1779.     SSL_free(serverssl);
  1780.     return 0;

#1583
test/sslapitest.c:1778: error: Integer Overflow L2
  ([0, 1] - 1):unsigned64 by call to `SSL_free`.
  1776. 
  1777.  end:
  1778.     SSL_free(clientssl);
            ^
  1779.     SSL_free(serverssl);
  1780.     return 0;

#1584
ssl/statem/extensions_srvr.c:1791: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 19]):unsigned64 by call to `WPACKET_reserve_bytes`.
  1789.             || !WPACKET_put_bytes_u32(pkt, (unsigned int)time(NULL))
  1790.             || !WPACKET_start_sub_packet_u16(pkt)
  1791.             || !WPACKET_reserve_bytes(pkt, EVP_MAX_MD_SIZE, &hashval1)) {
                        ^
  1792.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_STOC_COOKIE,
  1793.                  ERR_R_INTERNAL_ERROR);

#1585
test/ectest.c:1777: error: Integer Overflow L2
  ([-oo, 9223372036854775807] + 1):signed32 by call to `EC_GROUP_new_from_ecparameters`.
  1775.     /* replace with group from explicit parameters */
  1776.     EC_GROUP_free(g);
  1777.     if (!TEST_ptr(g = EC_GROUP_new_from_ecparameters(p)))
                 ^
  1778.         goto err;
  1779. 

#1586
test/ectest.c:1780: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `EC_GROUP_check_named_curve`.
  1778.         goto err;
  1779. 
  1780.     if (!TEST_int_gt(rv = EC_GROUP_check_named_curve(g, 0, NULL), 0))
                 ^
  1781.         goto err;
  1782.     if (rv != nid) {

#1587
test/sslapitest.c:1811: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  1809.     SSL_shutdown(serverssl);
  1810.     SSL_free(serverssl);
  1811.     SSL_free(clientssl);
            ^
  1812.     SSL_CTX_free(sctx);
  1813.     SSL_CTX_free(cctx);

#1588
test/sslapitest.c:1811: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  1809.     SSL_shutdown(serverssl);
  1810.     SSL_free(serverssl);
  1811.     SSL_free(clientssl);
            ^
  1812.     SSL_CTX_free(sctx);
  1813.     SSL_CTX_free(cctx);

#1589
test/sslapitest.c:1835: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_CTX_free`.
  1833.     new_called = 0;
  1834.     do_cache = 1;
  1835.     SSL_CTX_free(sctx);
            ^
  1836.     SSL_CTX_free(cctx);
  1837.     sctx = cctx = NULL;

#1590
test/sslapitest.c:1878: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  1876. 
  1877.  end:
  1878.     SSL_free(serverssl);
            ^
  1879.     SSL_free(clientssl);
  1880.     for (j = 0; j < OSSL_NELEM(sesscache); j++) {

#1591
test/sslapitest.c:1878: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  1876. 
  1877.  end:
  1878.     SSL_free(serverssl);
            ^
  1879.     SSL_free(clientssl);
  1880.     for (j = 0; j < OSSL_NELEM(sesscache); j++) {

#1592
test/bntest.c:1796: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 2 by call to `parseBN`.
  1794.     int st = 0;
  1795. 
  1796.     if (!TEST_int_eq(parseBN(&bn, "0"), 1)
                 ^
  1797.             || !TEST_BN_eq_zero(bn)
  1798.             || !TEST_BN_ge_zero(bn)

#1593
test/bntest.c:1796: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 2 by call to `parseBN`.
  1794.     int st = 0;
  1795. 
  1796.     if (!TEST_int_eq(parseBN(&bn, "0"), 1)
                 ^
  1797.             || !TEST_BN_eq_zero(bn)
  1798.             || !TEST_BN_ge_zero(bn)

#1594
test/bntest.c:1798: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_ge_zero`.
  1796.     if (!TEST_int_eq(parseBN(&bn, "0"), 1)
  1797.             || !TEST_BN_eq_zero(bn)
  1798.             || !TEST_BN_ge_zero(bn)
                        ^
  1799.             || !TEST_BN_even(bn))
  1800.         goto err;

#1595
test/bntest.c:1880: error: Buffer Overrun L2
  Offset: [-13, 536870914] (<= [2, 4] + [-15, 536870910]) Size: 7 by call to `BN_asc2bn`.
  1878.         goto err;
  1879. 
  1880.     if (!TEST_true(BN_asc2bn(&bn, "0x1234"))
                 ^
  1881.             || !TEST_BN_eq_word(bn, 0x1234)
  1882.             || !TEST_BN_ge_zero(bn))

#1596
test/bntest.c:1865: error: Buffer Overrun L2
  Offset: [0, 536870913] (<= [0, 2] + [0, 536870911]) Size: 2 by call to `BN_asc2bn`.
  1863.         goto err;
  1864. 
  1865.     if (!TEST_true(BN_asc2bn(&bn, "0"))
                 ^
  1866.             || !TEST_BN_eq_zero(bn)
  1867.             || !TEST_BN_ge_zero(bn))

#1597
test/bntest.c:1880: error: Buffer Overrun L2
  Offset: [2, 536870915] (<= [2, 4] + [0, 536870911]) Size: 7 by call to `BN_asc2bn`.
  1878.         goto err;
  1879. 
  1880.     if (!TEST_true(BN_asc2bn(&bn, "0x1234"))
                 ^
  1881.             || !TEST_BN_eq_word(bn, 0x1234)
  1882.             || !TEST_BN_ge_zero(bn))

#1598
test/bntest.c:1867: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_ge_zero`.
  1865.     if (!TEST_true(BN_asc2bn(&bn, "0"))
  1866.             || !TEST_BN_eq_zero(bn)
  1867.             || !TEST_BN_ge_zero(bn))
                        ^
  1868.         goto err;
  1869. 

#1599
test/bntest.c:1871: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq_word`.
  1869. 
  1870.     if (!TEST_true(BN_asc2bn(&bn, "256"))
  1871.             || !TEST_BN_eq_word(bn, 256)
                        ^
  1872.             || !TEST_BN_ge_zero(bn))
  1873.         goto err;

#1600
test/ectest.c:2057: error: Dead Store
  The value written to &g_next (type ec_group_st**) is never used.
  2055.         || !TEST_ptr(other_params = *p_next++ =
  2056.                      EC_GROUP_get_ecparameters(tmpg, NULL))
  2057.         || !TEST_ptr(tgroup = *g_next++ =
                    ^
  2058.                       EC_GROUP_new_from_ecparameters(other_params))
  2059.         || !TEST_int_ne((tnid = EC_GROUP_get_curve_name(tgroup)), NID_undef)

#1601
test/ectest.c:2055: error: Dead Store
  The value written to &p_next (type ec_parameters_st**) is never used.
  2053.         || !TEST_true(EC_GROUP_set_generator(tmpg, group_gen, group_order,
  2054.                                              group_cofactor))
  2055.         || !TEST_ptr(other_params = *p_next++ =
                    ^
  2056.                      EC_GROUP_get_ecparameters(tmpg, NULL))
  2057.         || !TEST_ptr(tgroup = *g_next++ =

#1602
test/ectest.c:1957: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned32 by call to `EC_GROUP_new_from_ecparameters`.
  1955.      * "named" EC_GROUP
  1956.      */
  1957.     if (!TEST_ptr(tgroup = *g_next++ = EC_GROUP_new_from_ecparameters(params))
                 ^
  1958.         || !TEST_int_ne((tnid = EC_GROUP_get_curve_name(tgroup)), NID_undef))
  1959.         goto err;

#1603
test/sslapitest.c:1945: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  1943.  end:
  1944.     SSL_free(serverssl);
  1945.     SSL_free(clientssl);
            ^
  1946.     SSL_CTX_free(sctx);
  1947.     SSL_CTX_free(cctx);

#1604
test/sslapitest.c:1945: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  1943.  end:
  1944.     SSL_free(serverssl);
  1945.     SSL_free(clientssl);
            ^
  1946.     SSL_CTX_free(sctx);
  1947.     SSL_CTX_free(cctx);

#1605
test/sslapitest.c:1944: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  1942. 
  1943.  end:
  1944.     SSL_free(serverssl);
            ^
  1945.     SSL_free(clientssl);
  1946.     SSL_CTX_free(sctx);

#1606
test/sslapitest.c:1944: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  1942. 
  1943.  end:
  1944.     SSL_free(serverssl);
            ^
  1945.     SSL_free(clientssl);
  1946.     SSL_CTX_free(sctx);

#1607
ssl/statem/extensions_srvr.c:1927: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  1925.         if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_early_data)
  1926.                 || !WPACKET_start_sub_packet_u16(pkt)
  1927.                 || !WPACKET_put_bytes_u32(pkt, s->max_early_data)
                            ^
  1928.                 || !WPACKET_close(pkt)) {
  1929.             SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1608
test/bntest.c:1930: error: Buffer Overrun L2
  Offset: [0, 536870913] (<= [0, 2] + [0, 536870911]) Size: [2, 5] by call to `BN_asc2bn`.
  1928. 
  1929.     if (!TEST_ptr(bn = BN_new())
  1930.             || !TEST_true(BN_asc2bn(&bn, test->base10)))
                        ^
  1931.         goto err;
  1932.     mpi_len = BN_bn2mpi(bn, NULL);

#1609
test/bntest.c:1930: error: Buffer Overrun L3
  Offset: [1, 2] (<= [0, 1] + 1) Size: [2, 5] by call to `BN_asc2bn`.
  1928. 
  1929.     if (!TEST_ptr(bn = BN_new())
  1930.             || !TEST_true(BN_asc2bn(&bn, test->base10)))
                        ^
  1931.         goto err;
  1932.     mpi_len = BN_bn2mpi(bn, NULL);

#1610
ssl/statem/extensions_srvr.c:1959: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  1957.     if (!WPACKET_put_bytes_u16(pkt, TLSEXT_TYPE_psk)
  1958.             || !WPACKET_start_sub_packet_u16(pkt)
  1959.             || !WPACKET_put_bytes_u16(pkt, s->ext.tick_identity)
                        ^
  1960.             || !WPACKET_close(pkt)) {
  1961.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1611
test/bntest.c:2021: error: Integer Overflow L2
  ([0, +oo] - [0, 1]):unsigned64 by call to `BN_rand_range`.
  2019.         goto err;
  2020.     for (i = 0; i < iterations; i++) {
  2021.         if (!TEST_true(BN_rand_range(val, rng))
                     ^
  2022.             || !TEST_uint_lt(v = (unsigned int)BN_get_word(val), range))
  2023.             goto err;

#1612
test/sslapitest.c:2122: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  2120.      */
  2121.     SSL_free(serverssl);
  2122.     SSL_free(clientssl);
            ^
  2123.     SSL_CTX_free(sctx);
  2124.     SSL_CTX_free(cctx);

#1613
test/sslapitest.c:2122: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  2120.      */
  2121.     SSL_free(serverssl);
  2122.     SSL_free(clientssl);
            ^
  2123.     SSL_CTX_free(sctx);
  2124.     SSL_CTX_free(cctx);

#1614
test/bntest.c:2081: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_ge_zero`.
  2079.         goto err;
  2080.     if (!TEST_BN_eq_zero(c)
  2081.             || !TEST_BN_ge_zero(c))
                        ^
  2082.         goto err;
  2083. 

#1615
test/bntest.c:2078: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_mul`.
  2076.     BN_set_negative(a, 1);
  2077.     BN_zero(b);
  2078.     if (!TEST_true(BN_mul(c, a, b, ctx)))
                 ^
  2079.         goto err;
  2080.     if (!TEST_BN_eq_zero(c)

#1616
test/bntest.c:2105: error: Integer Overflow L2
  ([0, 8] - 1):unsigned64 by call to `test_BN_eq_zero`.
  2103.         if (!TEST_true(BN_set_word(denominator, 1))
  2104.                 || !TEST_true(BN_div(a, b, numerator, denominator, ctx))
  2105.                 || !TEST_BN_eq_zero(b)
                            ^
  2106.                 || !TEST_BN_ge_zero(b))
  2107.             goto err;

#1617
test/ectest.c:2090: error: Integer Overflow L2
  ([-oo, 9223372036854775807] + 1):signed32 by call to `EC_GROUP_new_from_ecparameters`.
  2088.     if (!TEST_ptr(group = EC_GROUP_new_by_curve_name(NID_secp384r1))
  2089.         || !TEST_ptr(ecparameters = EC_GROUP_get_ecparameters(group, NULL))
  2090.         || !TEST_ptr(group2 = EC_GROUP_new_from_ecparameters(ecparameters))
                    ^
  2091.         || !TEST_int_eq(EC_GROUP_cmp(group, group2, NULL), 0))
  2092.         goto err;

#1618
apps/ca.c:2135: error: Null Dereference
  pointer `null` is dereferenced by call to `X509_NAME_oneline()` at line 2135, column 20.
  2133.     for (i = 0; i < DB_NUMBER; i++)
  2134.         row[i] = NULL;
  2135.     row[DB_name] = X509_NAME_oneline(X509_get_subject_name(x509), NULL, 0);
                           ^
  2136.     bn = ASN1_INTEGER_to_BN(X509_get_serialNumber(x509), NULL);
  2137.     if (!bn)

#1619
test/sslapitest.c:2171: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  2169.     BIO_free(sslbio);
  2170.     SSL_free(ssl);
  2171.     SSL_CTX_free(ctx);
            ^
  2172. 
  2173.     return testresult;

#1620
crypto/x509/x509_vfy.c:2174: error: Null Dereference
  pointer `ptmp` last assigned on line 2173 could be null and is dereferenced at line 2174, column 13.
  2172.         }
  2173.         ptmp = X509_PURPOSE_get0(idx);
  2174.         if (ptmp->trust == X509_TRUST_DEFAULT) {
                    ^
  2175.             idx = X509_PURPOSE_get_by_id(def_purpose);
  2176.             /*

#1621
test/ectest.c:2204: error: Buffer Overrun L2
  Offset: [-15, 536870911] (<= [0, 1] + [-15, 536870910]) Size: 33 by call to `BN_hex2bn`.
  2202.         || !TEST_ptr(group = d2i_ECPKParameters(&group, &b2,
  2203.                                                 sizeof(params_cf_pass)))
  2204.         || !TEST_int_gt(BN_hex2bn(&cf, "12bc94785251297abfafddf1565100da"), 0)
                    ^
  2205.         || !TEST_BN_eq(cf, EC_GROUP_get0_cofactor(group)))
  2206.         goto err;

#1622
test/ectest.c:2204: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: 33 by call to `BN_hex2bn`.
  2202.         || !TEST_ptr(group = d2i_ECPKParameters(&group, &b2,
  2203.                                                 sizeof(params_cf_pass)))
  2204.         || !TEST_int_gt(BN_hex2bn(&cf, "12bc94785251297abfafddf1565100da"), 0)
                    ^
  2205.         || !TEST_BN_eq(cf, EC_GROUP_get0_cofactor(group)))
  2206.         goto err;

#1623
test/ectest.c:2205: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq`.
  2203.                                                 sizeof(params_cf_pass)))
  2204.         || !TEST_int_gt(BN_hex2bn(&cf, "12bc94785251297abfafddf1565100da"), 0)
  2205.         || !TEST_BN_eq(cf, EC_GROUP_get0_cofactor(group)))
                    ^
  2206.         goto err;
  2207.     ret = 1;

#1624
test/bntest.c:2208: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq_zero`.
  2206. 
  2207.     if (!TEST_true(BN_mod_exp(r, a, zero, BN_value_one(), NULL))
  2208.             || !TEST_BN_eq_zero(r)
                        ^
  2209.             || !TEST_true(BN_mod_exp_mont(r, a, zero, BN_value_one(),
  2210.                                           NULL, NULL))

#1625
test/bntest.c:2207: error: Null Dereference
  pointer `null` is dereferenced by call to `BN_mod_exp()` at line 2207, column 10.
  2205.     BN_zero(zero);
  2206. 
  2207.     if (!TEST_true(BN_mod_exp(r, a, zero, BN_value_one(), NULL))
                 ^
  2208.             || !TEST_BN_eq_zero(r)
  2209.             || !TEST_true(BN_mod_exp_mont(r, a, zero, BN_value_one(),

#1626
test/ectest.c:2292: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `BN_CTX_end`.
  2290.     EC_GROUP_free(g1);
  2291.     EC_GROUP_free(g2);
  2292.     BN_CTX_end(ctx);
            ^
  2293.     BN_CTX_free(ctx);
  2294.     return ret;

#1627
test/ectest.c:2264: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `test_BN_eq`.
  2262.         || !TEST_true(EC_GROUP_set_generator(g2, g2_gen, g1_order, NULL))
  2263.         || !TEST_true(EC_GROUP_get_cofactor(g2, g2_cf, ctx))
  2264.         || !TEST_BN_eq(g1_cf, g2_cf)
                    ^
  2265.         /* pass zero cofactor: lib should compute it */
  2266.         || !TEST_true(BN_set_word(g2_cf, 0))

#1628
test/ectest.c:2272: error: Integer Overflow L2
  ([0, 1] - [0, 1]):unsigned64 by call to `BN_sub`.
  2270.         /* negative test for invalid cofactor */
  2271.         || !TEST_true(BN_set_word(g2_cf, 0))
  2272.         || !TEST_true(BN_sub(g2_cf, g2_cf, BN_value_one()))
                    ^
  2273.         || !TEST_false(EC_GROUP_set_generator(g2, g2_gen, g1_order, g2_cf))
  2274.         /* negative test for NULL order */

#1629
test/ectest.c:2269: error: Integer Overflow L2
  ([0, 8] - 1):unsigned64 by call to `test_BN_eq`.
  2267.         || !TEST_true(EC_GROUP_set_generator(g2, g2_gen, g1_order, g2_cf))
  2268.         || !TEST_true(EC_GROUP_get_cofactor(g2, g2_cf, ctx))
  2269.         || !TEST_BN_eq(g1_cf, g2_cf)
                    ^
  2270.         /* negative test for invalid cofactor */
  2271.         || !TEST_true(BN_set_word(g2_cf, 0))

#1630
test/bntest.c:2252: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `test_BN_eq_zero`.
  2250.                 || !TEST_BN_eq_zero(r)
  2251.                 || !TEST_true(BN_mod_exp_mont(r, a, p, m, NULL, NULL))
  2252.                 || !TEST_BN_eq_zero(r)
                            ^
  2253.                 || !TEST_true(BN_mod_exp_mont_consttime(r, a, p, m, NULL, NULL))
  2254.                 || !TEST_BN_eq_zero(r)

#1631
test/bntest.c:2249: error: Null Dereference
  pointer `null` is dereferenced by call to `BN_mod_exp()` at line 2249, column 14.
  2247.     /* Calculate r = 1 ^ 0 mod 1, and check the result is always 0 */
  2248.     for (i = 0; i < 2; i++) {
  2249.         if (!TEST_true(BN_mod_exp(r, a, p, m, NULL))
                     ^
  2250.                 || !TEST_BN_eq_zero(r)
  2251.                 || !TEST_true(BN_mod_exp_mont(r, a, p, m, NULL, NULL))

#1632
apps/ca.c:2233: error: Dead Store
  The value written to &ok (type int) is never used.
  2231. {
  2232.     char *row[DB_NUMBER], **rrow;
  2233.     int ok = -1, i;
            ^
  2234.     size_t serial_len = strlen(serial);
  2235. 

#1633
test/sslapitest.c:2319: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  2317.  end:
  2318.     SSL_free(serverssl);
  2319.     SSL_free(clientssl);
            ^
  2320.     SSL_CTX_free(sctx);
  2321.     SSL_CTX_free(cctx);

#1634
test/sslapitest.c:2319: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  2317.  end:
  2318.     SSL_free(serverssl);
  2319.     SSL_free(clientssl);
            ^
  2320.     SSL_CTX_free(sctx);
  2321.     SSL_CTX_free(cctx);

#1635
test/sslapitest.c:2318: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  2316. 
  2317.  end:
  2318.     SSL_free(serverssl);
            ^
  2319.     SSL_free(clientssl);
  2320.     SSL_CTX_free(sctx);

#1636
test/sslapitest.c:2318: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  2316. 
  2317.  end:
  2318.     SSL_free(serverssl);
            ^
  2319.     SSL_free(clientssl);
  2320.     SSL_CTX_free(sctx);

#1637
apps/s_server.c:2435: error: Uninitialized Value
  The value read from readbytes was never initialized.
  2433.                 }
  2434.             }
  2435.             if (readbytes > 0) {
                        ^
  2436.                 if (write_header) {
  2437.                     BIO_printf(bio_s_out, "Early data received:\n");

#1638
apps/s_server.c:2440: error: Uninitialized Value
  The value read from readbytes was never initialized.
  2438.                     write_header = 0;
  2439.                 }
  2440.                 raw_write_stdout(buf, (unsigned int)readbytes);
                        ^
  2441.                 (void)BIO_flush(bio_s_out);
  2442.             }

#1639
ssl/statem/statem_srvr.c:2436: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + 68]):unsigned64 by call to `tls_construct_extensions`.
  2434.     }
  2435. 
  2436.     if (!tls_construct_extensions(s, pkt,
                 ^
  2437.                                   s->hello_retry_request == SSL_HRR_PENDING
  2438.                                       ? SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST

#1640
ssl/statem/statem_srvr.c:2372: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_memcpy`.
  2370.                 * tls_process_client_hello()
  2371.                 */
  2372.             || !WPACKET_memcpy(pkt,
                        ^
  2373.                                s->hello_retry_request == SSL_HRR_PENDING
  2374.                                    ? hrrrandom : s->s3.server_random,

#1641
ssl/statem/statem_srvr.c:2428: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 35]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  2426. #endif
  2427. 
  2428.     if (!WPACKET_sub_memcpy_u8(pkt, session_id, sl)
                 ^
  2429.             || !s->method->put_cipher_by_char(s->s3.tmp.new_cipher, pkt, &len)
  2430.             || !WPACKET_put_bytes_u8(pkt, compm)) {

#1642
apps/lib/apps.c:2400: error: Dead Store
  The value written to &fd (type int) is never used.
  2398.     FILE *fp = NULL;
  2399.     BIO *b = NULL;
  2400.     int fd = -1, bflags, mode, textmode;
            ^
  2401. 
  2402.     if (!private || filename == NULL || strcmp(filename, "-") == 0)

#1643
test/ectest.c:2424: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `ec_point_hex2point_test_helper`.
  2422.                                                   POINT_CONVERSION_COMPRESSED,
  2423.                                                   bnctx))
  2424.             || !TEST_true(ec_point_hex2point_test_helper(group, NULL,
                        ^
  2425.                                                          POINT_CONVERSION_COMPRESSED,
  2426.                                                          bnctx))

#1644
test/bntest.c:2447: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `test_ctx_set_ct_flag`.
  2445.     for (i = 0; i < 2; i++) {
  2446.         BN_CTX *c = i == 0 ? nctx : sctx;
  2447.         if (!TEST_true(test_ctx_set_ct_flag(c))
                     ^
  2448.                 || !TEST_true(test_ctx_check_ct_flag(c)))
  2449.             goto err;

#1645
test/bntest.c:2474: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `BN_gcd`.
  2472.         if (!TEST_true(BN_generate_prime_ex(b, 1024, 0,
  2473.                                             NULL, NULL, NULL))
  2474.                 || !TEST_true(BN_gcd(gcd, a, b, ctx))
                            ^
  2475.                 || !TEST_true(BN_is_one(gcd)))
  2476.             goto err;

#1646
ssl/statem/statem_srvr.c:2679: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  2677.          */
  2678.         if (len > PSK_MAX_IDENTITY_LEN
  2679.                 || !WPACKET_sub_memcpy_u16(pkt, s->cert->psk_identity_hint,
                            ^
  2680.                                            len)) {
  2681.             SSLfatal(s, SSL_AD_INTERNAL_ERROR,

#1647
ssl/t1_lib.c:2490: error: Dead Store
  The value written to &dh_secbits (type int) is never used.
  2488. DH *ssl_get_auto_dh(SSL *s)
  2489. {
  2490.     int dh_secbits = 80;
            ^
  2491.     if (s->cert->dh_tmp_auto == 2)
  2492.         return DH_get_1024_160();

#1648
test/sslapitest.c:2575: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_set_session`.
  2573.     if (!TEST_true(create_ssl_objects(*sctx, *cctx, serverssl,
  2574.                                       clientssl, NULL, NULL))
  2575.             || !TEST_true(SSL_set_session(*clientssl, *sess)))
                        ^
  2576.         return 0;
  2577. 

#1649
test/ssltest_old.c:2787: error: Null Dereference
  pointer `c_to_s` last assigned on line 2527 could be null and is dereferenced by call to `BIO_free()` at line 2787, column 5.
  2785.     ret = EXIT_SUCCESS;
  2786.  err:
  2787.     BIO_free(c_to_s);
            ^
  2788.     BIO_free(s_to_c);
  2789.     BIO_free_all(c_bio);

#1650
apps/ca.c:2540: error: Dead Store
  The value written to &pbuf (type char*) is never used.
  2538.         *(pbuf++) = ' ';
  2539.     *(pbuf++) = ':';
  2540.     *(pbuf++) = '\0';
              ^
  2541.     BIO_puts(bio_err, buf);
  2542. 

#1651
test/sslapitest.c:2782: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  2780.     clientpsk = serverpsk = NULL;
  2781.     SSL_free(serverssl);
  2782.     SSL_free(clientssl);
            ^
  2783.     SSL_CTX_free(sctx);
  2784.     SSL_CTX_free(cctx);

#1652
test/sslapitest.c:2782: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  2780.     clientpsk = serverpsk = NULL;
  2781.     SSL_free(serverssl);
  2782.     SSL_free(clientssl);
            ^
  2783.     SSL_CTX_free(sctx);
  2784.     SSL_CTX_free(cctx);

#1653
test/sslapitest.c:2591: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  2589.     BIO *rbio;
  2590. 
  2591.     if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,
                 ^
  2592.                                         &serverssl, &sess, idx)))
  2593.         goto end;

#1654
ssl/t1_lib.c:2601: error: Null Dereference
  pointer `null` is dereferenced by call to `ssl_security_cert()` at line 2601, column 10.
  2599.         start_idx = 0;
  2600. 
  2601.     rv = ssl_security_cert(s, NULL, x, vfy, 1);
                 ^
  2602.     if (rv != 1)
  2603.         return rv;

#1655
apps/lib/apps.c:2609: error: Dead Store
  The value written to &opt (type char*) is never used.
  2607.     size_t sz = (size_t)sk_OPENSSL_STRING_num(opts);
  2608.     size_t params_n;
  2609.     char *opt = "", *stmp, *vtmp = NULL;
            ^
  2610. 
  2611.     if (opts == NULL)

#1656
test/bntest.c:2707: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: [137, 156] by call to `BN_dec2bn`.
  2705.     if (!TEST_ptr(result = BN_new())
  2706.             || !TEST_true(BN_dec2bn(&base, test->base))
  2707.             || !TEST_true(BN_dec2bn(&exponent, test->exp))
                        ^
  2708.             || !TEST_true(BN_dec2bn(&modulo, test->mod)))
  2709.         goto err;

#1657
test/bntest.c:2741: error: Buffer Overrun L2
  Offset: [0, 536870912] (<= [0, 1] + [0, 536870911]) Size: [137, 156] by call to `BN_dec2bn`.
  2739.     if (!TEST_ptr(result = BN_new())
  2740.             || !TEST_true(BN_dec2bn(&base, test->base))
  2741.             || !TEST_true(BN_dec2bn(&exponent, test->exp))
                        ^
  2742.             || !TEST_true(BN_dec2bn(&modulo, test->mod)))
  2743.         goto err;

#1658
ssl/statem/statem_clnt.c:2776: error: Integer Overflow L2
  ([0, -3+max(5, `pkt->remaining`)] - [0, -3+max(5, `pkt->remaining`)]):unsigned64 by call to `PACKET_copy_bytes`.
  2774.         return 0;
  2775.     }
  2776.     if (!PACKET_copy_bytes(pkt, s->ext.ocsp.resp, resplen)) {
                 ^
  2777.         SSLfatal(s, SSL_AD_DECODE_ERROR, SSL_F_TLS_PROCESS_CERT_STATUS_BODY,
  2778.                  SSL_R_LENGTH_MISMATCH);

#1659
crypto/evp/e_aes.c:2843: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo] by call to `CRYPTO_gcm128_tag`.
  2841.         out += len;
  2842.         /* Finally write tag */
  2843.         CRYPTO_gcm128_tag(&gctx->gcm, out, EVP_GCM_TLS_TAG_LEN);
                ^
  2844.         rv = len + EVP_GCM_TLS_EXPLICIT_IV_LEN + EVP_GCM_TLS_TAG_LEN;
  2845.     } else {

#1660
crypto/evp/e_aes.c:2810: error: Integer Overflow L1
  ([-oo, 0] - 1):unsigned64 by call to `CRYPTO_gcm128_encrypt`.
  2808. #if defined(AES_GCM_ASM)
  2809.             if (len >= 32 && AES_GCM_ASM(gctx)) {
  2810.                 if (CRYPTO_gcm128_encrypt(&gctx->gcm, NULL, NULL, 0))
                            ^
  2811.                     return -1;
  2812. 

#1661
crypto/evp/e_aes.c:2819: error: Integer Overflow L2
  ([0, 3071] - [1, 3071]):unsigned64 by call to `CRYPTO_gcm128_encrypt_ctr32`.
  2817.             }
  2818. #endif
  2819.             if (CRYPTO_gcm128_encrypt_ctr32(&gctx->gcm,
                        ^
  2820.                                             in + bulk,
  2821.                                             out + bulk,

#1662
test/bntest.c:2805: error: Buffer Overrun L2
  Offset: [max(0, `i`), 399] Size: 100 by call to `test_get_argument`.
  2803. {
  2804.     STANZA *s = NULL;
  2805.     char *testfile = test_get_argument(i);
                             ^
  2806.     int c;
  2807. 

#1663
test/ssltest_old.c:2806: error: Buffer Overrun L2
  Offset: [-oo, 1048576] Size: 256 by call to `X509_NAME_oneline`.
  2804.     char *s, buf[256];
  2805. 
  2806.     s = X509_NAME_oneline(X509_get_subject_name(X509_STORE_CTX_get_current_cert(ctx)),
                ^
  2807.                           buf, sizeof(buf));
  2808.     if (s != NULL) {

#1664
test/sslapitest.c:2863: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  2861.     SSL_shutdown(serverssl);
  2862.     SSL_free(serverssl);
  2863.     SSL_free(clientssl);
            ^
  2864.     serverssl = clientssl = NULL;
  2865. 

#1665
test/sslapitest.c:2863: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  2861.     SSL_shutdown(serverssl);
  2862.     SSL_free(serverssl);
  2863.     SSL_free(clientssl);
            ^
  2864.     serverssl = clientssl = NULL;
  2865. 

#1666
test/ssltest_old.c:2851: error: Buffer Overrun L2
  Offset: [-oo, 1048576] Size: 256 by call to `X509_NAME_oneline`.
  2849.                 (void *)ctx, (void *)c);
  2850.         if (c)
  2851.             s = X509_NAME_oneline(X509_get_subject_name(c), buf, 256);
                        ^
  2852.         if (s != NULL) {
  2853.             printf("cert depth=%d %s\n",

#1667
test/ssltest_old.c:2839: error: Dead Store
  The value written to &ok (type int) is never used.
  2837. static int app_verify_callback(X509_STORE_CTX *ctx, void *arg)
  2838. {
  2839.     int ok = 1;
            ^
  2840.     struct app_verify_arg *cb_arg = arg;
  2841. 

#1668
ssl/statem/statem_srvr.c:2872: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + 33]):unsigned64 by call to `tls_construct_extensions`.
  2870.         }
  2871. 
  2872.         if (!tls_construct_extensions(s, pkt,
                     ^
  2873.                                       SSL_EXT_TLS1_3_CERTIFICATE_REQUEST, NULL,
  2874.                                       0)) {

#1669
ssl/statem/statem_srvr.c:2852: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  2850.             if ((s->pha_context = OPENSSL_malloc(s->pha_context_len)) == NULL
  2851.                     || RAND_bytes(s->pha_context, s->pha_context_len) <= 0
  2852.                     || !WPACKET_sub_memcpy_u8(pkt, s->pha_context, s->pha_context_len)) {
                                ^
  2853.                 SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  2854.                          SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST,

#1670
ssl/statem/statem_srvr.c:2883: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `ssl3_get_req_cert_type`.
  2881.     /* get the list of acceptable cert types */
  2882.     if (!WPACKET_start_sub_packet_u8(pkt)
  2883.         || !ssl3_get_req_cert_type(s, pkt) || !WPACKET_close(pkt)) {
                    ^
  2884.         SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  2885.                  SSL_F_TLS_CONSTRUCT_CERTIFICATE_REQUEST, ERR_R_INTERNAL_ERROR);

#1671
apps/s_server.c:2912: error: Buffer Overrun L1
  Offset: -1 Size: 8192 by call to `SSL_get_shared_ciphers`.
  2910.     }
  2911. 
  2912.     if (SSL_get_shared_ciphers(con, buf, sizeof(buf)) != NULL)
                ^
  2913.         BIO_printf(bio_s_out, "Shared ciphers:%s\n", buf);
  2914.     str = SSL_CIPHER_get_name(SSL_get_current_cipher(con));

#1672
crypto/evp/e_aes.c:3056: error: Buffer Overrun L3
  Offset added: 16 Size: [0, +oo] by call to `CRYPTO_gcm128_tag`.
  3054.             return 0;
  3055.         }
  3056.         CRYPTO_gcm128_tag(&gctx->gcm, ctx->buf, 16);
                ^
  3057.         gctx->taglen = 16;
  3058.         /* Don't reuse the IV */

#1673
crypto/evp/e_aes.c:2975: error: Integer Overflow L2
  ([0, 3071] - [1, 3071]):unsigned64 by call to `CRYPTO_gcm128_encrypt_ctr32`.
  2973.                 }
  2974. #endif
  2975.                 if (CRYPTO_gcm128_encrypt_ctr32(&gctx->gcm,
                            ^
  2976.                                                 in + bulk,
  2977.                                                 out + bulk,

#1674
test/sslapitest.c:3087: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3085.     SSL_SESSION_free(sess);
  3086.     SSL_free(serverssl);
  3087.     SSL_free(clientssl);
            ^
  3088.     SSL_CTX_free(sctx);
  3089.     SSL_CTX_free(cctx);

#1675
test/sslapitest.c:3087: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3085.     SSL_SESSION_free(sess);
  3086.     SSL_free(serverssl);
  3087.     SSL_free(clientssl);
            ^
  3088.     SSL_CTX_free(sctx);
  3089.     SSL_CTX_free(cctx);

#1676
test/sslapitest.c:2956: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  2954.     size_t readbytes, written;
  2955. 
  2956.     if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,
                 ^
  2957.                                         &serverssl, &sess, idx)))
  2958.         goto end;

#1677
ssl/statem/statem_clnt.c:3015: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_allocate_bytes`.
  3013.         goto err;
  3014.     }
  3015.     if (!WPACKET_allocate_bytes(pkt, enclen, &encdata)
                 ^
  3016.             || EVP_PKEY_encrypt(pctx, encdata, &enclen, pms, pmslen) <= 0) {
  3017.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CKE_RSA,

#1678
ssl/statem/statem_clnt.c:2979: error: Null Dereference
  pointer `pkey` last assigned on line 2978 could be null and is dereferenced by call to `EVP_PKEY_get0_RSA()` at line 2979, column 9.
  2977. 
  2978.     pkey = X509_get0_pubkey(s->session->peer);
  2979.     if (EVP_PKEY_get0_RSA(pkey) == NULL) {
                ^
  2980.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CKE_RSA,
  2981.                  ERR_R_INTERNAL_ERROR);

#1679
apps/s_server.c:2987: error: Null Dereference
  pointer `bio` last assigned on line 2983 could be null and is dereferenced by call to `BIO_free()` at line 2987, column 5.
  2985.     ret = PEM_read_bio_DHparams(bio, NULL, NULL, NULL);
  2986.  err:
  2987.     BIO_free(bio);
            ^
  2988.     return ret;
  2989. }

#1680
ssl/statem/statem_srvr.c:3064: error: Dead Store
  The value written to &p (type ossl_param_st*) is never used.
  3062.             OSSL_ASYM_CIPHER_PARAM_TLS_NEGOTIATED_VERSION,
  3063.             (unsigned int *)&s->version);
  3064.     *p++ = OSSL_PARAM_construct_end();
             ^
  3065. 
  3066.     if (!EVP_PKEY_CTX_set_params(ctx, params)

#1681
ssl/ssl_lib.c:3220: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_CTX_free`.
  3218.     SSLerr(SSL_F_SSL_CTX_NEW, ERR_R_MALLOC_FAILURE);
  3219.  err2:
  3220.     SSL_CTX_free(ret);
            ^
  3221.     return NULL;
  3222. }

#1682
ssl/statem/statem_clnt.c:3090: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_sub_allocate_bytes__`.
  3088.     /* send off the data */
  3089.     DH_get0_key(dh_clnt, &pub_key, NULL);
  3090.     if (!WPACKET_sub_allocate_bytes_u16(pkt, BN_num_bytes(pub_key),
                 ^
  3091.                                         &keybytes)) {
  3092.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CKE_DHE,

#1683
ssl/statem/statem_clnt.c:3147: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  3145.     }
  3146. 
  3147.     if (!WPACKET_sub_memcpy_u8(pkt, encodedPoint, encoded_pt_len)) {
                 ^
  3148.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CKE_ECDHE,
  3149.                  ERR_R_INTERNAL_ERROR);

#1684
test/sslapitest.c:3184: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3182.     clientpsk = serverpsk = NULL;
  3183.     SSL_free(serverssl);
  3184.     SSL_free(clientssl);
            ^
  3185.     SSL_CTX_free(sctx);
  3186.     SSL_CTX_free(cctx);

#1685
test/sslapitest.c:3184: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3182.     clientpsk = serverpsk = NULL;
  3183.     SSL_free(serverssl);
  3184.     SSL_free(clientssl);
            ^
  3185.     SSL_CTX_free(sctx);
  3186.     SSL_CTX_free(cctx);

#1686
test/sslapitest.c:3143: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  3141.     size_t readbytes, written;
  3142. 
  3143.     if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,
                 ^
  3144.                                         &serverssl, &sess, idx)))
  3145.         goto end;

#1687
ssl/statem/statem_clnt.c:3259: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 3]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  3257.     if (!WPACKET_put_bytes_u8(pkt, V_ASN1_SEQUENCE | V_ASN1_CONSTRUCTED)
  3258.             || (msglen >= 0x80 && !WPACKET_put_bytes_u8(pkt, 0x81))
  3259.             || !WPACKET_sub_memcpy_u8(pkt, tmp, msglen)) {
                        ^
  3260.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CKE_GOST,
  3261.                  ERR_R_INTERNAL_ERROR);

#1688
test/evp_test.c:3210: error: Buffer Overrun L2
  Offset: [max(0, `i`), 399] Size: 100 by call to `test_get_argument`.
  3208. {
  3209.     EVP_TEST *t;
  3210.     const char *testfile = test_get_argument(i);
                                   ^
  3211.     int c;
  3212. 

#1689
test/sslapitest.c:3393: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3391.     clientpsk = serverpsk = NULL;
  3392.     SSL_free(serverssl);
  3393.     SSL_free(clientssl);
            ^
  3394.     SSL_CTX_free(sctx);
  3395.     SSL_CTX_free(cctx);

#1690
test/sslapitest.c:3393: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3391.     clientpsk = serverpsk = NULL;
  3392.     SSL_free(serverssl);
  3393.     SSL_free(clientssl);
            ^
  3394.     SSL_CTX_free(sctx);
  3395.     SSL_CTX_free(cctx);

#1691
test/sslapitest.c:3247: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  3245. 
  3246.     /* We always set this up with a final parameter of "2" for PSK */
  3247.     if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,
                 ^
  3248.                                         &serverssl, &sess, 2)))
  3249.         goto end;

#1692
ssl/s3_lib.c:3282: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  3280.     /* Set the content type and 3 bytes for the message len */
  3281.     if (!WPACKET_put_bytes_u8(pkt, htype)
  3282.             || !WPACKET_start_sub_packet_u24(pkt))
                        ^
  3283.         return 0;
  3284. 

#1693
ssl/statem/statem_clnt.c:3288: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 2]):unsigned64 by call to `WPACKET_sub_allocate_bytes__`.
  3286. 
  3287.     if (s->srp_ctx.A == NULL
  3288.             || !WPACKET_sub_allocate_bytes_u16(pkt, BN_num_bytes(s->srp_ctx.A),
                        ^
  3289.                                                &abytes)) {
  3290.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CKE_SRP,

#1694
test/sslapitest.c:3451: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3449.     clientpsk = serverpsk = NULL;
  3450.     SSL_free(serverssl);
  3451.     SSL_free(clientssl);
            ^
  3452.     SSL_CTX_free(sctx);
  3453.     SSL_CTX_free(cctx);

#1695
test/sslapitest.c:3451: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3449.     clientpsk = serverpsk = NULL;
  3450.     SSL_free(serverssl);
  3451.     SSL_free(clientssl);
            ^
  3452.     SSL_CTX_free(sctx);
  3453.     SSL_CTX_free(cctx);

#1696
test/sslapitest.c:3412: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  3410.     size_t readbytes, written;
  3411. 
  3412.     if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,
                 ^
  3413.                                         &serverssl, &sess, idx)))
  3414.         goto end;

#1697
test/sslapitest.c:3524: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3522.     clientpsk = serverpsk = NULL;
  3523.     SSL_free(serverssl);
  3524.     SSL_free(clientssl);
            ^
  3525.     SSL_CTX_free(sctx);
  3526.     SSL_CTX_free(cctx);

#1698
test/sslapitest.c:3524: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3522.     clientpsk = serverpsk = NULL;
  3523.     SSL_free(serverssl);
  3524.     SSL_free(clientssl);
            ^
  3525.     SSL_CTX_free(sctx);
  3526.     SSL_CTX_free(cctx);

#1699
test/sslapitest.c:3471: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  3469.     size_t readbytes, written;
  3470. 
  3471.     if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,
                 ^
  3472.                                         &serverssl, NULL, idx)))
  3473.         goto end;

#1700
apps/s_client.c:3564: error: Integer Overflow L2
  ([0, -1+max(9223372036854775807, `rem`)] + 1):signed32.
  3562. 
  3563.     /* len should always be one, but just in case... */
  3564.     for (ret = 0, inf = 0; inf < len; inf++) {
                                              ^
  3565.         ret <<= 8;
  3566.         ret |= cur[inf];

#1701
ssl/ssl_lib.c:3581: error: Integer Overflow L2
  ([0, 1+max(0, `s->session_ctx->sessions->num_nodes`)] - 1):unsigned32 by call to `SSL_CTX_flush_sessions`.
  3579.             stat = &s->session_ctx->stats.sess_accept_good;
  3580.         if ((tsan_load(stat) & 0xff) == 0xff)
  3581.             SSL_CTX_flush_sessions(s->session_ctx, (unsigned long)time(NULL));
                    ^
  3582.     }
  3583. }

#1702
ssl/statem/statem_clnt.c:3550: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `s->pha_context_len` + `pkt->written` + 1]):unsigned64 by call to `ssl3_output_cert_chain`.
  3548.         }
  3549.     }
  3550.     if (!ssl3_output_cert_chain(s, pkt,
                 ^
  3551.                                 (s->s3.tmp.cert_req == 2) ? NULL
  3552.                                                            : s->cert->key)) {

#1703
ssl/statem/statem_clnt.c:3544: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  3542.                 return 0;
  3543.             }
  3544.         } else if (!WPACKET_sub_memcpy_u8(pkt, s->pha_context, s->pha_context_len)) {
                            ^
  3545.             SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  3546.                      SSL_F_TLS_CONSTRUCT_CLIENT_CERTIFICATE, ERR_R_INTERNAL_ERROR);

#1704
test/sslapitest.c:3606: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3604.  end:
  3605.     SSL_free(serverssl);
  3606.     SSL_free(clientssl);
            ^
  3607.     SSL_CTX_free(sctx);
  3608.     SSL_CTX_free(cctx);

#1705
test/sslapitest.c:3606: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3604.  end:
  3605.     SSL_free(serverssl);
  3606.     SSL_free(clientssl);
            ^
  3607.     SSL_CTX_free(sctx);
  3608.     SSL_CTX_free(cctx);

#1706
test/sslapitest.c:3605: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  3603. 
  3604.  end:
  3605.     SSL_free(serverssl);
            ^
  3606.     SSL_free(clientssl);
  3607.     SSL_CTX_free(sctx);

#1707
test/sslapitest.c:3605: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  3603. 
  3604.  end:
  3605.     SSL_free(serverssl);
            ^
  3606.     SSL_free(clientssl);
  3607.     SSL_CTX_free(sctx);

#1708
crypto/evp/e_aes.c:3586: error: Integer Overflow L1
  (0 - [max(1, `inlen`), `inlen`]):unsigned64 by call to `is_partially_overlapping`.
  3584.     if (!pad && inlen & 0x7)
  3585.         return -1;
  3586.     if (is_partially_overlapping(out, in, inlen)) {
                ^
  3587.         EVPerr(EVP_F_AES_WRAP_CIPHER, EVP_R_PARTIALLY_OVERLAPPING);
  3588.         return 0;

#1709
test/sslapitest.c:3639: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3637.     SSL_shutdown(serverssl);
  3638.     SSL_free(serverssl);
  3639.     SSL_free(clientssl);
            ^
  3640.     serverssl = clientssl = NULL;
  3641. 

#1710
test/sslapitest.c:3639: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3637.     SSL_shutdown(serverssl);
  3638.     SSL_free(serverssl);
  3639.     SSL_free(clientssl);
            ^
  3640.     serverssl = clientssl = NULL;
  3641. 

#1711
ssl/statem/statem_clnt.c:3635: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + `s->ext.npn_len` + 2]):unsigned64 by call to `WPACKET_sub_allocate_bytes__`.
  3633. 
  3634.     if (!WPACKET_sub_memcpy_u8(pkt, s->ext.npn, len)
  3635.             || !WPACKET_sub_allocate_bytes_u8(pkt, padding_len, &padding)) {
                        ^
  3636.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_NEXT_PROTO,
  3637.                  ERR_R_INTERNAL_ERROR);

#1712
ssl/statem/statem_clnt.c:3634: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  3632.     padding_len = 32 - ((len + 2) % 32);
  3633. 
  3634.     if (!WPACKET_sub_memcpy_u8(pkt, s->ext.npn, len)
                 ^
  3635.             || !WPACKET_sub_allocate_bytes_u8(pkt, padding_len, &padding)) {
  3636.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_NEXT_PROTO,

#1713
ssl/statem/statem_srvr.c:3749: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `ssl3_output_cert_chain`.
  3747.         return 0;
  3748.     }
  3749.     if (!ssl3_output_cert_chain(s, pkt, cpk)) {
                 ^
  3750.         /* SSLfatal() already called */
  3751.         return 0;

#1714
ssl/statem/statem_srvr.c:3784: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + 17]):unsigned64 by call to `WPACKET_start_sub_packet_len__`.
  3782. 
  3783.     /* Start the sub-packet for the actual ticket data */
  3784.     if (!WPACKET_start_sub_packet_u16(pkt)) {
                 ^
  3785.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_CREATE_TICKET_PREQUEL,
  3786.                  ERR_R_INTERNAL_ERROR);

#1715
ssl/statem/statem_srvr.c:3775: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  3773. 
  3774.     if (SSL_IS_TLS13(s)) {
  3775.         if (!WPACKET_put_bytes_u32(pkt, age_add)
                     ^
  3776.                 || !WPACKET_sub_memcpy_u8(pkt, tick_nonce, TICKET_NONCE_SIZE)) {
  3777.             SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_CREATE_TICKET_PREQUEL,

#1716
ssl/statem/statem_srvr.c:3776: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 9]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  3774.     if (SSL_IS_TLS13(s)) {
  3775.         if (!WPACKET_put_bytes_u32(pkt, age_add)
  3776.                 || !WPACKET_sub_memcpy_u8(pkt, tick_nonce, TICKET_NONCE_SIZE)) {
                            ^
  3777.             SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_CREATE_TICKET_PREQUEL,
  3778.                      ERR_R_INTERNAL_ERROR);

#1717
test/sslapitest.c:3789: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3787.             break;
  3788.         case 1:
  3789.             kexch_alg = NID_X9_62_prime256v1;
                    ^
  3790.             break;
  3791.         case 2:

#1718
test/sslapitest.c:3792: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3790.             break;
  3791.         case 2:
  3792.             kexch_alg = NID_secp384r1;
                    ^
  3793.             break;
  3794.         case 3:

#1719
test/sslapitest.c:3795: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3793.             break;
  3794.         case 3:
  3795.             kexch_alg = NID_secp521r1;
                    ^
  3796.             break;
  3797.         case 4:

#1720
test/sslapitest.c:3798: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3796.             break;
  3797.         case 4:
  3798.             kexch_alg = NID_X25519;
                    ^
  3799.             break;
  3800.         case 5:

#1721
test/sslapitest.c:3801: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3799.             break;
  3800.         case 5:
  3801.             kexch_alg = NID_X448;
                    ^
  3802.             break;
  3803. # endif

#1722
test/sslapitest.c:3815: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3813.             break;
  3814.         case 7:
  3815.             kexch_alg = NID_ffdhe2048;
                    ^
  3816.             break;
  3817.         case 8:

#1723
test/sslapitest.c:3818: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3816.             break;
  3817.         case 8:
  3818.             kexch_alg = NID_ffdhe3072;
                    ^
  3819.             break;
  3820.         case 9:

#1724
test/sslapitest.c:3821: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3819.             break;
  3820.         case 9:
  3821.             kexch_alg = NID_ffdhe4096;
                    ^
  3822.             break;
  3823.         case 10:

#1725
test/sslapitest.c:3824: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3822.             break;
  3823.         case 10:
  3824.             kexch_alg = NID_ffdhe6144;
                    ^
  3825.             break;
  3826.         case 11:

#1726
test/sslapitest.c:3827: error: Dead Store
  The value written to &kexch_alg (type int) is never used.
  3825.             break;
  3826.         case 11:
  3827.             kexch_alg = NID_ffdhe8192;
                    ^
  3828.             break;
  3829. # endif

#1727
test/sslapitest.c:3892: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  3890.  end:
  3891.     SSL_free(serverssl);
  3892.     SSL_free(clientssl);
            ^
  3893.     SSL_CTX_free(sctx);
  3894.     SSL_CTX_free(cctx);

#1728
test/sslapitest.c:3892: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  3890.  end:
  3891.     SSL_free(serverssl);
  3892.     SSL_free(clientssl);
            ^
  3893.     SSL_CTX_free(sctx);
  3894.     SSL_CTX_free(cctx);

#1729
test/sslapitest.c:3891: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  3889.     testresult = 1;
  3890.  end:
  3891.     SSL_free(serverssl);
            ^
  3892.     SSL_free(clientssl);
  3893.     SSL_CTX_free(sctx);

#1730
test/sslapitest.c:3891: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  3889.     testresult = 1;
  3890.  end:
  3891.     SSL_free(serverssl);
            ^
  3892.     SSL_free(clientssl);
  3893.     SSL_CTX_free(sctx);

#1731
apps/speed.c:3830: error: Null Dereference
  pointer `f` last assigned on line 3829 could be null and is dereferenced by call to `fgets()` at line 3830, column 16.
  3828. 
  3829.         f = fdopen(fds[n], "r");
  3830.         while (fgets(buf, sizeof(buf), f)) {
                       ^
  3831.             p = strchr(buf, '\n');
  3832.             if (p)

#1732
ssl/statem/statem_srvr.c:3928: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + 35]):unsigned64 by call to `WPACKET_memcpy`.
  3926.             || !WPACKET_memcpy(pkt, key_name, sizeof(key_name))
  3927.                /* output IV */
  3928.             || !WPACKET_memcpy(pkt, iv, iv_len)
                        ^
  3929.             || !WPACKET_reserve_bytes(pkt, slen + EVP_MAX_BLOCK_LENGTH,
  3930.                                       &encdata1)

#1733
ssl/statem/statem_srvr.c:3884: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  3882.             /* Put timeout and length */
  3883.             if (!WPACKET_put_bytes_u32(pkt, 0)
  3884.                     || !WPACKET_put_bytes_u16(pkt, 0)) {
                                ^
  3885.                 SSLfatal(s, SSL_AD_INTERNAL_ERROR,
  3886.                          SSL_F_CONSTRUCT_STATELESS_TICKET,

#1734
crypto/evp/e_aes.c:3942: error: Integer Overflow L2
  ([0, +oo] - [0, 15]):unsigned64.
  3940.         if (len != trailing_len) {
  3941.             if (out == NULL) {
  3942.                 if (!CRYPTO_ocb128_aad(&octx->ocb, in, len - trailing_len))
                             ^
  3943.                     return -1;
  3944.             } else if (EVP_CIPHER_CTX_encrypting(ctx)) {

#1735
crypto/evp/e_aes.c:3945: error: Integer Overflow L2
  ([0, +oo] - [0, 15]):unsigned64.
  3943.                     return -1;
  3944.             } else if (EVP_CIPHER_CTX_encrypting(ctx)) {
  3945.                 if (!CRYPTO_ocb128_encrypt
                             ^
  3946.                     (&octx->ocb, in, out, len - trailing_len))
  3947.                     return -1;

#1736
crypto/evp/e_aes.c:3949: error: Integer Overflow L2
  ([0, +oo] - [0, 15]):unsigned64.
  3947.                     return -1;
  3948.             } else {
  3949.                 if (!CRYPTO_ocb128_decrypt
                             ^
  3950.                     (&octx->ocb, in, out, len - trailing_len))
  3951.                     return -1;

#1737
test/sslapitest.c:4014: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  4012. # endif
  4013. 
  4014.             SSL_free(serverssl);
                    ^
  4015.             serverssl = NULL;
  4016.             SSL_free(clientssl);

#1738
test/sslapitest.c:4014: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  4012. # endif
  4013. 
  4014.             SSL_free(serverssl);
                    ^
  4015.             serverssl = NULL;
  4016.             SSL_free(clientssl);

#1739
ssl/statem/statem_srvr.c:3976: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written` - `pkt->subs->lenbytes`, `pkt->written` + 19]):unsigned64 by call to `WPACKET_memcpy`.
  3974.     }
  3975. 
  3976.     if (!WPACKET_memcpy(pkt, s->session->session_id,
                 ^
  3977.                         s->session->session_id_length)
  3978.             || !WPACKET_close(pkt)) {

#1740
test/sslapitest.c:4255: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  4253.     clientpsk = serverpsk = NULL;
  4254.     SSL_free(serverssl);
  4255.     SSL_free(clientssl);
            ^
  4256.     SSL_CTX_free(sctx);
  4257.     SSL_CTX_free(cctx);

#1741
test/sslapitest.c:4255: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  4253.     clientpsk = serverpsk = NULL;
  4254.     SSL_free(serverssl);
  4255.     SSL_free(clientssl);
            ^
  4256.     SSL_CTX_free(sctx);
  4257.     SSL_CTX_free(cctx);

#1742
ssl/ssl_lib.c:4057: error: Null Dereference
  pointer `bbio` last assigned on line 4055 could be null and is dereferenced by call to `BIO_free()` at line 4057, column 9.
  4055.     bbio = BIO_new(BIO_f_buffer());
  4056.     if (bbio == NULL || !BIO_set_read_buffer_size(bbio, 1)) {
  4057.         BIO_free(bbio);
                ^
  4058.         SSLerr(SSL_F_SSL_INIT_WBIO_BUFFER, ERR_R_BUF_LIB);
  4059.         return 0;

#1743
ssl/statem/statem_srvr.c:4129: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 1]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  4127. {
  4128.     if (!WPACKET_put_bytes_u8(pkt, s->ext.status_type)
  4129.             || !WPACKET_sub_memcpy_u24(pkt, s->ext.ocsp.resp,
                        ^
  4130.                                        s->ext.ocsp.resp_len)) {
  4131.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY,

#1744
ssl/statem/statem_srvr.c:4129: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_sub_memcpy__`.
  4127. {
  4128.     if (!WPACKET_put_bytes_u8(pkt, s->ext.status_type)
  4129.             || !WPACKET_sub_memcpy_u24(pkt, s->ext.ocsp.resp,
                        ^
  4130.                                        s->ext.ocsp.resp_len)) {
  4131.         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_TLS_CONSTRUCT_CERT_STATUS_BODY,

#1745
crypto/ec/curve25519.c:4246: error: Uninitialized Value
  The value read from e[_] was never initialized.
  4244.     carry = 0;
  4245.     for (i = 0; i < 63; ++i) {
  4246.         e[i] += carry;
                ^
  4247.         carry = e[i] + 8;
  4248.         carry >>= 4;

#1746
crypto/ec/curve25519.c:4251: error: Uninitialized Value
  The value read from e[_] was never initialized.
  4249.         e[i] -= carry << 4;
  4250.     }
  4251.     e[63] += carry;
            ^
  4252.     /* each e[i] is between -8 and 8 */
  4253. 

#1747
test/sslapitest.c:4379: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  4377.  end:
  4378.     SSL_free(serverssl);
  4379.     SSL_free(clientssl);
            ^
  4380.     SSL_CTX_free(sctx);
  4381.     SSL_CTX_free(cctx);

#1748
test/sslapitest.c:4379: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  4377.  end:
  4378.     SSL_free(serverssl);
  4379.     SSL_free(clientssl);
            ^
  4380.     SSL_CTX_free(sctx);
  4381.     SSL_CTX_free(cctx);

#1749
test/sslapitest.c:4378: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  4376. 
  4377.  end:
  4378.     SSL_free(serverssl);
            ^
  4379.     SSL_free(clientssl);
  4380.     SSL_CTX_free(sctx);

#1750
test/sslapitest.c:4378: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  4376. 
  4377.  end:
  4378.     SSL_free(serverssl);
            ^
  4379.     SSL_free(clientssl);
  4380.     SSL_CTX_free(sctx);

#1751
ssl/s3_lib.c:4367: error: Integer Overflow L2
  ([0, +oo] - [`pkt->written`, `pkt->written` + 4]):unsigned64 by call to `WPACKET_put_bytes__`.
  4365.     if (s->version >= TLS1_VERSION
  4366.             && !(alg_a & SSL_aECDSA)
  4367.             && !WPACKET_put_bytes_u8(pkt, TLS_CT_ECDSA_SIGN))
                        ^
  4368.         return 0;
  4369. #endif

#1752
test/sslapitest.c:4710: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  4708.     SSL_SESSION_free(sess);
  4709.     SSL_free(serverssl);
  4710.     SSL_free(clientssl);
            ^
  4711.     SSL_CTX_free(sctx2);
  4712.     SSL_CTX_free(sctx);

#1753
test/sslapitest.c:4710: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  4708.     SSL_SESSION_free(sess);
  4709.     SSL_free(serverssl);
  4710.     SSL_free(clientssl);
            ^
  4711.     SSL_CTX_free(sctx2);
  4712.     SSL_CTX_free(sctx);

#1754
crypto/ec/curve25519.c:4544: error: Buffer Overrun L2
  Offset: [1, 260] Size: 256 by call to `slide`.
  4542.     int i;
  4543. 
  4544.     slide(aslide, a);
            ^
  4545.     slide(bslide, b);
  4546. 

#1755
test/sslapitest.c:4916: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  4914.  end:
  4915.     SSL_free(serverssl);
  4916.     SSL_free(clientssl);
            ^
  4917.     SSL_CTX_free(sctx2);
  4918.     SSL_CTX_free(sctx);

#1756
test/sslapitest.c:4916: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  4914.  end:
  4915.     SSL_free(serverssl);
  4916.     SSL_free(clientssl);
            ^
  4917.     SSL_CTX_free(sctx2);
  4918.     SSL_CTX_free(sctx);

#1757
test/sslapitest.c:4915: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  4913. 
  4914.  end:
  4915.     SSL_free(serverssl);
            ^
  4916.     SSL_free(clientssl);
  4917.     SSL_CTX_free(sctx2);

#1758
test/sslapitest.c:4915: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  4913. 
  4914.  end:
  4915.     SSL_free(serverssl);
            ^
  4916.     SSL_free(clientssl);
  4917.     SSL_CTX_free(sctx2);

#1759
test/sslapitest.c:4995: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  4993.     clientpsk = serverpsk = NULL;
  4994.     SSL_free(serverssl);
  4995.     SSL_free(clientssl);
            ^
  4996.     SSL_CTX_free(sctx);
  4997.     SSL_CTX_free(cctx);

#1760
test/sslapitest.c:4995: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  4993.     clientpsk = serverpsk = NULL;
  4994.     SSL_free(serverssl);
  4995.     SSL_free(clientssl);
            ^
  4996.     SSL_CTX_free(sctx);
  4997.     SSL_CTX_free(cctx);

#1761
test/sslapitest.c:4945: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  4943.     size_t readbytes, written;
  4944. 
  4945.     if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl, &serverssl,
                 ^
  4946.                                         &sess, idx)))
  4947.         goto end;

#1762
test/sslapitest.c:5052: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  5050.  end:
  5051.     SSL_free(serverssl);
  5052.     SSL_free(clientssl);
            ^
  5053.     SSL_CTX_free(sctx);
  5054.     SSL_CTX_free(cctx);

#1763
test/sslapitest.c:5052: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  5050.  end:
  5051.     SSL_free(serverssl);
  5052.     SSL_free(clientssl);
            ^
  5053.     SSL_CTX_free(sctx);
  5054.     SSL_CTX_free(cctx);

#1764
test/sslapitest.c:5051: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  5049. 
  5050.  end:
  5051.     SSL_free(serverssl);
            ^
  5052.     SSL_free(clientssl);
  5053.     SSL_CTX_free(sctx);

#1765
test/sslapitest.c:5051: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  5049. 
  5050.  end:
  5051.     SSL_free(serverssl);
            ^
  5052.     SSL_free(clientssl);
  5053.     SSL_CTX_free(sctx);

#1766
test/sslapitest.c:5135: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  5133.  end:
  5134.     SSL_free(serverssl);
  5135.     SSL_free(clientssl);
            ^
  5136.     SSL_CTX_free(sctx);
  5137.     SSL_CTX_free(cctx);

#1767
test/sslapitest.c:5135: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  5133.  end:
  5134.     SSL_free(serverssl);
  5135.     SSL_free(clientssl);
            ^
  5136.     SSL_CTX_free(sctx);
  5137.     SSL_CTX_free(cctx);

#1768
test/sslapitest.c:5134: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  5132. 
  5133.  end:
  5134.     SSL_free(serverssl);
            ^
  5135.     SSL_free(clientssl);
  5136.     SSL_CTX_free(sctx);

#1769
test/sslapitest.c:5134: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  5132. 
  5133.  end:
  5134.     SSL_free(serverssl);
            ^
  5135.     SSL_free(clientssl);
  5136.     SSL_CTX_free(sctx);

#1770
test/sslapitest.c:5192: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  5190.  end:
  5191.     SSL_free(serverssl);
  5192.     SSL_free(clientssl);
            ^
  5193.     SSL_CTX_free(sctx);
  5194.     SSL_CTX_free(cctx);

#1771
test/sslapitest.c:5175: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_clear`.
  5173. 
  5174.     /* Clear clientssl - we're going to reuse the object */
  5175.     if (!TEST_true(SSL_clear(clientssl)))
                 ^
  5176.         goto end;
  5177. 

#1772
test/sslapitest.c:5191: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  5189. 
  5190.  end:
  5191.     SSL_free(serverssl);
            ^
  5192.     SSL_free(clientssl);
  5193.     SSL_CTX_free(sctx);

#1773
test/sslapitest.c:5191: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  5189. 
  5190.  end:
  5191.     SSL_free(serverssl);
            ^
  5192.     SSL_free(clientssl);
  5193.     SSL_CTX_free(sctx);

#1774
test/sslapitest.c:5220: error: Integer Overflow L2
  ([0, +oo] - 34):unsigned64 by call to `PACKET_forward`.
  5218.             || !TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))
  5219.                /* Skip client version and random */
  5220.             || !TEST_true(PACKET_forward(&pkt, CLIENT_VERSION_LEN
                        ^
  5221.                                                + SSL3_RANDOM_SIZE))
  5222.                /* Skip session id */

#1775
test/sslapitest.c:5218: error: Integer Overflow L2
  ([0, +oo] - 4):unsigned64 by call to `PACKET_forward`.
  5216.             || !PACKET_forward(&pkt, SSL3_RT_HEADER_LENGTH)
  5217.                /* Skip the handshake message header */
  5218.             || !TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))
                        ^
  5219.                /* Skip client version and random */
  5220.             || !TEST_true(PACKET_forward(&pkt, CLIENT_VERSION_LEN

#1776
test/sslapitest.c:5216: error: Integer Overflow L2
  ([0, +oo] - 5):unsigned64 by call to `PACKET_forward`.
  5214.     if (!TEST_true( PACKET_buf_init( &pkt, data, len ) )
  5215.                /* Skip the record header */
  5216.             || !PACKET_forward(&pkt, SSL3_RT_HEADER_LENGTH)
                        ^
  5217.                /* Skip the handshake message header */
  5218.             || !TEST_true(PACKET_forward(&pkt, SSL3_HM_HEADER_LENGTH))

#1777
test/sslapitest.c:5305: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_CTX_free`.
  5303. end:
  5304.     SSL_free(con);
  5305.     SSL_CTX_free(ctx);
            ^
  5306. 
  5307.     return testresult;

#1778
test/sslapitest.c:5304: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  5302. 
  5303. end:
  5304.     SSL_free(con);
            ^
  5305.     SSL_CTX_free(ctx);
  5306. 

#1779
test/sslapitest.c:5304: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  5302. 
  5303. end:
  5304.     SSL_free(con);
            ^
  5305.     SSL_CTX_free(ctx);
  5306. 

#1780
test/sslapitest.c:5361: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  5359.  end:
  5360.     SSL_free(serverssl);
  5361.     SSL_free(clientssl);
            ^
  5362.     SSL_CTX_free(sctx);
  5363.     SSL_CTX_free(cctx);

#1781
test/sslapitest.c:5361: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  5359.  end:
  5360.     SSL_free(serverssl);
  5361.     SSL_free(clientssl);
            ^
  5362.     SSL_CTX_free(sctx);
  5363.     SSL_CTX_free(cctx);

#1782
test/sslapitest.c:5360: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  5358. 
  5359.  end:
  5360.     SSL_free(serverssl);
            ^
  5361.     SSL_free(clientssl);
  5362.     SSL_CTX_free(sctx);

#1783
test/sslapitest.c:5360: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  5358. 
  5359.  end:
  5360.     SSL_free(serverssl);
            ^
  5361.     SSL_free(clientssl);
  5362.     SSL_CTX_free(sctx);

#1784
crypto/ec/curve25519.c:5461: error: Integer Overflow L2
  (128 - [1, 253]):unsigned64 by call to `SHA512_Update`.
  5459.     SHA512_Update(&hash_ctx, out_sig, 32);
  5460.     SHA512_Update(&hash_ctx, public_key, 32);
  5461.     SHA512_Update(&hash_ctx, message, message_len);
            ^
  5462.     SHA512_Final(hram, &hash_ctx);
  5463. 

#1785
crypto/ec/curve25519.c:5462: error: Integer Overflow L2
  (128 - [113, 380]):unsigned64 by call to `SHA512_Final`.
  5460.     SHA512_Update(&hash_ctx, public_key, 32);
  5461.     SHA512_Update(&hash_ctx, message, message_len);
  5462.     SHA512_Final(hram, &hash_ctx);
            ^
  5463. 
  5464.     x25519_sc_reduce(hram);

#1786
crypto/ec/curve25519.c:5460: error: Integer Overflow L2
  (32 - [1, 127]):unsigned64 by call to `SHA512_Update`.
  5458.     SHA512_Init(&hash_ctx);
  5459.     SHA512_Update(&hash_ctx, out_sig, 32);
  5460.     SHA512_Update(&hash_ctx, public_key, 32);
            ^
  5461.     SHA512_Update(&hash_ctx, message, message_len);
  5462.     SHA512_Final(hram, &hash_ctx);

#1787
crypto/ec/curve25519.c:5532: error: Integer Overflow L2
  (128 - [1, 253]):unsigned64 by call to `SHA512_Update`.
  5530.     SHA512_Update(&hash_ctx, r, 32);
  5531.     SHA512_Update(&hash_ctx, public_key, 32);
  5532.     SHA512_Update(&hash_ctx, message, message_len);
            ^
  5533.     SHA512_Final(h, &hash_ctx);
  5534. 

#1788
crypto/ec/curve25519.c:5533: error: Integer Overflow L2
  (128 - [113, 380]):unsigned64 by call to `SHA512_Final`.
  5531.     SHA512_Update(&hash_ctx, public_key, 32);
  5532.     SHA512_Update(&hash_ctx, message, message_len);
  5533.     SHA512_Final(h, &hash_ctx);
            ^
  5534. 
  5535.     x25519_sc_reduce(h);

#1789
crypto/ec/curve25519.c:5531: error: Integer Overflow L2
  (32 - [1, 127]):unsigned64 by call to `SHA512_Update`.
  5529.     SHA512_Init(&hash_ctx);
  5530.     SHA512_Update(&hash_ctx, r, 32);
  5531.     SHA512_Update(&hash_ctx, public_key, 32);
            ^
  5532.     SHA512_Update(&hash_ctx, message, message_len);
  5533.     SHA512_Final(h, &hash_ctx);

#1790
ssl/ssl_lib.c:5494: error: Integer Overflow L2
  ([1, +oo] - [2, 3]):unsigned64 by call to `bytes_to_cipher_list`.
  5492.     if (!PACKET_buf_init(&pkt, bytes, len))
  5493.         return 0;
  5494.     return bytes_to_cipher_list(s, &pkt, sk, scsvs, isv2format, 0);
                   ^
  5495. }
  5496. 

#1791
test/sslapitest.c:5579: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  5577.     vbase = NULL;
  5578.     SSL_free(serverssl);
  5579.     SSL_free(clientssl);
            ^
  5580.     SSL_CTX_free(sctx);
  5581.     SSL_CTX_free(cctx);

#1792
test/sslapitest.c:5579: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  5577.     vbase = NULL;
  5578.     SSL_free(serverssl);
  5579.     SSL_free(clientssl);
            ^
  5580.     SSL_CTX_free(sctx);
  5581.     SSL_CTX_free(cctx);

#1793
test/sslapitest.c:5827: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  5825.     SSL_shutdown(serverssl);
  5826.     SSL_free(serverssl);
  5827.     SSL_free(clientssl);
            ^
  5828.     serverssl = clientssl = NULL;
  5829. 

#1794
test/sslapitest.c:5827: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  5825.     SSL_shutdown(serverssl);
  5826.     SSL_free(serverssl);
  5827.     SSL_free(clientssl);
            ^
  5828.     serverssl = clientssl = NULL;
  5829. 

#1795
test/sslapitest.c:5771: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `setupearly_data_test`.
  5769. 
  5770.         /* early_data tests */
  5771.         if (!TEST_true(setupearly_data_test(&cctx, &sctx, &clientssl,
                     ^
  5772.                                             &serverssl, &sess, 0)))
  5773.             goto end;

#1796
test/sslapitest.c:5900: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  5898.  end:
  5899.     SSL_free(serverssl);
  5900.     SSL_free(clientssl);
            ^
  5901.     SSL_CTX_free(sctx);
  5902.     SSL_CTX_free(cctx);

#1797
test/sslapitest.c:5900: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  5898.  end:
  5899.     SSL_free(serverssl);
  5900.     SSL_free(clientssl);
            ^
  5901.     SSL_CTX_free(sctx);
  5902.     SSL_CTX_free(cctx);

#1798
test/sslapitest.c:5899: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  5897. 
  5898.  end:
  5899.     SSL_free(serverssl);
            ^
  5900.     SSL_free(clientssl);
  5901.     SSL_CTX_free(sctx);

#1799
test/sslapitest.c:5899: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  5897. 
  5898.  end:
  5899.     SSL_free(serverssl);
            ^
  5900.     SSL_free(clientssl);
  5901.     SSL_CTX_free(sctx);

#1800
test/sslapitest.c:6006: error: Buffer Overrun L1
  Offset: -1 Size: 1024 by call to `SSL_get_shared_ciphers`.
  6004.         goto end;
  6005. 
  6006.     if (!TEST_ptr(SSL_get_shared_ciphers(serverssl, buf, sizeof(buf)))
                 ^
  6007.             || !TEST_int_eq(strcmp(buf, shared_ciphers_data[tst].shared), 0)) {
  6008.         TEST_info("Shared ciphers are: %s\n", buf);

#1801
test/sslapitest.c:6016: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  6014.  end:
  6015.     SSL_free(serverssl);
  6016.     SSL_free(clientssl);
            ^
  6017.     SSL_CTX_free(sctx);
  6018.     SSL_CTX_free(cctx);

#1802
test/sslapitest.c:6016: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  6014.  end:
  6015.     SSL_free(serverssl);
  6016.     SSL_free(clientssl);
            ^
  6017.     SSL_CTX_free(sctx);
  6018.     SSL_CTX_free(cctx);

#1803
test/sslapitest.c:6015: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  6013. 
  6014.  end:
  6015.     SSL_free(serverssl);
            ^
  6016.     SSL_free(clientssl);
  6017.     SSL_CTX_free(sctx);

#1804
test/sslapitest.c:6015: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  6013. 
  6014.  end:
  6015.     SSL_free(serverssl);
            ^
  6016.     SSL_free(clientssl);
  6017.     SSL_CTX_free(sctx);

#1805
test/sslapitest.c:6242: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  6240.     SSL_SESSION_free(clntsess);
  6241.     SSL_free(serverssl);
  6242.     SSL_free(clientssl);
            ^
  6243.     SSL_CTX_free(sctx);
  6244.     SSL_CTX_free(cctx);

#1806
test/sslapitest.c:6242: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  6240.     SSL_SESSION_free(clntsess);
  6241.     SSL_free(serverssl);
  6242.     SSL_free(clientssl);
            ^
  6243.     SSL_CTX_free(sctx);
  6244.     SSL_CTX_free(cctx);

#1807
test/sslapitest.c:6404: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  6402.  end:
  6403.     SSL_free(serverssl);
  6404.     SSL_free(clientssl);
            ^
  6405.     SSL_CTX_free(sctx);
  6406.     SSL_CTX_free(cctx);

#1808
test/sslapitest.c:6404: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  6402.  end:
  6403.     SSL_free(serverssl);
  6404.     SSL_free(clientssl);
            ^
  6405.     SSL_CTX_free(sctx);
  6406.     SSL_CTX_free(cctx);

#1809
test/sslapitest.c:6403: error: Integer Overflow L2
  ([0, 1] - 1):unsigned32 by call to `SSL_free`.
  6401. 
  6402.  end:
  6403.     SSL_free(serverssl);
            ^
  6404.     SSL_free(clientssl);
  6405.     SSL_CTX_free(sctx);

#1810
test/sslapitest.c:6403: error: Integer Overflow L2
  ([0, 1] - 1):unsigned64 by call to `SSL_free`.
  6401. 
  6402.  end:
  6403.     SSL_free(serverssl);
            ^
  6404.     SSL_free(clientssl);
  6405.     SSL_CTX_free(sctx);

#1811
test/sslapitest.c:6571: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  6569. 
  6570.  end:
  6571.     SSL_free(serverssl);
            ^
  6572.     SSL_free(clientssl);
  6573.     SSL_CTX_free(sctx);

#1812
test/sslapitest.c:6571: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  6569. 
  6570.  end:
  6571.     SSL_free(serverssl);
            ^
  6572.     SSL_free(clientssl);
  6573.     SSL_CTX_free(sctx);

#1813
test/sslapitest.c:6682: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  6680.  end:
  6681.     SSL_free(serverssl);
  6682.     SSL_free(clientssl);
            ^
  6683.     SSL_CTX_free(sctx);
  6684.     SSL_CTX_free(cctx);

#1814
test/sslapitest.c:6682: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  6680.  end:
  6681.     SSL_free(serverssl);
  6682.     SSL_free(clientssl);
            ^
  6683.     SSL_CTX_free(sctx);
  6684.     SSL_CTX_free(cctx);

#1815
test/sslapitest.c:6681: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  6679. 
  6680.  end:
  6681.     SSL_free(serverssl);
            ^
  6682.     SSL_free(clientssl);
  6683.     SSL_CTX_free(sctx);

#1816
test/sslapitest.c:6681: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  6679. 
  6680.  end:
  6681.     SSL_free(serverssl);
            ^
  6682.     SSL_free(clientssl);
  6683.     SSL_CTX_free(sctx);

#1817
test/sslapitest.c:6797: error: Integer Overflow L1
  (0 - 1):unsigned32 by call to `SSL_free`.
  6795.  end:
  6796.     SSL_free(serverssl);
  6797.     SSL_free(clientssl);
            ^
  6798.     SSL_CTX_free(sctx);
  6799.     SSL_CTX_free(cctx);

#1818
test/sslapitest.c:6797: error: Integer Overflow L1
  (0 - 1):unsigned64 by call to `SSL_free`.
  6795.  end:
  6796.     SSL_free(serverssl);
  6797.     SSL_free(clientssl);
            ^
  6798.     SSL_CTX_free(sctx);
  6799.     SSL_CTX_free(cctx);

#1819
test/sslapitest.c:6796: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned32 by call to `SSL_free`.
  6794. 
  6795.  end:
  6796.     SSL_free(serverssl);
            ^
  6797.     SSL_free(clientssl);
  6798.     SSL_CTX_free(sctx);

#1820
test/sslapitest.c:6796: error: Integer Overflow L2
  ([0, +oo] - 1):unsigned64 by call to `SSL_free`.
  6794. 
  6795.  end:
  6796.     SSL_free(serverssl);
            ^
  6797.     SSL_free(clientssl);
  6798.     SSL_CTX_free(sctx);

Found 1821 issues
                Issue Type(ISSUED_TYPE_ID): #
  Integer Overflow L2(INTEGER_OVERFLOW_L2): 885
                    Dead Store(DEAD_STORE): 343
  Integer Overflow L1(INTEGER_OVERFLOW_L1): 191
      Buffer Overrun L2(BUFFER_OVERRUN_L2): 101
      Buffer Overrun L3(BUFFER_OVERRUN_L3): 100
        Null Dereference(NULL_DEREFERENCE): 99
  Uninitialized Value(UNINITIALIZED_VALUE): 69
      Buffer Overrun L1(BUFFER_OVERRUN_L1): 30
        Unreachable Code(UNREACHABLE_CODE): 1
              Resource Leak(RESOURCE_LEAK): 1
      Buffer Overrun S2(BUFFER_OVERRUN_S2): 1
